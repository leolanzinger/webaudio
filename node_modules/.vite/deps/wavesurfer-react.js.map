{
  "version": 3,
  "sources": ["../../wavesurfer.js/dist/webpack:/WaveSurfer/webpack/universalModuleDefinition", "../../wavesurfer.js/dist/webpack:/WaveSurfer/src/drawer.canvasentry.js", "../../wavesurfer.js/dist/webpack:/WaveSurfer/src/drawer.js", "../../wavesurfer.js/dist/webpack:/WaveSurfer/src/drawer.multicanvas.js", "../../wavesurfer.js/dist/webpack:/WaveSurfer/src/mediaelement-webaudio.js", "../../wavesurfer.js/dist/webpack:/WaveSurfer/src/mediaelement.js", "../../wavesurfer.js/dist/webpack:/WaveSurfer/src/peakcache.js", "../../wavesurfer.js/dist/webpack:/WaveSurfer/src/util/absMax.js", "../../wavesurfer.js/dist/webpack:/WaveSurfer/src/util/clamp.js", "../../wavesurfer.js/dist/webpack:/WaveSurfer/src/util/fetch.js", "../../wavesurfer.js/dist/webpack:/WaveSurfer/src/util/frame.js", "../../wavesurfer.js/dist/webpack:/WaveSurfer/src/util/get-id.js", "../../wavesurfer.js/dist/webpack:/WaveSurfer/src/util/index.js", "../../wavesurfer.js/dist/webpack:/WaveSurfer/src/util/max.js", "../../wavesurfer.js/dist/webpack:/WaveSurfer/src/util/min.js", "../../wavesurfer.js/dist/webpack:/WaveSurfer/src/util/observer.js", "../../wavesurfer.js/dist/webpack:/WaveSurfer/src/util/orientation.js", "../../wavesurfer.js/dist/webpack:/WaveSurfer/src/util/prevent-click.js", "../../wavesurfer.js/dist/webpack:/WaveSurfer/src/util/request-animation-frame.js", "../../wavesurfer.js/dist/webpack:/WaveSurfer/src/util/silence-mode.js", "../../wavesurfer.js/dist/webpack:/WaveSurfer/src/util/style.js", "../../wavesurfer.js/dist/webpack:/WaveSurfer/src/wavesurfer.js", "../../wavesurfer.js/dist/webpack:/WaveSurfer/src/webaudio.js", "../../wavesurfer.js/dist/webpack:/WaveSurfer/node_modules/debounce/index.js", "../../wavesurfer.js/dist/webpack:/WaveSurfer/webpack/bootstrap", "../../wavesurfer.js/dist/webpack:/WaveSurfer/webpack/before-startup", "../../wavesurfer.js/dist/webpack:/WaveSurfer/webpack/startup", "../../wavesurfer.js/dist/webpack:/WaveSurfer/webpack/after-startup", "../../wavesurfer-react/dist/components/Region.js", "../../wavesurfer-react/dist/hooks/useRegionEvent.js", "../../wavesurfer-react/dist/contexts/WaveSurferContext.js", "../../wavesurfer-react/dist/hooks/useWavesurferContext.js", "../../wavesurfer-react/dist/constants/updatableRegionProps.js", "../../wavesurfer-react/dist/components/Marker.js", "../../wavesurfer-react/dist/containers/WaveSurfer.js", "../../wavesurfer-react/dist/components/WaveForm.js", "../../wavesurfer-react/dist/utils/getWaveFormOptionsFromProps.js", "../../wavesurfer-react/dist/hooks/useWavesurfer.js", "../../wavesurfer-react/dist/utils/createWavesurfer.js", "../../wavesurfer-react/dist/utils/createPlugin.js", "../../wavesurfer-react/dist/utils/getDifference.js", "../../wavesurfer-react/dist/utils/isReactElement.js"],
  "sourcesContent": ["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"WaveSurfer\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WaveSurfer\"] = factory();\n\telse\n\t\troot[\"WaveSurfer\"] = factory();\n})(self, () => {\nreturn ", "/**\n * @since 3.0.0\n */\n\nimport style from './util/style';\nimport getId from './util/get-id';\n\n/**\n * The `CanvasEntry` class represents an element consisting of a wave `canvas`\n * and an (optional) progress wave `canvas`.\n *\n * The `MultiCanvas` renderer uses one or more `CanvasEntry` instances to\n * render a waveform, depending on the zoom level.\n */\nexport default class CanvasEntry {\n    constructor() {\n        /**\n         * The wave node\n         *\n         * @type {HTMLCanvasElement}\n         */\n        this.wave = null;\n        /**\n         * The wave canvas rendering context\n         *\n         * @type {CanvasRenderingContext2D}\n         */\n        this.waveCtx = null;\n        /**\n         * The (optional) progress wave node\n         *\n         * @type {HTMLCanvasElement}\n         */\n        this.progress = null;\n        /**\n         * The (optional) progress wave canvas rendering context\n         *\n         * @type {CanvasRenderingContext2D}\n         */\n        this.progressCtx = null;\n        /**\n         * Start of the area the canvas should render, between 0 and 1\n         *\n         * @type {number}\n         */\n        this.start = 0;\n        /**\n         * End of the area the canvas should render, between 0 and 1\n         *\n         * @type {number}\n         */\n        this.end = 1;\n        /**\n         * Unique identifier for this entry\n         *\n         * @type {string}\n         */\n        this.id = getId(\n            typeof this.constructor.name !== 'undefined'\n                ? this.constructor.name.toLowerCase() + '_'\n                : 'canvasentry_'\n        );\n        /**\n         * Canvas 2d context attributes\n         *\n         * @type {object}\n         */\n        this.canvasContextAttributes = {};\n    }\n\n    /**\n     * Store the wave canvas element and create the 2D rendering context\n     *\n     * @param {HTMLCanvasElement} element The wave `canvas` element.\n     */\n    initWave(element) {\n        this.wave = element;\n        this.waveCtx = this.wave.getContext('2d', this.canvasContextAttributes);\n    }\n\n    /**\n     * Store the progress wave canvas element and create the 2D rendering\n     * context\n     *\n     * @param {HTMLCanvasElement} element The progress wave `canvas` element.\n     */\n    initProgress(element) {\n        this.progress = element;\n        this.progressCtx = this.progress.getContext(\n            '2d',\n            this.canvasContextAttributes\n        );\n    }\n\n    /**\n     * Update the dimensions\n     *\n     * @param {number} elementWidth Width of the entry\n     * @param {number} totalWidth Total width of the multi canvas renderer\n     * @param {number} width The new width of the element\n     * @param {number} height The new height of the element\n     */\n    updateDimensions(elementWidth, totalWidth, width, height) {\n        // where the canvas starts and ends in the waveform, represented as a\n        // decimal between 0 and 1\n        this.start = this.wave.offsetLeft / totalWidth || 0;\n        this.end = this.start + elementWidth / totalWidth;\n\n        // set wave canvas dimensions\n        this.wave.width = width;\n        this.wave.height = height;\n        let elementSize = { width: elementWidth + 'px' };\n        style(this.wave, elementSize);\n\n        if (this.hasProgressCanvas) {\n            // set progress canvas dimensions\n            this.progress.width = width;\n            this.progress.height = height;\n            style(this.progress, elementSize);\n        }\n    }\n\n    /**\n     * Clear the wave and progress rendering contexts\n     */\n    clearWave() {\n        // wave\n        this.waveCtx.clearRect(\n            0,\n            0,\n            this.waveCtx.canvas.width,\n            this.waveCtx.canvas.height\n        );\n\n        // progress\n        if (this.hasProgressCanvas) {\n            this.progressCtx.clearRect(\n                0,\n                0,\n                this.progressCtx.canvas.width,\n                this.progressCtx.canvas.height\n            );\n        }\n    }\n\n    /**\n     * Set the fill styles for wave and progress\n     * @param {string|string[]} waveColor Fill color for the wave canvas,\n     * or an array of colors to apply as a gradient\n     * @param {?string|string[]} progressColor Fill color for the progress canvas,\n     * or an array of colors to apply as a gradient\n     */\n    setFillStyles(waveColor, progressColor) {\n        this.waveCtx.fillStyle = this.getFillStyle(this.waveCtx, waveColor);\n\n        if (this.hasProgressCanvas) {\n            this.progressCtx.fillStyle = this.getFillStyle(this.progressCtx, progressColor);\n        }\n    }\n\n    /**\n     * Utility function to handle wave color arguments\n     *\n     * When the color argument type is a string or CanvasGradient instance,\n     * it will be returned as is. Otherwise, it will be treated as an array,\n     * and a new CanvasGradient will be returned\n     *\n     * @since 6.0.0\n     * @param {CanvasRenderingContext2D} ctx Rendering context of target canvas\n     * @param {string|string[]|CanvasGradient} color Either a single fill color\n     *     for the wave canvas, an existing CanvasGradient instance, or an array\n     *     of colors to apply as a gradient\n     * @returns {string|CanvasGradient} Returns a string fillstyle value, or a\n     *     canvas gradient\n     */\n    getFillStyle(ctx, color) {\n        if (typeof color == 'string' || color instanceof CanvasGradient) {\n            return color;\n        }\n\n        const waveGradient = ctx.createLinearGradient(0, 0, 0, ctx.canvas.height);\n        color.forEach((value, index) => waveGradient.addColorStop((index / color.length), value));\n\n        return waveGradient;\n    }\n\n    /**\n     * Set the canvas transforms for wave and progress\n     *\n     * @param {boolean} vertical Whether to render vertically\n     */\n    applyCanvasTransforms(vertical) {\n        if (vertical) {\n            // Reflect the waveform across the line y = -x\n            this.waveCtx.setTransform(0, 1, 1, 0, 0, 0);\n\n            if (this.hasProgressCanvas) {\n                this.progressCtx.setTransform(0, 1, 1, 0, 0, 0);\n            }\n        }\n    }\n\n    /**\n     * Draw a rectangle for wave and progress\n     *\n     * @param {number} x X start position\n     * @param {number} y Y start position\n     * @param {number} width Width of the rectangle\n     * @param {number} height Height of the rectangle\n     * @param {number} radius Radius of the rectangle\n     */\n    fillRects(x, y, width, height, radius) {\n        this.fillRectToContext(this.waveCtx, x, y, width, height, radius);\n\n        if (this.hasProgressCanvas) {\n            this.fillRectToContext(\n                this.progressCtx,\n                x,\n                y,\n                width,\n                height,\n                radius\n            );\n        }\n    }\n\n    /**\n     * Draw the actual rectangle on a `canvas` element\n     *\n     * @param {CanvasRenderingContext2D} ctx Rendering context of target canvas\n     * @param {number} x X start position\n     * @param {number} y Y start position\n     * @param {number} width Width of the rectangle\n     * @param {number} height Height of the rectangle\n     * @param {number} radius Radius of the rectangle\n     */\n    fillRectToContext(ctx, x, y, width, height, radius) {\n        if (!ctx) {\n            return;\n        }\n\n        if (radius) {\n            this.drawRoundedRect(ctx, x, y, width, height, radius);\n        } else {\n            ctx.fillRect(x, y, width, height);\n        }\n    }\n\n    /**\n     * Draw a rounded rectangle on Canvas\n     *\n     * @param {CanvasRenderingContext2D} ctx Canvas context\n     * @param {number} x X-position of the rectangle\n     * @param {number} y Y-position of the rectangle\n     * @param {number} width Width of the rectangle\n     * @param {number} height Height of the rectangle\n     * @param {number} radius Radius of the rectangle\n     *\n     * @return {void}\n     * @example drawRoundedRect(ctx, 50, 50, 5, 10, 3)\n     */\n    drawRoundedRect(ctx, x, y, width, height, radius) {\n        if (height === 0) {\n            return;\n        }\n        // peaks are float values from -1 to 1. Use absolute height values in\n        // order to correctly calculate rounded rectangle coordinates\n        if (height < 0) {\n            height *= -1;\n            y -= height;\n        }\n        ctx.beginPath();\n        ctx.moveTo(x + radius, y);\n        ctx.lineTo(x + width - radius, y);\n        ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\n        ctx.lineTo(x + width, y + height - radius);\n        ctx.quadraticCurveTo(\n            x + width,\n            y + height,\n            x + width - radius,\n            y + height\n        );\n        ctx.lineTo(x + radius, y + height);\n        ctx.quadraticCurveTo(x, y + height, x, y + height - radius);\n        ctx.lineTo(x, y + radius);\n        ctx.quadraticCurveTo(x, y, x + radius, y);\n        ctx.closePath();\n        ctx.fill();\n    }\n\n    /**\n     * Render the actual wave and progress lines\n     *\n     * @param {number[]} peaks Array with peaks data\n     * @param {number} absmax Maximum peak value (absolute)\n     * @param {number} halfH Half the height of the waveform\n     * @param {number} offsetY Offset to the top\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that\n     * should be rendered\n     */\n    drawLines(peaks, absmax, halfH, offsetY, start, end) {\n        this.drawLineToContext(\n            this.waveCtx,\n            peaks,\n            absmax,\n            halfH,\n            offsetY,\n            start,\n            end\n        );\n\n        if (this.hasProgressCanvas) {\n            this.drawLineToContext(\n                this.progressCtx,\n                peaks,\n                absmax,\n                halfH,\n                offsetY,\n                start,\n                end\n            );\n        }\n    }\n\n    /**\n     * Render the actual waveform line on a `canvas` element\n     *\n     * @param {CanvasRenderingContext2D} ctx Rendering context of target canvas\n     * @param {number[]} peaks Array with peaks data\n     * @param {number} absmax Maximum peak value (absolute)\n     * @param {number} halfH Half the height of the waveform\n     * @param {number} offsetY Offset to the top\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that\n     * should be rendered\n     */\n    drawLineToContext(ctx, peaks, absmax, halfH, offsetY, start, end) {\n        if (!ctx) {\n            return;\n        }\n\n        const length = peaks.length / 2;\n        const first = Math.round(length * this.start);\n\n        // use one more peak value to make sure we join peaks at ends -- unless,\n        // of course, this is the last canvas\n        const last = Math.round(length * this.end) + 1;\n\n        const canvasStart = first;\n        const canvasEnd = last;\n        const scale = this.wave.width / (canvasEnd - canvasStart - 1);\n\n        // optimization\n        const halfOffset = halfH + offsetY;\n        const absmaxHalf = absmax / halfH;\n\n        ctx.beginPath();\n        ctx.moveTo((canvasStart - first) * scale, halfOffset);\n\n        ctx.lineTo(\n            (canvasStart - first) * scale,\n            halfOffset - Math.round((peaks[2 * canvasStart] || 0) / absmaxHalf)\n        );\n\n        let i, peak, h;\n        for (i = canvasStart; i < canvasEnd; i++) {\n            peak = peaks[2 * i] || 0;\n            h = Math.round(peak / absmaxHalf);\n            ctx.lineTo((i - first) * scale + this.halfPixel, halfOffset - h);\n        }\n\n        // draw the bottom edge going backwards, to make a single\n        // closed hull to fill\n        let j = canvasEnd - 1;\n        for (j; j >= canvasStart; j--) {\n            peak = peaks[2 * j + 1] || 0;\n            h = Math.round(peak / absmaxHalf);\n            ctx.lineTo((j - first) * scale + this.halfPixel, halfOffset - h);\n        }\n\n        ctx.lineTo(\n            (canvasStart - first) * scale,\n            halfOffset -\n            Math.round((peaks[2 * canvasStart + 1] || 0) / absmaxHalf)\n        );\n\n        ctx.closePath();\n        ctx.fill();\n    }\n\n    /**\n     * Destroys this entry\n     */\n    destroy() {\n        this.waveCtx = null;\n        this.wave = null;\n\n        this.progressCtx = null;\n        this.progress = null;\n    }\n\n    /**\n     * Return image data of the wave `canvas` element\n     *\n     * When using a `type` of `'blob'`, this will return a `Promise` that\n     * resolves with a `Blob` instance.\n     *\n     * @param {string} format='image/png' An optional value of a format type.\n     * @param {number} quality=0.92 An optional value between 0 and 1.\n     * @param {string} type='dataURL' Either 'dataURL' or 'blob'.\n     * @return {string|Promise} When using the default `'dataURL'` `type` this\n     * returns a data URL. When using the `'blob'` `type` this returns a\n     * `Promise` that resolves with a `Blob` instance.\n     */\n    getImage(format, quality, type) {\n        if (type === 'blob') {\n            return new Promise(resolve => {\n                this.wave.toBlob(resolve, format, quality);\n            });\n        } else if (type === 'dataURL') {\n            return this.wave.toDataURL(format, quality);\n        }\n    }\n}\n", "import * as util from './util';\n\n/**\n * Parent class for renderers\n *\n * @extends {Observer}\n */\nexport default class Drawer extends util.Observer {\n    /**\n     * @param {HTMLElement} container The container node of the wavesurfer instance\n     * @param {WavesurferParams} params The wavesurfer initialisation options\n     */\n    constructor(container, params) {\n        super();\n\n        this.container = util.withOrientation(container, params.vertical);\n        /**\n         * @type {WavesurferParams}\n         */\n        this.params = params;\n        /**\n         * The width of the renderer\n         * @type {number}\n         */\n        this.width = 0;\n        /**\n         * The height of the renderer\n         * @type {number}\n         */\n        this.height = params.height * this.params.pixelRatio;\n\n        this.lastPos = 0;\n        /**\n         * The `<wave>` element which is added to the container\n         * @type {HTMLElement}\n         */\n        this.wrapper = null;\n    }\n\n    /**\n     * Alias of `util.style`\n     *\n     * @param {HTMLElement} el The element that the styles will be applied to\n     * @param {Object} styles The map of propName: attribute, both are used as-is\n     * @return {HTMLElement} el\n     */\n    style(el, styles) {\n        return util.style(el, styles);\n    }\n\n    /**\n     * Create the wrapper `<wave>` element, style it and set up the events for\n     * interaction\n     */\n    createWrapper() {\n        this.wrapper = util.withOrientation(\n            this.container.appendChild(document.createElement('wave')),\n            this.params.vertical\n        );\n\n        this.style(this.wrapper, {\n            display: 'block',\n            position: 'relative',\n            userSelect: 'none',\n            webkitUserSelect: 'none',\n            height: this.params.height + 'px'\n        });\n\n        if (this.params.fillParent || this.params.scrollParent) {\n            this.style(this.wrapper, {\n                width: '100%',\n                cursor: this.params.hideCursor ? 'none' : 'auto',\n                overflowX: this.params.hideScrollbar ? 'hidden' : 'auto',\n                overflowY: 'hidden'\n            });\n        }\n\n        this.setupWrapperEvents();\n    }\n\n    /**\n     * Handle click event\n     *\n     * @param {Event} e Click event\n     * @param {?boolean} noPrevent Set to true to not call `e.preventDefault()`\n     * @return {number} Playback position from 0 to 1\n     */\n    handleEvent(e, noPrevent) {\n        !noPrevent && e.preventDefault();\n\n        const clientX = util.withOrientation(\n            e.targetTouches ? e.targetTouches[0] : e,\n            this.params.vertical\n        ).clientX;\n        const bbox = this.wrapper.getBoundingClientRect();\n\n        const nominalWidth = this.width;\n        const parentWidth = this.getWidth();\n        const progressPixels = this.getProgressPixels(bbox, clientX);\n\n        let progress;\n        if (!this.params.fillParent && nominalWidth < parentWidth) {\n            progress = progressPixels *\n                (this.params.pixelRatio / nominalWidth) || 0;\n        } else {\n            progress = (progressPixels + this.wrapper.scrollLeft) /\n                this.wrapper.scrollWidth || 0;\n        }\n\n        return util.clamp(progress, 0, 1);\n    }\n\n    getProgressPixels(wrapperBbox, clientX) {\n        if (this.params.rtl) {\n            return wrapperBbox.right - clientX;\n        } else {\n            return clientX - wrapperBbox.left;\n        }\n    }\n\n    setupWrapperEvents() {\n        this.wrapper.addEventListener('click', e => {\n            const orientedEvent = util.withOrientation(e, this.params.vertical);\n            const scrollbarHeight = this.wrapper.offsetHeight -\n                  this.wrapper.clientHeight;\n\n            if (scrollbarHeight !== 0) {\n                // scrollbar is visible.  Check if click was on it\n                const bbox = this.wrapper.getBoundingClientRect();\n                if (orientedEvent.clientY >= bbox.bottom - scrollbarHeight) {\n                    // ignore mousedown as it was on the scrollbar\n                    return;\n                }\n            }\n\n            if (this.params.interact) {\n                this.fireEvent('click', e, this.handleEvent(e));\n            }\n        });\n\n        this.wrapper.addEventListener('dblclick', e => {\n            if (this.params.interact) {\n                this.fireEvent('dblclick', e, this.handleEvent(e));\n            }\n        });\n\n        this.wrapper.addEventListener('scroll', e =>\n            this.fireEvent('scroll', e)\n        );\n    }\n\n    /**\n     * Draw peaks on the canvas\n     *\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays\n     * for split channel rendering\n     * @param {number} length The width of the area that should be drawn\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that should be\n     * rendered\n     */\n    drawPeaks(peaks, length, start, end) {\n        if (!this.setWidth(length)) {\n            this.clearWave();\n        }\n\n        this.params.barWidth\n            ? this.drawBars(peaks, 0, start, end)\n            : this.drawWave(peaks, 0, start, end);\n    }\n\n    /**\n     * Scroll to the beginning\n     */\n    resetScroll() {\n        if (this.wrapper !== null) {\n            this.wrapper.scrollLeft = 0;\n        }\n    }\n\n    /**\n     * Recenter the view-port at a certain percent of the waveform\n     *\n     * @param {number} percent Value from 0 to 1 on the waveform\n     */\n    recenter(percent) {\n        const position = this.wrapper.scrollWidth * percent;\n        this.recenterOnPosition(position, true);\n    }\n\n    /**\n     * Recenter the view-port on a position, either scroll there immediately or\n     * in steps of 5 pixels\n     *\n     * @param {number} position X-offset in pixels\n     * @param {boolean} immediate Set to true to immediately scroll somewhere\n     */\n    recenterOnPosition(position, immediate) {\n        const scrollLeft = this.wrapper.scrollLeft;\n        const half = ~~(this.wrapper.clientWidth / 2);\n        const maxScroll = this.wrapper.scrollWidth - this.wrapper.clientWidth;\n        let target = position - half;\n        let offset = target - scrollLeft;\n\n        if (maxScroll == 0) {\n            // no need to continue if scrollbar is not there\n            return;\n        }\n\n        // if the cursor is currently visible...\n        if (!immediate && -half <= offset && offset < half) {\n            // set rate at which waveform is centered\n            let rate = this.params.autoCenterRate;\n\n            // make rate depend on width of view and length of waveform\n            rate /= half;\n            rate *= maxScroll;\n\n            offset = Math.max(-rate, Math.min(rate, offset));\n            target = scrollLeft + offset;\n        }\n\n        // limit target to valid range (0 to maxScroll)\n        target = Math.max(0, Math.min(maxScroll, target));\n        // no use attempting to scroll if we're not moving\n        if (target != scrollLeft) {\n            this.wrapper.scrollLeft = target;\n        }\n    }\n\n    /**\n     * Get the current scroll position in pixels\n     *\n     * @return {number} Horizontal scroll position in pixels\n     */\n    getScrollX() {\n        let x = 0;\n        if (this.wrapper) {\n            const pixelRatio = this.params.pixelRatio;\n            x = Math.round(this.wrapper.scrollLeft * pixelRatio);\n\n            // In cases of elastic scroll (safari with mouse wheel) you can\n            // scroll beyond the limits of the container\n            // Calculate and floor the scrollable extent to make sure an out\n            // of bounds value is not returned\n            // Ticket #1312\n            if (this.params.scrollParent) {\n                const maxScroll = ~~(\n                    this.wrapper.scrollWidth * pixelRatio -\n                    this.getWidth()\n                );\n                x = Math.min(maxScroll, Math.max(0, x));\n            }\n        }\n        return x;\n    }\n\n    /**\n     * Get the width of the container\n     *\n     * @return {number} The width of the container\n     */\n    getWidth() {\n        return Math.round(this.container.clientWidth * this.params.pixelRatio);\n    }\n\n    /**\n     * Set the width of the container\n     *\n     * @param {number} width The new width of the container\n     * @return {boolean} Whether the width of the container was updated or not\n     */\n    setWidth(width) {\n        if (this.width == width) {\n            return false;\n        }\n\n        this.width = width;\n\n        if (this.params.fillParent || this.params.scrollParent) {\n            this.style(this.wrapper, {\n                width: ''\n            });\n        } else {\n            const newWidth = ~~(this.width / this.params.pixelRatio) + 'px';\n            this.style(this.wrapper, {\n                width: newWidth\n            });\n        }\n\n        this.updateSize();\n        return true;\n    }\n\n    /**\n     * Set the height of the container\n     *\n     * @param {number} height The new height of the container.\n     * @return {boolean} Whether the height of the container was updated or not\n     */\n    setHeight(height) {\n        if (height == this.height) {\n            return false;\n        }\n        this.height = height;\n\n        this.style(this.wrapper, {\n            height: ~~(this.height / this.params.pixelRatio) + 'px'\n        });\n\n        this.updateSize();\n        return true;\n    }\n\n    /**\n     * Called by wavesurfer when progress should be rendered\n     *\n     * @param {number} progress From 0 to 1\n     */\n    progress(progress) {\n        const minPxDelta = 1 / this.params.pixelRatio;\n        const pos = Math.round(progress * this.width) * minPxDelta;\n\n        if (pos < this.lastPos || pos - this.lastPos >= minPxDelta) {\n            this.lastPos = pos;\n\n            if (this.params.scrollParent && this.params.autoCenter) {\n                const newPos = ~~(this.wrapper.scrollWidth * progress);\n                this.recenterOnPosition(\n                    newPos,\n                    this.params.autoCenterImmediately\n                );\n            }\n\n            this.updateProgress(pos);\n        }\n    }\n\n    /**\n     * This is called when wavesurfer is destroyed\n     */\n    destroy() {\n        this.unAll();\n        if (this.wrapper) {\n            if (this.wrapper.parentNode == this.container.domElement) {\n                this.container.removeChild(this.wrapper.domElement);\n            }\n            this.wrapper = null;\n        }\n    }\n\n    /* Renderer-specific methods */\n\n    /**\n     * Called after cursor related params have changed.\n     *\n     * @abstract\n     */\n    updateCursor() {}\n\n    /**\n     * Called when the size of the container changes so the renderer can adjust\n     *\n     * @abstract\n     */\n    updateSize() {}\n\n    /**\n     * Draw a waveform with bars\n     *\n     * @abstract\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays for split channel\n     * rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that should be\n     * rendered\n     */\n    drawBars(peaks, channelIndex, start, end) {}\n\n    /**\n     * Draw a waveform\n     *\n     * @abstract\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays for split channel\n     * rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that should be\n     * rendered\n     */\n    drawWave(peaks, channelIndex, start, end) {}\n\n    /**\n     * Clear the waveform\n     *\n     * @abstract\n     */\n    clearWave() {}\n\n    /**\n     * Render the new progress\n     *\n     * @abstract\n     * @param {number} position X-Offset of progress position in pixels\n     */\n    updateProgress(position) {}\n}\n", "import Drawer from './drawer';\nimport * as util from './util';\nimport CanvasEntry from './drawer.canvasentry';\n\n/**\n * MultiCanvas renderer for wavesurfer. Is currently the default and sole\n * builtin renderer.\n *\n * A `MultiCanvas` consists of one or more `CanvasEntry` instances, depending\n * on the zoom level.\n */\nexport default class MultiCanvas extends Drawer {\n    /**\n     * @param {HTMLElement} container The container node of the wavesurfer instance\n     * @param {WavesurferParams} params The wavesurfer initialisation options\n     */\n    constructor(container, params) {\n        super(container, params);\n\n        /**\n         * @type {number}\n         */\n        this.maxCanvasWidth = params.maxCanvasWidth;\n\n        /**\n         * @type {number}\n         */\n        this.maxCanvasElementWidth = Math.round(\n            params.maxCanvasWidth / params.pixelRatio\n        );\n\n        /**\n         * Whether or not the progress wave is rendered. If the `waveColor`\n         * and `progressColor` are the same color it is not.\n         *\n         * @type {boolean}\n         */\n        this.hasProgressCanvas = params.waveColor != params.progressColor;\n\n        /**\n         * @type {number}\n         */\n        this.halfPixel = 0.5 / params.pixelRatio;\n\n        /**\n         * List of `CanvasEntry` instances.\n         *\n         * @type {Array}\n         */\n        this.canvases = [];\n\n        /**\n         * @type {HTMLElement}\n         */\n        this.progressWave = null;\n\n        /**\n         * Class used to generate entries.\n         *\n         * @type {function}\n         */\n        this.EntryClass = CanvasEntry;\n\n        /**\n         * Canvas 2d context attributes.\n         *\n         * @type {object}\n         */\n        this.canvasContextAttributes = params.drawingContextAttributes;\n\n        /**\n         * Overlap added between entries to prevent vertical white stripes\n         * between `canvas` elements.\n         *\n         * @type {number}\n         */\n        this.overlap = 2 * Math.ceil(params.pixelRatio / 2);\n\n        /**\n         * The radius of the wave bars. Makes bars rounded\n         *\n         * @type {number}\n         */\n        this.barRadius = params.barRadius || 0;\n\n        /**\n         * Whether to render the waveform vertically. Defaults to false.\n         *\n         * @type {boolean}\n         */\n        this.vertical = params.vertical;\n    }\n\n    /**\n     * Initialize the drawer\n     */\n    init() {\n        this.createWrapper();\n        this.createElements();\n    }\n\n    /**\n     * Create the canvas elements and style them\n     *\n     */\n    createElements() {\n        this.progressWave = util.withOrientation(\n            this.wrapper.appendChild(document.createElement('wave')),\n            this.params.vertical\n        );\n        this.style(this.progressWave, {\n            position: 'absolute',\n            zIndex: 3,\n            left: 0,\n            top: 0,\n            bottom: 0,\n            overflow: 'hidden',\n            width: '0',\n            display: 'none',\n            boxSizing: 'border-box',\n            borderRightStyle: 'solid',\n            pointerEvents: 'none'\n        });\n\n        this.addCanvas();\n        this.updateCursor();\n    }\n\n    /**\n     * Update cursor style\n     */\n    updateCursor() {\n        this.style(this.progressWave, {\n            borderRightWidth: this.params.cursorWidth + 'px',\n            borderRightColor: this.params.cursorColor\n        });\n    }\n\n    /**\n     * Adjust to the updated size by adding or removing canvases\n     */\n    updateSize() {\n        const totalWidth = Math.round(this.width / this.params.pixelRatio);\n        const requiredCanvases = Math.ceil(\n            totalWidth / (this.maxCanvasElementWidth + this.overlap)\n        );\n\n        // add required canvases\n        while (this.canvases.length < requiredCanvases) {\n            this.addCanvas();\n        }\n\n        // remove older existing canvases, if any\n        while (this.canvases.length > requiredCanvases) {\n            this.removeCanvas();\n        }\n\n        let canvasWidth = this.maxCanvasWidth + this.overlap;\n        const lastCanvas = this.canvases.length - 1;\n        this.canvases.forEach((entry, i) => {\n            if (i == lastCanvas) {\n                canvasWidth = this.width - this.maxCanvasWidth * lastCanvas;\n            }\n            this.updateDimensions(entry, canvasWidth, this.height);\n\n            entry.clearWave();\n        });\n    }\n\n    /**\n     * Add a canvas to the canvas list\n     *\n     */\n    addCanvas() {\n        const entry = new this.EntryClass();\n        entry.canvasContextAttributes = this.canvasContextAttributes;\n        entry.hasProgressCanvas = this.hasProgressCanvas;\n        entry.halfPixel = this.halfPixel;\n        const leftOffset = this.maxCanvasElementWidth * this.canvases.length;\n\n        // wave\n        let wave = util.withOrientation(\n            this.wrapper.appendChild(document.createElement('canvas')),\n            this.params.vertical\n        );\n        this.style(wave, {\n            position: 'absolute',\n            zIndex: 2,\n            left: leftOffset + 'px',\n            top: 0,\n            bottom: 0,\n            height: '100%',\n            pointerEvents: 'none'\n        });\n        entry.initWave(wave);\n\n        // progress\n        if (this.hasProgressCanvas) {\n            let progress = util.withOrientation(\n                this.progressWave.appendChild(document.createElement('canvas')),\n                this.params.vertical\n            );\n            this.style(progress, {\n                position: 'absolute',\n                left: leftOffset + 'px',\n                top: 0,\n                bottom: 0,\n                height: '100%'\n            });\n            entry.initProgress(progress);\n        }\n\n        this.canvases.push(entry);\n    }\n\n    /**\n     * Pop single canvas from the list\n     *\n     */\n    removeCanvas() {\n        let lastEntry = this.canvases[this.canvases.length - 1];\n\n        // wave\n        lastEntry.wave.parentElement.removeChild(lastEntry.wave.domElement);\n\n        // progress\n        if (this.hasProgressCanvas) {\n            lastEntry.progress.parentElement.removeChild(lastEntry.progress.domElement);\n        }\n\n        // cleanup\n        if (lastEntry) {\n            lastEntry.destroy();\n            lastEntry = null;\n        }\n\n        this.canvases.pop();\n    }\n\n    /**\n     * Update the dimensions of a canvas element\n     *\n     * @param {CanvasEntry} entry Target entry\n     * @param {number} width The new width of the element\n     * @param {number} height The new height of the element\n     */\n    updateDimensions(entry, width, height) {\n        const elementWidth = Math.round(width / this.params.pixelRatio);\n        const totalWidth = Math.round(this.width / this.params.pixelRatio);\n\n        // update canvas dimensions\n        entry.updateDimensions(elementWidth, totalWidth, width, height);\n\n        // style element\n        this.style(this.progressWave, { display: 'block' });\n    }\n\n    /**\n     * Clear the whole multi-canvas\n     */\n    clearWave() {\n        util.frame(() => {\n            this.canvases.forEach(entry => entry.clearWave());\n        })();\n    }\n\n    /**\n     * Draw a waveform with bars\n     *\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays\n     * for split channel rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0. Must be an integer.\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that should be\n     * rendered\n     * @returns {void}\n     */\n    drawBars(peaks, channelIndex, start, end) {\n        return this.prepareDraw(\n            peaks,\n            channelIndex,\n            start,\n            end,\n            ({ absmax, hasMinVals, height, offsetY, halfH, peaks, channelIndex: ch }) => {\n                // if drawBars was called within ws.empty we don't pass a start and\n                // don't want anything to happen\n                if (start === undefined) {\n                    return;\n                }\n                // Skip every other value if there are negatives.\n                const peakIndexScale = hasMinVals ? 2 : 1;\n                const length = peaks.length / peakIndexScale;\n                const bar = this.params.barWidth * this.params.pixelRatio;\n                const gap =\n                    this.params.barGap === null\n                        ? Math.max(this.params.pixelRatio, ~~(bar / 2))\n                        : Math.max(\n                            this.params.pixelRatio,\n                            this.params.barGap * this.params.pixelRatio\n                        );\n                const step = bar + gap;\n\n                const scale = length / this.width;\n                const first = start;\n                const last = end;\n                let peakIndex = first;\n                for (peakIndex; peakIndex < last; peakIndex += step) {\n\n                    // search for the highest peak in the range this bar falls into\n                    let peak = 0;\n                    let peakIndexRange = Math.floor(peakIndex * scale) * peakIndexScale; // start index\n                    const peakIndexEnd = Math.floor((peakIndex + step) * scale) * peakIndexScale;\n                    do { // do..while makes sure at least one peak is always evaluated\n                        const newPeak = Math.abs(peaks[peakIndexRange]); // for arrays starting with negative values\n                        if (newPeak > peak) {\n                            peak = newPeak; // higher\n                        }\n                        peakIndexRange += peakIndexScale; // skip every other value for negatives\n                    } while (peakIndexRange < peakIndexEnd);\n\n                    // calculate the height of this bar according to the highest peak found\n                    let h = Math.round((peak / absmax) * halfH);\n\n                    // raise the bar height to the specified minimum height\n                    // Math.max is used to replace any value smaller than barMinHeight (not just 0) with barMinHeight\n                    if (this.params.barMinHeight) {\n                        h = Math.max(h, this.params.barMinHeight);\n                    }\n\n                    this.fillRect(\n                        peakIndex + this.halfPixel,\n                        halfH - h + offsetY,\n                        bar + this.halfPixel,\n                        h * 2,\n                        this.barRadius,\n                        ch\n                    );\n                }\n            }\n        );\n    }\n\n    /**\n     * Draw a waveform\n     *\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays\n     * for split channel rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0\n     * @param {number?} start The x-offset of the beginning of the area that\n     * should be rendered (If this isn't set only a flat line is rendered)\n     * @param {number?} end The x-offset of the end of the area that should be\n     * rendered\n     * @returns {void}\n     */\n    drawWave(peaks, channelIndex, start, end) {\n        return this.prepareDraw(\n            peaks,\n            channelIndex,\n            start,\n            end,\n            ({ absmax, hasMinVals, height, offsetY, halfH, peaks, channelIndex }) => {\n                if (!hasMinVals) {\n                    const reflectedPeaks = [];\n                    const len = peaks.length;\n                    let i = 0;\n                    for (i; i < len; i++) {\n                        reflectedPeaks[2 * i] = peaks[i];\n                        reflectedPeaks[2 * i + 1] = -peaks[i];\n                    }\n                    peaks = reflectedPeaks;\n                }\n\n                // if drawWave was called within ws.empty we don't pass a start and\n                // end and simply want a flat line\n                if (start !== undefined) {\n                    this.drawLine(peaks, absmax, halfH, offsetY, start, end, channelIndex);\n                }\n\n                // always draw a median line\n                this.fillRect(\n                    0,\n                    halfH + offsetY - this.halfPixel,\n                    this.width,\n                    this.halfPixel,\n                    this.barRadius,\n                    channelIndex\n                );\n            }\n        );\n    }\n\n    /**\n     * Tell the canvas entries to render their portion of the waveform\n     *\n     * @param {number[]} peaks Peaks data\n     * @param {number} absmax Maximum peak value (absolute)\n     * @param {number} halfH Half the height of the waveform\n     * @param {number} offsetY Offset to the top\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that\n     * should be rendered\n     * @param {channelIndex} channelIndex The channel index of the line drawn\n     */\n    drawLine(peaks, absmax, halfH, offsetY, start, end, channelIndex) {\n        const { waveColor, progressColor } = this.params.splitChannelsOptions.channelColors[channelIndex] || {};\n        this.canvases.forEach((entry, i) => {\n            this.setFillStyles(entry, waveColor, progressColor);\n            this.applyCanvasTransforms(entry, this.params.vertical);\n            entry.drawLines(peaks, absmax, halfH, offsetY, start, end);\n        });\n    }\n\n    /**\n     * Draw a rectangle on the multi-canvas\n     *\n     * @param {number} x X-position of the rectangle\n     * @param {number} y Y-position of the rectangle\n     * @param {number} width Width of the rectangle\n     * @param {number} height Height of the rectangle\n     * @param {number} radius Radius of the rectangle\n     * @param {channelIndex} channelIndex The channel index of the bar drawn\n     */\n    fillRect(x, y, width, height, radius, channelIndex) {\n        const startCanvas = Math.floor(x / this.maxCanvasWidth);\n        const endCanvas = Math.min(\n            Math.ceil((x + width) / this.maxCanvasWidth) + 1,\n            this.canvases.length\n        );\n        let i = startCanvas;\n        for (i; i < endCanvas; i++) {\n            const entry = this.canvases[i];\n            const leftOffset = i * this.maxCanvasWidth;\n\n            const intersection = {\n                x1: Math.max(x, i * this.maxCanvasWidth),\n                y1: y,\n                x2: Math.min(\n                    x + width,\n                    i * this.maxCanvasWidth + entry.wave.width\n                ),\n                y2: y + height\n            };\n\n            if (intersection.x1 < intersection.x2) {\n                const { waveColor, progressColor } = this.params.splitChannelsOptions.channelColors[channelIndex] || {};\n                this.setFillStyles(entry, waveColor, progressColor);\n                this.applyCanvasTransforms(entry, this.params.vertical);\n\n                entry.fillRects(\n                    intersection.x1 - leftOffset,\n                    intersection.y1,\n                    intersection.x2 - intersection.x1,\n                    intersection.y2 - intersection.y1,\n                    radius\n                );\n            }\n        }\n    }\n\n    /**\n     * Returns whether to hide the channel from being drawn based on params.\n     *\n     * @param {number} channelIndex The index of the current channel.\n     * @returns {bool} True to hide the channel, false to draw.\n     */\n    hideChannel(channelIndex) {\n        return this.params.splitChannels && this.params.splitChannelsOptions.filterChannels.includes(channelIndex);\n    }\n\n    /**\n     * Performs preparation tasks and calculations which are shared by `drawBars`\n     * and `drawWave`\n     *\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays for\n     * split channel rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0\n     * @param {number?} start The x-offset of the beginning of the area that\n     * should be rendered. If this isn't set only a flat line is rendered\n     * @param {number?} end The x-offset of the end of the area that should be\n     * rendered\n     * @param {function} fn The render function to call, e.g. `drawWave`\n     * @param {number} drawIndex The index of the current channel after filtering.\n     * @param {number?} normalizedMax Maximum modulation value across channels for use with relativeNormalization. Ignored when undefined\n     * @returns {void}\n     */\n    prepareDraw(peaks, channelIndex, start, end, fn, drawIndex, normalizedMax) {\n        return util.frame(() => {\n            // Split channels and call this function with the channelIndex set\n            if (peaks[0] instanceof Array) {\n                const channels = peaks;\n\n                if (this.params.splitChannels) {\n                    const filteredChannels = channels.filter((c, i) => !this.hideChannel(i));\n                    if (!this.params.splitChannelsOptions.overlay) {\n                        this.setHeight(\n                            Math.max(filteredChannels.length, 1) *\n                                this.params.height *\n                                this.params.pixelRatio\n                        );\n                    }\n\n                    let overallAbsMax;\n                    if (this.params.splitChannelsOptions && this.params.splitChannelsOptions.relativeNormalization) {\n                        // calculate maximum peak across channels to use for normalization\n                        overallAbsMax = util.max(channels.map((channelPeaks => util.absMax(channelPeaks))));\n                    }\n\n\n                    return channels.forEach((channelPeaks, i) =>\n                        this.prepareDraw(channelPeaks, i, start, end, fn, filteredChannels.indexOf(channelPeaks), overallAbsMax)\n                    );\n                }\n                peaks = channels[0];\n            }\n\n            // Return and do not draw channel peaks if hidden.\n            if (this.hideChannel(channelIndex)) {\n                return;\n            }\n\n            // calculate maximum modulation value, either from the barHeight\n            // parameter or if normalize=true from the largest value in the peak\n            // set\n            let absmax = 1 / this.params.barHeight;\n            if (this.params.normalize) {\n                absmax = normalizedMax === undefined ? util.absMax(peaks) : normalizedMax;\n            }\n\n            // Bar wave draws the bottom only as a reflection of the top,\n            // so we don't need negative values\n            const hasMinVals = [].some.call(peaks, val => val < 0);\n            const height = this.params.height * this.params.pixelRatio;\n            const halfH = height / 2;\n\n            let offsetY = height * drawIndex || 0;\n\n            // Override offsetY if overlay is true\n            if (this.params.splitChannelsOptions && this.params.splitChannelsOptions.overlay) {\n                offsetY = 0;\n            }\n\n            return fn({\n                absmax: absmax,\n                hasMinVals: hasMinVals,\n                height: height,\n                offsetY: offsetY,\n                halfH: halfH,\n                peaks: peaks,\n                channelIndex: channelIndex\n            });\n        })();\n    }\n\n    /**\n     * Set the fill styles for a certain entry (wave and progress)\n     *\n     * @param {CanvasEntry} entry Target entry\n     * @param {string} waveColor Wave color to draw this entry\n     * @param {string} progressColor Progress color to draw this entry\n     */\n    setFillStyles(entry, waveColor = this.params.waveColor, progressColor = this.params.progressColor) {\n        entry.setFillStyles(waveColor, progressColor);\n    }\n\n    /**\n     * Set the canvas transforms for a certain entry (wave and progress)\n     *\n     * @param {CanvasEntry} entry Target entry\n     * @param {boolean} vertical Whether to render the waveform vertically\n     */\n    applyCanvasTransforms(entry, vertical = false) {\n        entry.applyCanvasTransforms(vertical);\n    }\n\n    /**\n     * Return image data of the multi-canvas\n     *\n     * When using a `type` of `'blob'`, this will return a `Promise`.\n     *\n     * @param {string} format='image/png' An optional value of a format type.\n     * @param {number} quality=0.92 An optional value between 0 and 1.\n     * @param {string} type='dataURL' Either 'dataURL' or 'blob'.\n     * @return {string|string[]|Promise} When using the default `'dataURL'`\n     * `type` this returns a single data URL or an array of data URLs,\n     * one for each canvas. When using the `'blob'` `type` this returns a\n     * `Promise` that resolves with an array of `Blob` instances, one for each\n     * canvas.\n     */\n    getImage(format, quality, type) {\n        if (type === 'blob') {\n            return Promise.all(\n                this.canvases.map(entry => {\n                    return entry.getImage(format, quality, type);\n                })\n            );\n        } else if (type === 'dataURL') {\n            let images = this.canvases.map(entry =>\n                entry.getImage(format, quality, type)\n            );\n            return images.length > 1 ? images : images[0];\n        }\n    }\n\n    /**\n     * Render the new progress\n     *\n     * @param {number} position X-offset of progress position in pixels\n     */\n    updateProgress(position) {\n        this.style(this.progressWave, { width: position + 'px' });\n    }\n}\n", "import MediaElement from './mediaelement';\n\n/**\n * MediaElementWebAudio backend: load audio via an HTML5 audio tag, but playback with the WebAudio API.\n * The advantage here is that the html5 <audio> tag can perform range requests on the server and not\n * buffer the entire file in one request, and you still get the filtering and scripting functionality\n * of the webaudio API.\n * Note that in order to use range requests and prevent buffering, you must provide peak data.\n *\n * @since 3.2.0\n */\nexport default class MediaElementWebAudio extends MediaElement {\n    /**\n     * Construct the backend\n     *\n     * @param {WavesurferParams} params Wavesurfer parameters\n     */\n    constructor(params) {\n        super(params);\n        /** @private */\n        this.params = params;\n        /** @private */\n        this.sourceMediaElement = null;\n    }\n\n    /**\n     * Initialise the backend, called in `wavesurfer.createBackend()`\n     */\n    init() {\n        this.setPlaybackRate(this.params.audioRate);\n        this.createTimer();\n        this.createVolumeNode();\n        this.createScriptNode();\n        this.createAnalyserNode();\n    }\n    /**\n     * Private method called by both `load` (from url)\n     * and `loadElt` (existing media element) methods.\n     *\n     * @param {HTMLMediaElement} media HTML5 Audio or Video element\n     * @param {number[]|Number.<Array[]>} peaks Array of peak data\n     * @param {string} preload HTML 5 preload attribute value\n     * @private\n     */\n    _load(media, peaks, preload) {\n        super._load(media, peaks, preload);\n        this.createMediaElementSource(media);\n    }\n\n    /**\n     * Create MediaElementSource node\n     *\n     * @since 3.2.0\n     * @param {HTMLMediaElement} mediaElement HTML5 Audio to load\n     */\n    createMediaElementSource(mediaElement) {\n        this.sourceMediaElement = this.ac.createMediaElementSource(\n            mediaElement\n        );\n        this.sourceMediaElement.connect(this.analyser);\n    }\n\n    play(start, end) {\n        this.resumeAudioContext();\n        return super.play(start, end);\n    }\n\n    /**\n     * This is called when wavesurfer is destroyed\n     *\n     */\n    destroy() {\n        super.destroy();\n\n        this.destroyWebAudio();\n    }\n}\n", "import WebAudio from './webaudio';\nimport * as util from './util';\n\n/**\n * MediaElement backend\n */\nexport default class MediaElement extends WebAudio {\n    /**\n     * Construct the backend\n     *\n     * @param {WavesurferParams} params Wavesurfer parameters\n     */\n    constructor(params) {\n        super(params);\n        /** @private */\n        this.params = params;\n\n        /**\n         * Initially a dummy media element to catch errors. Once `_load` is\n         * called, this will contain the actual `HTMLMediaElement`.\n         * @private\n         */\n        this.media = {\n            currentTime: 0,\n            duration: 0,\n            paused: true,\n            playbackRate: 1,\n            play() {},\n            pause() {},\n            volume: 0\n        };\n\n        /** @private */\n        this.mediaType = params.mediaType.toLowerCase();\n        /** @private */\n        this.elementPosition = params.elementPosition;\n        /** @private */\n        this.peaks = null;\n        /** @private */\n        this.playbackRate = 1;\n        /** @private */\n        this.volume = 1;\n        /** @private */\n        this.isMuted = false;\n        /** @private */\n        this.buffer = null;\n        /** @private */\n        this.onPlayEnd = null;\n        /** @private */\n        this.mediaListeners = {};\n    }\n\n    /**\n     * Initialise the backend, called in `wavesurfer.createBackend()`\n     */\n    init() {\n        this.setPlaybackRate(this.params.audioRate);\n        this.createTimer();\n    }\n\n    /**\n     * Attach event listeners to media element.\n     */\n    _setupMediaListeners() {\n        this.mediaListeners.error = () => {\n            this.fireEvent('error', 'Error loading media element');\n        };\n        this.mediaListeners.waiting = () => {\n            this.fireEvent('waiting');\n        };\n        this.mediaListeners.canplay = () => {\n            this.fireEvent('canplay');\n        };\n        this.mediaListeners.ended = () => {\n            this.fireEvent('finish');\n        };\n        // listen to and relay play, pause and seeked events to enable\n        // playback control from the external media element\n        this.mediaListeners.play = () => {\n            this.fireEvent('play');\n        };\n        this.mediaListeners.pause = () => {\n            this.fireEvent('pause');\n        };\n        this.mediaListeners.seeked = event => {\n            this.fireEvent('seek');\n        };\n        this.mediaListeners.volumechange = event => {\n            this.isMuted = this.media.muted;\n            if (this.isMuted) {\n                this.volume = 0;\n            } else {\n                this.volume = this.media.volume;\n            }\n            this.fireEvent('volume');\n        };\n\n        // reset event listeners\n        Object.keys(this.mediaListeners).forEach(id => {\n            this.media.removeEventListener(id, this.mediaListeners[id]);\n            this.media.addEventListener(id, this.mediaListeners[id]);\n        });\n    }\n\n    /**\n     * Create a timer to provide a more precise `audioprocess` event.\n     */\n    createTimer() {\n        const onAudioProcess = () => {\n            if (this.isPaused()) {\n                return;\n            }\n            this.fireEvent('audioprocess', this.getCurrentTime());\n\n            // Call again in the next frame\n            util.frame(onAudioProcess)();\n        };\n\n        this.on('play', onAudioProcess);\n\n        // Update the progress one more time to prevent it from being stuck in\n        // case of lower framerates\n        this.on('pause', () => {\n            this.fireEvent('audioprocess', this.getCurrentTime());\n        });\n    }\n\n    /**\n     * Create media element with url as its source,\n     * and append to container element.\n     *\n     * @param {string} url Path to media file\n     * @param {HTMLElement} container HTML element\n     * @param {number[]|Number.<Array[]>} peaks Array of peak data\n     * @param {string} preload HTML 5 preload attribute value\n     * @throws Will throw an error if the `url` argument is not a valid media\n     * element.\n     */\n    load(url, container, peaks, preload) {\n        const media = document.createElement(this.mediaType);\n        media.controls = this.params.mediaControls;\n        media.autoplay = this.params.autoplay || false;\n        media.preload = preload == null ? 'auto' : preload;\n        media.src = url;\n        media.style.width = '100%';\n\n        const prevMedia = container.querySelector(this.mediaType);\n        if (prevMedia) {\n            container.removeChild(prevMedia);\n        }\n        container.appendChild(media);\n\n        this._load(media, peaks, preload);\n    }\n\n    /**\n     * Load existing media element.\n     *\n     * @param {HTMLMediaElement} elt HTML5 Audio or Video element\n     * @param {number[]|Number.<Array[]>} peaks Array of peak data\n     */\n    loadElt(elt, peaks) {\n        elt.controls = this.params.mediaControls;\n        elt.autoplay = this.params.autoplay || false;\n\n        this._load(elt, peaks, elt.preload);\n    }\n\n    /**\n     * Method called by both `load` (from url)\n     * and `loadElt` (existing media element) methods.\n     *\n     * @param {HTMLMediaElement} media HTML5 Audio or Video element\n     * @param {number[]|Number.<Array[]>} peaks Array of peak data\n     * @param {string} preload HTML 5 preload attribute value\n     * @throws Will throw an error if the `media` argument is not a valid media\n     * element.\n     * @private\n     */\n    _load(media, peaks, preload) {\n        // verify media element is valid\n        if (\n            !(media instanceof HTMLMediaElement) ||\n            typeof media.addEventListener === 'undefined'\n        ) {\n            throw new Error('media parameter is not a valid media element');\n        }\n\n        // load must be called manually on iOS, otherwise peaks won't draw\n        // until a user interaction triggers load --> 'ready' event\n        //\n        // note that we avoid calling media.load here when given peaks and preload == 'none'\n        // as this almost always triggers some browser fetch of the media.\n        if (typeof media.load == 'function' && !(peaks && preload == 'none')) {\n            // Resets the media element and restarts the media resource. Any\n            // pending events are discarded. How much media data is fetched is\n            // still affected by the preload attribute.\n            media.load();\n        }\n\n        this.media = media;\n        this._setupMediaListeners();\n        this.peaks = peaks;\n        this.onPlayEnd = null;\n        this.buffer = null;\n        this.isMuted = media.muted;\n        this.setPlaybackRate(this.playbackRate);\n        this.setVolume(this.volume);\n    }\n\n    /**\n     * Used by `wavesurfer.isPlaying()` and `wavesurfer.playPause()`\n     *\n     * @return {boolean} Media paused or not\n     */\n    isPaused() {\n        return !this.media || this.media.paused;\n    }\n\n    /**\n     * Used by `wavesurfer.getDuration()`\n     *\n     * @return {number} Duration\n     */\n    getDuration() {\n        if (this.explicitDuration) {\n            return this.explicitDuration;\n        }\n        let duration = (this.buffer || this.media).duration;\n        if (duration >= Infinity) {\n            // streaming audio\n            duration = this.media.seekable.end(0);\n        }\n        return duration;\n    }\n\n    /**\n     * Returns the current time in seconds relative to the audio-clip's\n     * duration.\n     *\n     * @return {number} Current time\n     */\n    getCurrentTime() {\n        return this.media && this.media.currentTime;\n    }\n\n    /**\n     * Get the position from 0 to 1\n     *\n     * @return {number} Current position\n     */\n    getPlayedPercents() {\n        return this.getCurrentTime() / this.getDuration() || 0;\n    }\n\n    /**\n     * Get the audio source playback rate.\n     *\n     * @return {number} Playback rate\n     */\n    getPlaybackRate() {\n        return this.playbackRate || this.media.playbackRate;\n    }\n\n    /**\n     * Set the audio source playback rate.\n     *\n     * @param {number} value Playback rate\n     */\n    setPlaybackRate(value) {\n        this.playbackRate = value || 1;\n        this.media.playbackRate = this.playbackRate;\n    }\n\n    /**\n     * Used by `wavesurfer.seekTo()`\n     *\n     * @param {number} start Position to start at in seconds\n     */\n    seekTo(start) {\n        if (start != null && !isNaN(start)) {\n            this.media.currentTime = start;\n        }\n        this.clearPlayEnd();\n    }\n\n    /**\n     * Plays the loaded audio region.\n     *\n     * @param {number} start Start offset in seconds, relative to the beginning\n     * of a clip.\n     * @param {number} end When to stop, relative to the beginning of a clip.\n     * @emits MediaElement#play\n     * @return {Promise} Result\n     */\n    play(start, end) {\n        this.seekTo(start);\n        const promise = this.media.play();\n        end && this.setPlayEnd(end);\n\n        return promise;\n    }\n\n    /**\n     * Pauses the loaded audio.\n     *\n     * @emits MediaElement#pause\n     * @return {Promise} Result\n     */\n    pause() {\n        let promise;\n\n        if (this.media) {\n            promise = this.media.pause();\n        }\n        this.clearPlayEnd();\n\n        return promise;\n    }\n\n    /**\n     * Set the play end\n     *\n     * @param {number} end Where to end\n     */\n    setPlayEnd(end) {\n        this.clearPlayEnd();\n\n        this._onPlayEnd = time => {\n            if (time >= end) {\n                this.pause();\n                this.seekTo(end);\n            }\n        };\n        this.on('audioprocess', this._onPlayEnd);\n    }\n\n    /** @private */\n    clearPlayEnd() {\n        if (this._onPlayEnd) {\n            this.un('audioprocess', this._onPlayEnd);\n            this._onPlayEnd = null;\n        }\n    }\n\n    /**\n     * Compute the max and min value of the waveform when broken into\n     * <length> subranges.\n     *\n     * @param {number} length How many subranges to break the waveform into.\n     * @param {number} first First sample in the required range.\n     * @param {number} last Last sample in the required range.\n     * @return {number[]|Number.<Array[]>} Array of 2*<length> peaks or array of\n     * arrays of peaks consisting of (max, min) values for each subrange.\n     */\n    getPeaks(length, first, last) {\n        if (this.buffer) {\n            return super.getPeaks(length, first, last);\n        }\n        return this.peaks || [];\n    }\n\n    /**\n     * Set the sink id for the media player\n     *\n     * @param {string} deviceId String value representing audio device id.\n     * @returns {Promise} A Promise that resolves to `undefined` when there\n     * are no errors.\n     */\n    setSinkId(deviceId) {\n        if (deviceId) {\n            if (!this.media.setSinkId) {\n                return Promise.reject(\n                    new Error('setSinkId is not supported in your browser')\n                );\n            }\n            return this.media.setSinkId(deviceId);\n        }\n\n        return Promise.reject(new Error('Invalid deviceId: ' + deviceId));\n    }\n\n    /**\n     * Get the current volume\n     *\n     * @return {number} value A floating point value between 0 and 1.\n     */\n    getVolume() {\n        return this.volume;\n    }\n\n    /**\n     * Set the audio volume\n     *\n     * @param {number} value A floating point value between 0 and 1.\n     */\n    setVolume(value) {\n        this.volume = value;\n        // no need to change when it's already at that volume\n        if (this.media.volume !== this.volume) {\n            this.media.volume = this.volume;\n        }\n    }\n\n    /**\n     * Enable or disable muted audio\n     *\n     * @since 4.0.0\n     * @param {boolean} muted Specify `true` to mute audio.\n     */\n    setMute(muted) {\n        // This causes a volume change to be emitted too through the\n        // volumechange event listener.\n        this.isMuted = this.media.muted = muted;\n    }\n\n    /**\n     * This is called when wavesurfer is destroyed\n     *\n     */\n    destroy() {\n        this.pause();\n        this.unAll();\n        this.destroyed = true;\n\n        // cleanup media event listeners\n        Object.keys(this.mediaListeners).forEach(id => {\n            if (this.media) {\n                this.media.removeEventListener(id, this.mediaListeners[id]);\n            }\n        });\n\n        if (\n            this.params.removeMediaElementOnDestroy &&\n            this.media &&\n            this.media.parentNode\n        ) {\n            this.media.parentNode.removeChild(this.media);\n        }\n\n        this.media = null;\n    }\n}\n", "/**\n * Caches the decoded peaks data to improve rendering speed for large audio\n *\n * Is used if the option parameter `partialRender` is set to `true`\n */\nexport default class PeakCache {\n    /**\n     * Instantiate cache\n     */\n    constructor() {\n        this.clearPeakCache();\n    }\n\n    /**\n     * Empty the cache\n     */\n    clearPeakCache() {\n        /**\n         * Flat array with entries that are always in pairs to mark the\n         * beginning and end of each subrange.  This is a convenience so we can\n         * iterate over the pairs for easy set difference operations.\n         * @private\n         */\n        this.peakCacheRanges = [];\n        /**\n         * Length of the entire cachable region, used for resetting the cache\n         * when this changes (zoom events, for instance).\n         * @private\n         */\n        this.peakCacheLength = -1;\n    }\n\n    /**\n     * Add a range of peaks to the cache\n     *\n     * @param {number} length The length of the range\n     * @param {number} start The x offset of the start of the range\n     * @param {number} end The x offset of the end of the range\n     * @return {Number.<Array[]>} Array with arrays of numbers\n     */\n    addRangeToPeakCache(length, start, end) {\n        if (length != this.peakCacheLength) {\n            this.clearPeakCache();\n            this.peakCacheLength = length;\n        }\n\n        // Return ranges that weren't in the cache before the call.\n        let uncachedRanges = [];\n        let i = 0;\n        // Skip ranges before the current start.\n        while (\n            i < this.peakCacheRanges.length &&\n            this.peakCacheRanges[i] < start\n        ) {\n            i++;\n        }\n        // If |i| is even, |start| falls after an existing range.  Otherwise,\n        // |start| falls between an existing range, and the uncached region\n        // starts when we encounter the next node in |peakCacheRanges| or\n        // |end|, whichever comes first.\n        if (i % 2 == 0) {\n            uncachedRanges.push(start);\n        }\n        while (\n            i < this.peakCacheRanges.length &&\n            this.peakCacheRanges[i] <= end\n        ) {\n            uncachedRanges.push(this.peakCacheRanges[i]);\n            i++;\n        }\n        // If |i| is even, |end| is after all existing ranges.\n        if (i % 2 == 0) {\n            uncachedRanges.push(end);\n        }\n\n        // Filter out the 0-length ranges.\n        uncachedRanges = uncachedRanges.filter((item, pos, arr) => {\n            if (pos == 0) {\n                return item != arr[pos + 1];\n            } else if (pos == arr.length - 1) {\n                return item != arr[pos - 1];\n            }\n            return item != arr[pos - 1] && item != arr[pos + 1];\n        });\n\n        // Merge the two ranges together, uncachedRanges will either contain\n        // wholly new points, or duplicates of points in peakCacheRanges.  If\n        // duplicates are detected, remove both and extend the range.\n        this.peakCacheRanges = this.peakCacheRanges.concat(uncachedRanges);\n        this.peakCacheRanges = this.peakCacheRanges\n            .sort((a, b) => a - b)\n            .filter((item, pos, arr) => {\n                if (pos == 0) {\n                    return item != arr[pos + 1];\n                } else if (pos == arr.length - 1) {\n                    return item != arr[pos - 1];\n                }\n                return item != arr[pos - 1] && item != arr[pos + 1];\n            });\n\n        // Push the uncached ranges into an array of arrays for ease of\n        // iteration in the functions that call this.\n        const uncachedRangePairs = [];\n        for (i = 0; i < uncachedRanges.length; i += 2) {\n            uncachedRangePairs.push([uncachedRanges[i], uncachedRanges[i + 1]]);\n        }\n\n        return uncachedRangePairs;\n    }\n\n    /**\n     * For testing\n     *\n     * @return {Number.<Array[]>} Array with arrays of numbers\n     */\n    getCacheRanges() {\n        const peakCacheRangePairs = [];\n        let i;\n        for (i = 0; i < this.peakCacheRanges.length; i += 2) {\n            peakCacheRangePairs.push([\n                this.peakCacheRanges[i],\n                this.peakCacheRanges[i + 1]\n            ]);\n        }\n        return peakCacheRangePairs;\n    }\n}\n", "import utilMax from './max';\r\nimport utilmin from './min';\r\n\r\n/**\r\n * Get the largest absolute value in an array\r\n *\r\n * @param   {Array} values Array of numbers\r\n * @returns {Number} Largest number found\r\n * @example console.log(max([-3, 2, 1]), max([-3, 2, 4])); // logs 3 4\r\n * @since 4.3.0\r\n */\r\nexport default function absMax(values) {\r\n    const max = utilMax(values);\r\n    const min = utilmin(values);\r\n    return -min > max ? -min : max;\r\n}\r\n", "/**\n * Returns a number limited to the given range.\n *\n * @param {number} val The number to be limited to a range\n * @param {number} min The lower boundary of the limit range\n * @param {number} max The upper boundary of the limit range\n * @returns {number} A number in the range [min, max]\n */\nexport default function clamp(val, min, max) {\n    return Math.min(Math.max(min, val), max);\n}\n", "/**\n * @since 3.0.0\n */\n\nimport Observer from './observer';\n\nclass ProgressHandler {\n    /**\n     * Instantiate ProgressHandler\n     *\n     * @param {Observer} instance The `fetchFile` observer instance.\n     * @param {Number} contentLength Content length.\n     * @param {Response} response Response object.\n     */\n    constructor(instance, contentLength, response) {\n        this.instance = instance;\n        this.instance._reader = response.body.getReader();\n\n        this.total = parseInt(contentLength, 10);\n        this.loaded = 0;\n    }\n\n    /**\n     * A method that is called once, immediately after the `ReadableStream``\n     * is constructed.\n     *\n     * @param {ReadableStreamDefaultController} controller Controller instance\n     *     used to control the stream.\n     */\n    start(controller) {\n        const read = () => {\n            // instance._reader.read() returns a promise that resolves\n            // when a value has been received\n            this.instance._reader\n                .read()\n                .then(({ done, value }) => {\n                    // result objects contain two properties:\n                    // done  - true if the stream has already given you all its data.\n                    // value - some data. Always undefined when done is true.\n                    if (done) {\n                        // ensure onProgress called when content-length=0\n                        if (this.total === 0) {\n                            this.instance.onProgress.call(this.instance, {\n                                loaded: this.loaded,\n                                total: this.total,\n                                lengthComputable: false\n                            });\n                        }\n                        // no more data needs to be consumed, close the stream\n                        controller.close();\n                        return;\n                    }\n\n                    this.loaded += value.byteLength;\n                    this.instance.onProgress.call(this.instance, {\n                        loaded: this.loaded,\n                        total: this.total,\n                        lengthComputable: !(this.total === 0)\n                    });\n                    // enqueue the next data chunk into our target stream\n                    controller.enqueue(value);\n                    read();\n                })\n                .catch(error => {\n                    controller.error(error);\n                });\n        };\n\n        read();\n    }\n}\n\n/**\n * Load a file using `fetch`.\n *\n * @param {object} options Request options to use. See example below.\n * @returns {Observer} Observer instance\n * @example\n * // default options\n * let options = {\n *     url: undefined,\n *     method: 'GET',\n *     mode: 'cors',\n *     credentials: 'same-origin',\n *     cache: 'default',\n *     responseType: 'json',\n *     requestHeaders: [],\n *     redirect: 'follow',\n *     referrer: 'client'\n * };\n *\n * // override some options\n * options.url = '../media/demo.wav';\n\n * // available types: 'arraybuffer', 'blob', 'json' or 'text'\n * options.responseType = 'arraybuffer';\n *\n * // make fetch call\n * let request = util.fetchFile(options);\n *\n * // listen for events\n * request.on('progress', e => {\n *     console.log('progress', e);\n * });\n *\n * request.on('success', data => {\n *     console.log('success!', data);\n * });\n *\n * request.on('error', e => {\n *     console.warn('fetchFile error: ', e);\n * });\n */\nexport default function fetchFile(options) {\n    if (!options) {\n        throw new Error('fetch options missing');\n    } else if (!options.url) {\n        throw new Error('fetch url missing');\n    }\n    const instance = new Observer();\n    const fetchHeaders = new Headers();\n    const fetchRequest = new Request(options.url);\n\n    // add ability to abort\n    instance.controller = new AbortController();\n\n    // check if headers have to be added\n    if (options && options.requestHeaders) {\n        // add custom request headers\n        options.requestHeaders.forEach(header => {\n            fetchHeaders.append(header.key, header.value);\n        });\n    }\n\n    // parse fetch options\n    const responseType = options.responseType || 'json';\n    const fetchOptions = {\n        method: options.method || 'GET',\n        headers: fetchHeaders,\n        mode: options.mode || 'cors',\n        credentials: options.credentials || 'same-origin',\n        cache: options.cache || 'default',\n        redirect: options.redirect || 'follow',\n        referrer: options.referrer || 'client',\n        signal: instance.controller.signal\n    };\n\n    fetch(fetchRequest, fetchOptions)\n        .then(response => {\n            // store response reference\n            instance.response = response;\n\n            let progressAvailable = true;\n            if (!response.body) {\n                // ReadableStream is not yet supported in this browser\n                // see https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream\n                progressAvailable = false;\n            }\n\n            // Server must send CORS header \"Access-Control-Expose-Headers: content-length\"\n            const contentLength = response.headers.get('content-length');\n            if (contentLength === null) {\n                // Content-Length server response header missing.\n                // Don't evaluate download progress if we can't compare against a total size\n                // see https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Access-Control-Expose-Headers\n                progressAvailable = false;\n            }\n\n            if (!progressAvailable) {\n                // not able to check download progress so skip it\n                return response;\n            }\n\n            // fire progress event when during load\n            instance.onProgress = e => {\n                instance.fireEvent('progress', e);\n            };\n\n            return new Response(\n                new ReadableStream(\n                    new ProgressHandler(instance, contentLength, response)\n                ),\n                fetchOptions\n            );\n        })\n        .then(response => {\n            let errMsg;\n            if (response.ok) {\n                switch (responseType) {\n                    case 'arraybuffer':\n                        return response.arrayBuffer();\n\n                    case 'json':\n                        return response.json();\n\n                    case 'blob':\n                        return response.blob();\n\n                    case 'text':\n                        return response.text();\n\n                    default:\n                        errMsg = 'Unknown responseType: ' + responseType;\n                        break;\n                }\n            }\n            if (!errMsg) {\n                errMsg = 'HTTP error status: ' + response.status;\n            }\n            throw new Error(errMsg);\n        })\n        .then(response => {\n            instance.fireEvent('success', response);\n        })\n        .catch(error => {\n            instance.fireEvent('error', error);\n        });\n\n    // return the fetch request\n    instance.fetchRequest = fetchRequest;\n    return instance;\n}\n", "import reqAnimationFrame from './request-animation-frame';\n\n/**\n * Create a function which will be called at the next requestAnimationFrame\n * cycle\n *\n * @param {function} func The function to call\n *\n * @return {func} The function wrapped within a requestAnimationFrame\n */\nexport default function frame(func) {\n    return (...args) => reqAnimationFrame(() => func(...args));\n}\n", "/**\n * Get a random prefixed ID\n *\n * @param {String} prefix Prefix to use. Default is `'wavesurfer_'`.\n * @returns {String} Random prefixed ID\n * @example\n * console.log(getId()); // logs 'wavesurfer_b5pors4ru6g'\n *\n * let prefix = 'foo-';\n * console.log(getId(prefix)); // logs 'foo-b5pors4ru6g'\n */\nexport default function getId(prefix) {\n    if (prefix === undefined) {\n        prefix = 'wavesurfer_';\n    }\n    return (\n        prefix +\n        Math.random()\n            .toString(32)\n            .substring(2)\n    );\n}\n", "export { default as getId } from './get-id';\nexport { default as max } from './max';\nexport { default as min } from './min';\nexport { default as absMax } from './absMax';\nexport { default as Observer } from './observer';\nexport { default as style } from './style';\nexport { default as requestAnimationFrame } from './request-animation-frame';\nexport { default as frame } from './frame';\nexport { default as debounce } from 'debounce';\nexport { default as preventClick } from './prevent-click';\nexport { default as fetchFile } from './fetch';\nexport { default as clamp } from './clamp';\nexport { default as withOrientation } from './orientation';\nexport { default as ignoreSilenceMode } from './silence-mode';\n", "/**\n * Get the largest value\n *\n * @param   {Array} values Array of numbers\n * @returns {Number} Largest number found\n * @example console.log(max([1, 2, 3])); // logs 3\n */\nexport default function max(values) {\n    let largest = -Infinity;\n    Object.keys(values).forEach(i => {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    });\n    return largest;\n}\n", "/**\n * Get the smallest value\n *\n * @param   {Array} values Array of numbers\n * @returns {Number} Smallest number found\n * @example console.log(min([1, 2, 3])); // logs 1\n */\nexport default function min(values) {\n    let smallest = Number(Infinity);\n    Object.keys(values).forEach(i => {\n        if (values[i] < smallest) {\n            smallest = values[i];\n        }\n    });\n    return smallest;\n}\n", "/**\n * @typedef {Object} ListenerDescriptor\n * @property {string} name The name of the event\n * @property {function} callback The callback\n * @property {function} un The function to call to remove the listener\n */\n\n/**\n * Observer class\n */\nexport default class Observer {\n    /**\n     * Instantiate Observer\n     */\n    constructor() {\n        /**\n         * @private\n         * @todo Initialise the handlers here already and remove the conditional\n         * assignment in `on()`\n         */\n        this._disabledEventEmissions = [];\n        this.handlers = null;\n    }\n    /**\n     * Attach a handler function for an event.\n     *\n     * @param {string} event Name of the event to listen to\n     * @param {function} fn The callback to trigger when the event is fired\n     * @return {ListenerDescriptor} The event descriptor\n     */\n    on(event, fn) {\n        if (!this.handlers) {\n            this.handlers = {};\n        }\n\n        let handlers = this.handlers[event];\n        if (!handlers) {\n            handlers = this.handlers[event] = [];\n        }\n        handlers.push(fn);\n\n        // Return an event descriptor\n        return {\n            name: event,\n            callback: fn,\n            un: (e, fn) => this.un(e, fn)\n        };\n    }\n\n    /**\n     * Remove an event handler.\n     *\n     * @param {string} event Name of the event the listener that should be\n     * removed listens to\n     * @param {function} fn The callback that should be removed\n     */\n    un(event, fn) {\n        if (!this.handlers) {\n            return;\n        }\n\n        const handlers = this.handlers[event];\n        let i;\n        if (handlers) {\n            if (fn) {\n                for (i = handlers.length - 1; i >= 0; i--) {\n                    if (handlers[i] == fn) {\n                        handlers.splice(i, 1);\n                    }\n                }\n            } else {\n                handlers.length = 0;\n            }\n        }\n    }\n\n    /**\n     * Remove all event handlers.\n     */\n    unAll() {\n        this.handlers = null;\n    }\n\n    /**\n     * Attach a handler to an event. The handler is executed at most once per\n     * event type.\n     *\n     * @param {string} event The event to listen to\n     * @param {function} handler The callback that is only to be called once\n     * @return {ListenerDescriptor} The event descriptor\n     */\n    once(event, handler) {\n        const fn = (...args) => {\n            /*  eslint-disable no-invalid-this */\n            handler.apply(this, args);\n            /*  eslint-enable no-invalid-this */\n            setTimeout(() => {\n                this.un(event, fn);\n            }, 0);\n        };\n        return this.on(event, fn);\n    }\n\n    /**\n     * Disable firing a list of events by name. When specified, event handlers for any event type\n     * passed in here will not be called.\n     *\n     * @since 4.0.0\n     * @param {string[]} eventNames an array of event names to disable emissions for\n     * @example\n     * // disable seek and interaction events\n     * wavesurfer.setDisabledEventEmissions(['seek', 'interaction']);\n     */\n    setDisabledEventEmissions(eventNames) {\n        this._disabledEventEmissions = eventNames;\n    }\n\n    /**\n     * plugins borrow part of this class without calling the constructor,\n     * so we have to be careful about _disabledEventEmissions\n     */\n\n    _isDisabledEventEmission(event) {\n        return this._disabledEventEmissions && this._disabledEventEmissions.includes(event);\n    }\n\n    /**\n     * Manually fire an event\n     *\n     * @param {string} event The event to fire manually\n     * @param {...any} args The arguments with which to call the listeners\n     */\n    fireEvent(event, ...args) {\n        if (!this.handlers || this._isDisabledEventEmission(event)) {\n            return;\n        }\n\n        const handlers = this.handlers[event];\n        handlers &&\n            handlers.forEach(fn => {\n                fn(...args);\n            });\n    }\n}\n", "const verticalPropMap = {\n    width: 'height',\n    height: 'width',\n\n    overflowX: 'overflowY',\n    overflowY: 'overflowX',\n\n    clientWidth: 'clientHeight',\n    clientHeight: 'clientWidth',\n\n    clientX: 'clientY',\n    clientY: 'clientX',\n\n    scrollWidth: 'scrollHeight',\n    scrollLeft: 'scrollTop',\n\n    offsetLeft: 'offsetTop',\n    offsetTop: 'offsetLeft',\n    offsetHeight: 'offsetWidth',\n    offsetWidth: 'offsetHeight',\n\n    left: 'top',\n    right: 'bottom',\n    top: 'left',\n    bottom: 'right',\n\n    borderRightStyle: 'borderBottomStyle',\n    borderRightWidth: 'borderBottomWidth',\n    borderRightColor: 'borderBottomColor'\n};\n\n/**\n * Convert a horizontally-oriented property name to a vertical one.\n *\n * @param {string} prop A property name\n * @param {bool} vertical Whether the element is oriented vertically\n * @returns {string} prop, converted appropriately\n */\nfunction mapProp(prop, vertical) {\n    if (Object.prototype.hasOwnProperty.call(verticalPropMap, prop)) {\n        return vertical ? verticalPropMap[prop] : prop;\n    } else {\n        return prop;\n    }\n}\n\nconst isProxy = Symbol(\"isProxy\");\n\n/**\n * Returns an appropriately oriented object based on vertical.\n * If vertical is true, attribute getting and setting will be mapped through\n * verticalPropMap, so that e.g. getting the object's .width will give its\n * .height instead.\n * Certain methods of an oriented object will return oriented objects as well.\n * Oriented objects can't be added to the DOM directly since they are Proxy objects\n * and thus fail typechecks. Use domElement to get the actual element for this.\n *\n * @param {object} target The object to be wrapped and oriented\n * @param {bool} vertical Whether the element is oriented vertically\n * @returns {Proxy} An oriented object with attr translation via verticalAttrMap\n * @since 5.0.0\n */\nexport default function withOrientation(target, vertical) {\n    if (target[isProxy]) {\n        return target;\n    } else {\n        return new Proxy(\n            target, {\n                get: function(obj, prop, receiver) {\n                    if (prop === isProxy) {\n                        return true;\n                    } else if (prop === 'domElement') {\n                        return obj;\n                    } else if (prop === 'style') {\n                        return withOrientation(obj.style, vertical);\n                    } else if (prop === 'canvas') {\n                        return withOrientation(obj.canvas, vertical);\n                    } else if (prop === 'getBoundingClientRect') {\n                        return function(...args) {\n                            return withOrientation(obj.getBoundingClientRect(...args), vertical);\n                        };\n                    } else if (prop === 'getContext') {\n                        return function(...args) {\n                            return withOrientation(obj.getContext(...args), vertical);\n                        };\n                    } else {\n                        let value = obj[mapProp(prop, vertical)];\n                        return typeof value == 'function' ? value.bind(obj) : value;\n                    }\n                },\n                set: function(obj, prop, value) {\n                    obj[mapProp(prop, vertical)] = value;\n                    return true;\n                }\n            }\n        );\n    }\n}\n", "/**\n * Stops propagation of click event and removes event listener\n *\n * @private\n * @param {object} event The click event\n */\nfunction preventClickHandler(event) {\n    event.stopPropagation();\n    document.body.removeEventListener('click', preventClickHandler, true);\n}\n\n/**\n * Starts listening for click event and prevent propagation\n *\n * @param {object} values Values\n */\nexport default function preventClick(values) {\n    document.body.addEventListener('click', preventClickHandler, true);\n}\n", "/* eslint-disable valid-jsdoc */\n/**\n * Returns the `requestAnimationFrame` function for the browser, or a shim with\n * `setTimeout` if the function is not found\n *\n * @return {function} Available `requestAnimationFrame` function for the browser\n */\nexport default (\n    window.requestAnimationFrame ||\n    window.webkitRequestAnimationFrame ||\n    window.mozRequestAnimationFrame ||\n    window.oRequestAnimationFrame ||\n    window.msRequestAnimationFrame ||\n    ((callback, element) => setTimeout(callback, 1000 / 60))\n).bind(window);\n", "/**\n * Ignores device silence mode when using the `WebAudio` backend.\n *\n * Many mobile devices contain a hardware button to mute the ringtone for incoming\n * calls and messages. Unfortunately, on some platforms like iOS, this also mutes\n * wavesurfer's audio when using the `WebAudio` backend. This function creates a\n * temporary `<audio>` element that makes sure the WebAudio backend keeps playing\n * when muting the device ringer.\n *\n * @since 5.2.0\n */\nexport default function ignoreSilenceMode() {\n    // Set webaudio context with 1 second silent audio 44100 bit rate buffer to allow playing audio even if silent switch is on the device\n    const silentAC = new AudioContext();\n    const silentBS = silentAC.createBufferSource();\n    silentBS.buffer = silentAC.createBuffer(1, 1, 44100);\n    silentBS.connect(silentAC.destination);\n    silentBS.start();\n\n    // Set the src to a short bit of url encoded as a silent mp3\n    // NOTE The silence MP3 must be high quality, when web audio sounds are played\n    // in parallel the web audio sound is mixed to match the bitrate of the html sound\n    // 0.01 seconds of silence VBR220-260 Joint Stereo 859B\n    const audioData = \"data:audio/mpeg;base64,//uQxAAAAAAAAAAAAAAAAAAAAAAAWGluZwAAAA8AAAACAAACcQCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA//////////////////////////////////////////////////////////////////8AAABhTEFNRTMuMTAwA8MAAAAAAAAAABQgJAUHQQAB9AAAAnGMHkkIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//sQxAADgnABGiAAQBCqgCRMAAgEAH///////////////7+n/9FTuQsQH//////2NG0jWUGlio5gLQTOtIoeR2WX////X4s9Atb/JRVCbBUpeRUq//////////////////9RUi0f2jn/+xDECgPCjAEQAABN4AAANIAAAAQVTEFNRTMuMTAwVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVQ==\";\n\n    // disable iOS Airplay (setting the attribute in js doesn't work)\n    let tmp = document.createElement(\"div\");\n    tmp.innerHTML = '<audio x-webkit-airplay=\"deny\"></audio>';\n\n    let audioSilentMode = tmp.children.item(0);\n    audioSilentMode.src = audioData;\n    audioSilentMode.preload = \"auto\";\n    audioSilentMode.type = \"audio/mpeg\";\n    audioSilentMode.disableRemotePlayback = true;\n\n    // play\n    audioSilentMode.play();\n\n    // cleanup\n    audioSilentMode.remove();\n    tmp.remove();\n}\n", "/**\n * Apply a map of styles to an element\n *\n * @param {HTMLElement} el The element that the styles will be applied to\n * @param {Object} styles The map of propName: attribute, both are used as-is\n *\n * @return {HTMLElement} el\n */\nexport default function style(el, styles) {\n    Object.keys(styles).forEach(prop => {\n        if (el.style[prop] !== styles[prop]) {\n            el.style[prop] = styles[prop];\n        }\n    });\n    return el;\n}\n", "import * as util from './util';\nimport MultiCanvas from './drawer.multicanvas';\nimport WebAudio from './webaudio';\nimport MediaElement from './mediaelement';\nimport PeakCache from './peakcache';\nimport MediaElementWebAudio from './mediaelement-webaudio';\n\n/*\n * This work is licensed under a BSD-3-Clause License.\n */\n\n/** @external {HTMLElement} https://developer.mozilla.org/en/docs/Web/API/HTMLElement */\n/** @external {OfflineAudioContext} https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext */\n/** @external {File} https://developer.mozilla.org/en-US/docs/Web/API/File */\n/** @external {Blob} https://developer.mozilla.org/en-US/docs/Web/API/Blob */\n/** @external {CanvasRenderingContext2D} https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D */\n/** @external {MediaStreamConstraints} https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamConstraints */\n/** @external {AudioNode} https://developer.mozilla.org/de/docs/Web/API/AudioNode */\n\n/**\n * @typedef {Object} WavesurferParams\n * @property {AudioContext} audioContext=null Use your own previously\n * initialized AudioContext or leave blank.\n * @property {number} audioRate=1 Speed at which to play audio. Lower number is\n * slower.\n * @property {ScriptProcessorNode} audioScriptProcessor=null Use your own previously\n * initialized ScriptProcessorNode or leave blank.\n * @property {boolean} autoCenter=true If a scrollbar is present, center the\n * waveform on current progress\n * @property {number} autoCenterRate=5 If autoCenter is active, rate at which the\n * waveform is centered\n * @property {boolean} autoCenterImmediately=false If autoCenter is active, immediately\n * center waveform on current progress\n * @property {string} backend='WebAudio' `'WebAudio'|'MediaElement'|'MediaElementWebAudio'` In most cases\n * you don't have to set this manually. MediaElement is a fallback for unsupported browsers.\n * MediaElementWebAudio allows to use WebAudio API also with big audio files, loading audio like with\n * MediaElement backend (HTML5 audio tag). You have to use the same methods of MediaElement backend for loading and\n * playback, giving also peaks, so the audio data are not decoded. In this way you can use WebAudio features, like filters,\n * also with audio with big duration. For example:\n * ` wavesurfer.load(url | HTMLMediaElement, peaks, preload, duration);\n *   wavesurfer.play();\n *   wavesurfer.setFilter(customFilter);\n * `\n * @property {string} backgroundColor=null Change background color of the\n * waveform container.\n * @property {number} barHeight=1 The height of the wave bars.\n * @property {number} barRadius=0 The radius of the wave bars. Makes bars rounded\n * @property {number} barGap=null The optional spacing between bars of the wave,\n * if not provided will be calculated in legacy format.\n * @property {number} barWidth=null Draw the waveform using bars.\n * @property {number} barMinHeight=null If specified, draw at least a bar of this height,\n * eliminating waveform gaps\n * @property {boolean} closeAudioContext=false Close and nullify all audio\n * contexts when the destroy method is called.\n * @property {!string|HTMLElement} container CSS selector or HTML element where\n * the waveform should be drawn. This is the only required parameter.\n * @property {string} cursorColor='#333' The fill color of the cursor indicating\n * the playhead position.\n * @property {number} cursorWidth=1 Measured in pixels.\n * @property {object} drawingContextAttributes={desynchronized: false} Drawing context\n * attributes.\n * @property {number} duration=null Optional audio length so pre-rendered peaks\n * can be display immediately for example.\n * @property {boolean} fillParent=true Whether to fill the entire container or\n * draw only according to `minPxPerSec`.\n * @property {boolean} forceDecode=false Force decoding of audio using web audio\n * when zooming to get a more detailed waveform.\n * @property {number} height=128 The height of the waveform. Measured in\n * pixels.\n * @property {boolean} hideScrollbar=false Whether to hide the horizontal\n * scrollbar when one would normally be shown.\n * @property {boolean} hideCursor=false Whether to hide the mouse cursor\n * when one would normally be shown by default.\n * @property {boolean} ignoreSilenceMode=false If true, ignores device silence mode\n * when using the `WebAudio` backend.\n * @property {boolean} interact=true Whether the mouse interaction will be\n * enabled at initialization. You can switch this parameter at any time later\n * on.\n * @property {boolean} loopSelection=true (Use with regions plugin) Enable\n * looping of selected regions\n * @property {number} maxCanvasWidth=4000 Maximum width of a single canvas in\n * pixels, excluding a small overlap (2 * `pixelRatio`, rounded up to the next\n * even integer). If the waveform is longer than this value, additional canvases\n * will be used to render the waveform, which is useful for very large waveforms\n * that may be too wide for browsers to draw on a single canvas.\n * @property {boolean} mediaControls=false (Use with backend `MediaElement` or `MediaElementWebAudio`)\n * this enables the native controls for the media element\n * @property {string} mediaType='audio' (Use with backend `MediaElement` or `MediaElementWebAudio`)\n * `'audio'|'video'` ('video' only for `MediaElement`)\n * @property {number} minPxPerSec=20 Minimum number of pixels per second of\n * audio.\n * @property {boolean} normalize=false If true, normalize by the maximum peak\n * instead of 1.0.\n * @property {boolean} partialRender=false Use the PeakCache to improve\n * rendering speed of large waveforms\n * @property {number} pixelRatio=window.devicePixelRatio The pixel ratio used to\n * calculate display\n * @property {PluginDefinition[]} plugins=[] An array of plugin definitions to\n * register during instantiation, they will be directly initialised unless they\n * are added with the `deferInit` property set to true.\n * @property {string} progressColor='#555' The fill color of the part of the\n * waveform behind the cursor. When `progressColor` and `waveColor` are the same\n * the progress wave is not rendered at all.\n * @property {boolean} removeMediaElementOnDestroy=true Set to false to keep the\n * media element in the DOM when the player is destroyed. This is useful when\n * reusing an existing media element via the `loadMediaElement` method.\n * @property {Object} renderer=MultiCanvas Can be used to inject a custom\n * renderer.\n * @property {boolean|number} responsive=false If set to `true` resize the\n * waveform, when the window is resized. This is debounced with a `100ms`\n * timeout by default. If this parameter is a number it represents that timeout.\n * @property {boolean} rtl=false If set to `true`, renders waveform from\n * right-to-left.\n * @property {boolean} scrollParent=false Whether to scroll the container with a\n * lengthy waveform. Otherwise the waveform is shrunk to the container width\n * (see fillParent).\n * @property {number} skipLength=2 Number of seconds to skip with the\n * skipForward() and skipBackward() methods.\n * @property {boolean} splitChannels=false Render with separate waveforms for\n * the channels of the audio\n * @property {SplitChannelOptions} splitChannelsOptions={} Options for splitChannel rendering\n * @property {boolean} vertical=false Render the waveform vertically instead of horizontally.\n * @property {string} waveColor='#999' The fill color of the waveform after the\n * cursor.\n * @property {object} xhr={} XHR options. For example:\n * `let xhr = {\n *     cache: 'default',\n *     mode: 'cors',\n *     method: 'GET',\n *     credentials: 'same-origin',\n *     redirect: 'follow',\n *     referrer: 'client',\n *     requestHeaders: [\n *         {\n *             key: 'Authorization',\n *             value: 'my-token'\n *         }\n *     ]\n * };`\n */\n\n/**\n * @typedef {Object} PluginDefinition\n * @desc The Object used to describe a plugin\n * @example wavesurfer.addPlugin(pluginDefinition);\n * @property {string} name The name of the plugin, the plugin instance will be\n * added as a property to the wavesurfer instance under this name\n * @property {?Object} staticProps The properties that should be added to the\n * wavesurfer instance as static properties\n * @property {?boolean} deferInit Don't initialise plugin\n * automatically\n * @property {Object} params={} The plugin parameters, they are the first parameter\n * passed to the plugin class constructor function\n * @property {PluginClass} instance The plugin instance factory, is called with\n * the dependency specified in extends. Returns the plugin class.\n */\n\n/**\n * @typedef {Object} SplitChannelOptions\n * @desc parameters applied when splitChannels option is true\n * @property {boolean} overlay=false determines whether channels are rendered on top of each other or on separate tracks\n * @property {object} channelColors={} object describing color for each channel. Example:\n * {\n *     0: {\n *         progressColor: 'green',\n *         waveColor: 'pink'\n *     },\n *     1: {\n *         progressColor: 'orange',\n *         waveColor: 'purple'\n *     }\n * }\n * @property {number[]} filterChannels=[] indexes of channels to be hidden from rendering\n * @property {boolean} relativeNormalization=false determines whether\n * normalization is done per channel or maintains proportionality between\n * channels. Only applied when normalize and splitChannels are both true.\n * @property {boolean} splitDragSelection=false determines if drag selection in regions\n * plugin works separately on each channel or only one selection for all channels\n * @since 4.3.0\n */\n\n/**\n * @interface PluginClass\n *\n * @desc This is the interface which is implemented by all plugin classes. Note\n * that this only turns into an observer after being passed through\n * `wavesurfer.addPlugin`.\n *\n * @extends {Observer}\n */\nclass PluginClass {\n    /**\n     * Plugin definition factory\n     *\n     * This function must be used to create a plugin definition which can be\n     * used by wavesurfer to correctly instantiate the plugin.\n     *\n     * It returns a `PluginDefinition` object representing the plugin.\n     *\n     * @param {Object} params={} The plugin params (specific to the plugin)\n     */\n    create(params) {}\n    /**\n     * Construct the plugin\n     *\n     * @param {Object} params={} The plugin params (specific to the plugin)\n     * @param {Object} ws The wavesurfer instance\n     */\n    constructor(params, ws) {}\n    /**\n     * Initialise the plugin\n     *\n     * Start doing something. This is called by\n     * `wavesurfer.initPlugin(pluginName)`\n     */\n    init() {}\n    /**\n     * Destroy the plugin instance\n     *\n     * Stop doing something. This is called by\n     * `wavesurfer.destroyPlugin(pluginName)`\n     */\n    destroy() {}\n}\n\n/**\n * WaveSurfer core library class\n *\n * @extends {Observer}\n * @example\n * const params = {\n *   container: '#waveform',\n *   waveColor: 'violet',\n *   progressColor: 'purple'\n * };\n *\n * // initialise like this\n * const wavesurfer = WaveSurfer.create(params);\n *\n * // or like this ...\n * const wavesurfer = new WaveSurfer(params);\n * wavesurfer.init();\n *\n * // load audio file\n * wavesurfer.load('example/media/demo.wav');\n */\nexport default class WaveSurfer extends util.Observer {\n    /** @private */\n    defaultParams = {\n        audioContext: null,\n        audioScriptProcessor: null,\n        audioRate: 1,\n        autoCenter: true,\n        autoCenterRate: 5,\n        autoCenterImmediately: false,\n        backend: 'WebAudio',\n        backgroundColor: null,\n        barHeight: 1,\n        barRadius: 0,\n        barGap: null,\n        barMinHeight: null,\n        container: null,\n        cursorColor: '#333',\n        cursorWidth: 1,\n        dragSelection: true,\n        drawingContextAttributes: {\n            // Boolean that hints the user agent to reduce the latency\n            // by desynchronizing the canvas paint cycle from the event\n            // loop\n            desynchronized: false\n        },\n        duration: null,\n        fillParent: true,\n        forceDecode: false,\n        height: 128,\n        hideScrollbar: false,\n        hideCursor: false,\n        ignoreSilenceMode: false,\n        interact: true,\n        loopSelection: true,\n        maxCanvasWidth: 4000,\n        mediaContainer: null,\n        mediaControls: false,\n        mediaType: 'audio',\n        minPxPerSec: 20,\n        normalize: false,\n        partialRender: false,\n        pixelRatio:\n            window.devicePixelRatio || screen.deviceXDPI / screen.logicalXDPI,\n        plugins: [],\n        progressColor: '#555',\n        removeMediaElementOnDestroy: true,\n        renderer: MultiCanvas,\n        responsive: false,\n        rtl: false,\n        scrollParent: false,\n        skipLength: 2,\n        splitChannels: false,\n        splitChannelsOptions: {\n            overlay: false,\n            channelColors: {},\n            filterChannels: [],\n            relativeNormalization: false,\n            splitDragSelection: false\n        },\n        vertical: false,\n        waveColor: '#999',\n        xhr: {}\n    };\n\n    /** @private */\n    backends = {\n        MediaElement,\n        WebAudio,\n        MediaElementWebAudio\n    };\n\n    /**\n     * Instantiate this class, call its `init` function and returns it\n     *\n     * @param {WavesurferParams} params The wavesurfer parameters\n     * @return {Object} WaveSurfer instance\n     * @example const wavesurfer = WaveSurfer.create(params);\n     */\n    static create(params) {\n        const wavesurfer = new WaveSurfer(params);\n        return wavesurfer.init();\n    }\n\n    /**\n     * The library version number is available as a static property of the\n     * WaveSurfer class\n     *\n     * @type {String}\n     * @example\n     * console.log('Using wavesurfer.js ' + WaveSurfer.VERSION);\n     */\n    static VERSION = __VERSION__;\n\n    /**\n     * Functions in the `util` property are available as a prototype property to\n     * all instances\n     *\n     * @type {Object}\n     * @example\n     * const wavesurfer = WaveSurfer.create(params);\n     * wavesurfer.util.style(myElement, { background: 'blue' });\n     */\n    util = util;\n\n    /**\n     * Functions in the `util` property are available as a static property of the\n     * WaveSurfer class\n     *\n     * @type {Object}\n     * @example\n     * WaveSurfer.util.style(myElement, { background: 'blue' });\n     */\n    static util = util;\n\n    /**\n     * Initialise wavesurfer instance\n     *\n     * @param {WavesurferParams} params Instantiation options for wavesurfer\n     * @example\n     * const wavesurfer = new WaveSurfer(params);\n     * @returns {this} Wavesurfer instance\n     */\n    constructor(params) {\n        super();\n        /**\n         * Extract relevant parameters (or defaults)\n         * @private\n         */\n        this.params = Object.assign({}, this.defaultParams, params);\n        this.params.splitChannelsOptions = Object.assign(\n            {},\n            this.defaultParams.splitChannelsOptions,\n            params.splitChannelsOptions\n        );\n        /** @private */\n        this.container =\n            'string' == typeof params.container\n                ? document.querySelector(this.params.container)\n                : this.params.container;\n\n        if (!this.container) {\n            throw new Error('Container element not found');\n        }\n\n        if (this.params.mediaContainer == null) {\n            /** @private */\n            this.mediaContainer = this.container;\n        } else if (typeof this.params.mediaContainer == 'string') {\n            /** @private */\n            this.mediaContainer = document.querySelector(\n                this.params.mediaContainer\n            );\n        } else {\n            /** @private */\n            this.mediaContainer = this.params.mediaContainer;\n        }\n\n        if (!this.mediaContainer) {\n            throw new Error('Media Container element not found');\n        }\n\n        if (this.params.maxCanvasWidth <= 1) {\n            throw new Error('maxCanvasWidth must be greater than 1');\n        } else if (this.params.maxCanvasWidth % 2 == 1) {\n            throw new Error('maxCanvasWidth must be an even number');\n        }\n\n        if (this.params.rtl === true) {\n            if (this.params.vertical === true) {\n                util.style(this.container, { transform: 'rotateX(180deg)' });\n            } else {\n                util.style(this.container, { transform: 'rotateY(180deg)' });\n            }\n        }\n\n        if (this.params.backgroundColor) {\n            this.setBackgroundColor(this.params.backgroundColor);\n        }\n\n        /**\n         * @private Used to save the current volume when muting so we can\n         * restore once unmuted\n         * @type {number}\n         */\n        this.savedVolume = 0;\n\n        /**\n         * @private The current muted state\n         * @type {boolean}\n         */\n        this.isMuted = false;\n\n        /**\n         * @private Will hold a list of event descriptors that need to be\n         * canceled on subsequent loads of audio\n         * @type {Object[]}\n         */\n        this.tmpEvents = [];\n\n        /**\n         * @private Holds any running audio downloads\n         * @type {Observer}\n         */\n        this.currentRequest = null;\n        /** @private */\n        this.arraybuffer = null;\n        /** @private */\n        this.drawer = null;\n        /** @private */\n        this.backend = null;\n        /** @private */\n        this.peakCache = null;\n\n        // cache constructor objects\n        if (typeof this.params.renderer !== 'function') {\n            throw new Error('Renderer parameter is invalid');\n        }\n        /**\n         * @private The uninitialised Drawer class\n         */\n        this.Drawer = this.params.renderer;\n        /**\n         * @private The uninitialised Backend class\n         */\n        // Back compat\n        if (this.params.backend == 'AudioElement') {\n            this.params.backend = 'MediaElement';\n        }\n\n        if (\n            (this.params.backend == 'WebAudio' ||\n                this.params.backend === 'MediaElementWebAudio') &&\n            !WebAudio.prototype.supportsWebAudio.call(null)\n        ) {\n            this.params.backend = 'MediaElement';\n        }\n        this.Backend = this.backends[this.params.backend];\n\n        /**\n         * @private map of plugin names that are currently initialised\n         */\n        this.initialisedPluginList = {};\n        /** @private */\n        this.isDestroyed = false;\n\n        /**\n         * Get the current ready status.\n         *\n         * @example const isReady = wavesurfer.isReady;\n         * @return {boolean}\n         */\n        this.isReady = false;\n\n        // responsive debounced event listener. If this.params.responsive is not\n        // set, this is never called. Use 100ms or this.params.responsive as\n        // timeout for the debounce function.\n        let prevWidth = 0;\n        this._onResize = util.debounce(\n            () => {\n                if (\n                    this.drawer.wrapper &&\n                    prevWidth != this.drawer.wrapper.clientWidth &&\n                    !this.params.scrollParent\n                ) {\n                    prevWidth = this.drawer.wrapper.clientWidth;\n                    if (prevWidth) {\n                        // redraw only if waveform container is rendered and has a width\n                        this.drawer.fireEvent('redraw');\n                    }\n                }\n            },\n            typeof this.params.responsive === 'number'\n                ? this.params.responsive\n                : 100\n        );\n\n        return this;\n    }\n\n    /**\n     * Initialise the wave\n     *\n     * @example\n     * var wavesurfer = new WaveSurfer(params);\n     * wavesurfer.init();\n     * @return {this} The wavesurfer instance\n     */\n    init() {\n        this.registerPlugins(this.params.plugins);\n        this.createDrawer();\n        this.createBackend();\n        this.createPeakCache();\n        return this;\n    }\n\n    /**\n     * Add and initialise array of plugins (if `plugin.deferInit` is falsey),\n     * this function is called in the init function of wavesurfer\n     *\n     * @param {PluginDefinition[]} plugins An array of plugin definitions\n     * @emits {WaveSurfer#plugins-registered} Called with the array of plugin definitions\n     * @return {this} The wavesurfer instance\n     */\n    registerPlugins(plugins) {\n        // first instantiate all the plugins\n        plugins.forEach(plugin => this.addPlugin(plugin));\n\n        // now run the init functions\n        plugins.forEach(plugin => {\n            // call init function of the plugin if deferInit is falsey\n            // in that case you would manually use initPlugins()\n            if (!plugin.deferInit) {\n                this.initPlugin(plugin.name);\n            }\n        });\n        this.fireEvent('plugins-registered', plugins);\n        return this;\n    }\n\n    /**\n     * Get a map of plugin names that are currently initialised\n     *\n     * @example wavesurfer.getPlugins();\n     * @return {Object} Object with plugin names\n     */\n    getActivePlugins() {\n        return this.initialisedPluginList;\n    }\n\n    /**\n     * Add a plugin object to wavesurfer\n     *\n     * @param {PluginDefinition} plugin A plugin definition\n     * @emits {WaveSurfer#plugin-added} Called with the name of the plugin that was added\n     * @example wavesurfer.addPlugin(WaveSurfer.minimap());\n     * @return {this} The wavesurfer instance\n     */\n    addPlugin(plugin) {\n        if (!plugin.name) {\n            throw new Error('Plugin does not have a name!');\n        }\n        if (!plugin.instance) {\n            throw new Error(\n                `Plugin ${plugin.name} does not have an instance property!`\n            );\n        }\n\n        // staticProps properties are applied to wavesurfer instance\n        if (plugin.staticProps) {\n            Object.keys(plugin.staticProps).forEach(pluginStaticProp => {\n                /**\n                 * Properties defined in a plugin definition's `staticProps` property are added as\n                 * staticProps properties of the WaveSurfer instance\n                 */\n                this[pluginStaticProp] = plugin.staticProps[pluginStaticProp];\n            });\n        }\n\n        const Instance = plugin.instance;\n\n        // turn the plugin instance into an observer\n        const observerPrototypeKeys = Object.getOwnPropertyNames(\n            util.Observer.prototype\n        );\n        observerPrototypeKeys.forEach(key => {\n            Instance.prototype[key] = util.Observer.prototype[key];\n        });\n\n        /**\n         * Instantiated plugin classes are added as a property of the wavesurfer\n         * instance\n         * @type {Object}\n         */\n        this[plugin.name] = new Instance(plugin.params || {}, this);\n        this.fireEvent('plugin-added', plugin.name);\n        return this;\n    }\n\n    /**\n     * Initialise a plugin\n     *\n     * @param {string} name A plugin name\n     * @emits WaveSurfer#plugin-initialised\n     * @example wavesurfer.initPlugin('minimap');\n     * @return {this} The wavesurfer instance\n     */\n    initPlugin(name) {\n        if (!this[name]) {\n            throw new Error(`Plugin ${name} has not been added yet!`);\n        }\n        if (this.initialisedPluginList[name]) {\n            // destroy any already initialised plugins\n            this.destroyPlugin(name);\n        }\n        this[name].init();\n        this.initialisedPluginList[name] = true;\n        this.fireEvent('plugin-initialised', name);\n        return this;\n    }\n\n    /**\n     * Destroy a plugin\n     *\n     * @param {string} name A plugin name\n     * @emits WaveSurfer#plugin-destroyed\n     * @example wavesurfer.destroyPlugin('minimap');\n     * @returns {this} The wavesurfer instance\n     */\n    destroyPlugin(name) {\n        if (!this[name]) {\n            throw new Error(\n                `Plugin ${name} has not been added yet and cannot be destroyed!`\n            );\n        }\n        if (!this.initialisedPluginList[name]) {\n            throw new Error(\n                `Plugin ${name} is not active and cannot be destroyed!`\n            );\n        }\n        if (typeof this[name].destroy !== 'function') {\n            throw new Error(`Plugin ${name} does not have a destroy function!`);\n        }\n\n        this[name].destroy();\n        delete this.initialisedPluginList[name];\n        this.fireEvent('plugin-destroyed', name);\n        return this;\n    }\n\n    /**\n     * Destroy all initialised plugins. Convenience function to use when\n     * wavesurfer is removed\n     *\n     * @private\n     */\n    destroyAllPlugins() {\n        Object.keys(this.initialisedPluginList).forEach(name =>\n            this.destroyPlugin(name)\n        );\n    }\n\n    /**\n     * Create the drawer and draw the waveform\n     *\n     * @private\n     * @emits WaveSurfer#drawer-created\n     */\n    createDrawer() {\n        this.drawer = new this.Drawer(this.container, this.params);\n        this.drawer.init();\n        this.fireEvent('drawer-created', this.drawer);\n\n        if (this.params.responsive !== false) {\n            window.addEventListener('resize', this._onResize, true);\n            window.addEventListener('orientationchange', this._onResize, true);\n        }\n\n        this.drawer.on('redraw', () => {\n            this.drawBuffer();\n            this.drawer.progress(this.backend.getPlayedPercents());\n        });\n\n        // Click-to-seek\n        this.drawer.on('click', (e, progress) => {\n            setTimeout(() => this.seekTo(progress), 0);\n        });\n\n        // Relay the scroll event from the drawer\n        this.drawer.on('scroll', e => {\n            if (this.params.partialRender) {\n                this.drawBuffer();\n            }\n            this.fireEvent('scroll', e);\n        });\n\n        // Relay the dblclick event from the drawer\n        this.drawer.on('dblclick', (e, progress) => {\n            this.fireEvent('dblclick', e, progress);\n        });\n\n    }\n\n    /**\n     * Create the backend\n     *\n     * @private\n     * @emits WaveSurfer#backend-created\n     */\n    createBackend() {\n        if (this.backend) {\n            this.backend.destroy();\n        }\n\n        this.backend = new this.Backend(this.params);\n        this.backend.init();\n        this.fireEvent('backend-created', this.backend);\n\n        this.backend.on('finish', () => {\n            this.drawer.progress(this.backend.getPlayedPercents());\n            this.fireEvent('finish');\n        });\n        this.backend.on('play', () => this.fireEvent('play'));\n        this.backend.on('pause', () => this.fireEvent('pause'));\n\n        this.backend.on('audioprocess', time => {\n            this.drawer.progress(this.backend.getPlayedPercents());\n            this.fireEvent('audioprocess', time);\n        });\n\n        // only needed for MediaElement and MediaElementWebAudio backend\n        if (\n            this.params.backend === 'MediaElement' ||\n            this.params.backend === 'MediaElementWebAudio'\n        ) {\n            this.backend.on('seek', () => {\n                this.drawer.progress(this.backend.getPlayedPercents());\n            });\n\n            this.backend.on('volume', () => {\n                let newVolume = this.getVolume();\n                this.fireEvent('volume', newVolume);\n\n                if (this.backend.isMuted !== this.isMuted) {\n                    this.isMuted = this.backend.isMuted;\n                    this.fireEvent('mute', this.isMuted);\n                }\n            });\n        }\n    }\n\n    /**\n     * Create the peak cache\n     *\n     * @private\n     */\n    createPeakCache() {\n        if (this.params.partialRender) {\n            this.peakCache = new PeakCache();\n        }\n    }\n\n    /**\n     * Get the duration of the audio clip\n     *\n     * @example const duration = wavesurfer.getDuration();\n     * @return {number} Duration in seconds\n     */\n    getDuration() {\n        return this.backend.getDuration();\n    }\n\n    /**\n     * Get the current playback position\n     *\n     * @example const currentTime = wavesurfer.getCurrentTime();\n     * @return {number} Playback position in seconds\n     */\n    getCurrentTime() {\n        return this.backend.getCurrentTime();\n    }\n\n    /**\n     * Set the current play time in seconds.\n     *\n     * @param {number} seconds A positive number in seconds. E.g. 10 means 10\n     * seconds, 60 means 1 minute\n     */\n    setCurrentTime(seconds) {\n        if (seconds >= this.getDuration()) {\n            this.seekTo(1);\n        } else {\n            this.seekTo(seconds / this.getDuration());\n        }\n    }\n\n    /**\n     * Starts playback from the current position. Optional start and end\n     * measured in seconds can be used to set the range of audio to play.\n     *\n     * @param {?number} start Position to start at\n     * @param {?number} end Position to end at\n     * @emits WaveSurfer#interaction\n     * @return {Promise} Result of the backend play method\n     * @example\n     * // play from second 1 to 5\n     * wavesurfer.play(1, 5);\n     */\n    play(start, end) {\n        if (this.params.ignoreSilenceMode) {\n            // ignores device hardware silence mode\n            util.ignoreSilenceMode();\n        }\n\n        this.fireEvent('interaction', () => this.play(start, end));\n        return this.backend.play(start, end);\n    }\n\n    /**\n     * Set a point in seconds for playback to stop at.\n     *\n     * @param {number} position Position (in seconds) to stop at\n     * @version 3.3.0\n     */\n    setPlayEnd(position) {\n        this.backend.setPlayEnd(position);\n    }\n\n    /**\n     * Stops and pauses playback\n     *\n     * @example wavesurfer.pause();\n     * @return {Promise} Result of the backend pause method\n     */\n    pause() {\n        if (!this.backend.isPaused()) {\n            return this.backend.pause();\n        }\n    }\n\n    /**\n     * Toggle playback\n     *\n     * @example wavesurfer.playPause();\n     * @return {Promise} Result of the backend play or pause method\n     */\n    playPause() {\n        return this.backend.isPaused() ? this.play() : this.pause();\n    }\n\n    /**\n     * Get the current playback state\n     *\n     * @example const isPlaying = wavesurfer.isPlaying();\n     * @return {boolean} False if paused, true if playing\n     */\n    isPlaying() {\n        return !this.backend.isPaused();\n    }\n\n    /**\n     * Skip backward\n     *\n     * @param {?number} seconds Amount to skip back, if not specified `skipLength`\n     * is used\n     * @example wavesurfer.skipBackward();\n     */\n    skipBackward(seconds) {\n        this.skip(-seconds || -this.params.skipLength);\n    }\n\n    /**\n     * Skip forward\n     *\n     * @param {?number} seconds Amount to skip back, if not specified `skipLength`\n     * is used\n     * @example wavesurfer.skipForward();\n     */\n    skipForward(seconds) {\n        this.skip(seconds || this.params.skipLength);\n    }\n\n    /**\n     * Skip a number of seconds from the current position (use a negative value\n     * to go backwards).\n     *\n     * @param {number} offset Amount to skip back or forwards\n     * @example\n     * // go back 2 seconds\n     * wavesurfer.skip(-2);\n     */\n    skip(offset) {\n        const duration = this.getDuration() || 1;\n        let position = this.getCurrentTime() || 0;\n        position = Math.max(0, Math.min(duration, position + (offset || 0)));\n        this.seekAndCenter(position / duration);\n    }\n\n    /**\n     * Seeks to a position and centers the view\n     *\n     * @param {number} progress Between 0 (=beginning) and 1 (=end)\n     * @example\n     * // seek and go to the middle of the audio\n     * wavesurfer.seekTo(0.5);\n     */\n    seekAndCenter(progress) {\n        this.seekTo(progress);\n        this.drawer.recenter(progress);\n    }\n\n    /**\n     * Seeks to a position\n     *\n     * @param {number} progress Between 0 (=beginning) and 1 (=end)\n     * @emits WaveSurfer#interaction\n     * @emits WaveSurfer#seek\n     * @example\n     * // seek to the middle of the audio\n     * wavesurfer.seekTo(0.5);\n     */\n    seekTo(progress) {\n        // return an error if progress is not a number between 0 and 1\n        if (\n            typeof progress !== 'number' ||\n            !isFinite(progress) ||\n            progress < 0 ||\n            progress > 1\n        ) {\n            throw new Error(\n                'Error calling wavesurfer.seekTo, parameter must be a number between 0 and 1!'\n            );\n        }\n        this.fireEvent('interaction', () => this.seekTo(progress));\n\n        const isWebAudioBackend = this.params.backend === 'WebAudio';\n        const paused = this.backend.isPaused();\n\n        if (isWebAudioBackend && !paused) {\n            this.backend.pause();\n        }\n\n        // avoid small scrolls while paused seeking\n        const oldScrollParent = this.params.scrollParent;\n        this.params.scrollParent = false;\n        this.backend.seekTo(progress * this.getDuration());\n        this.drawer.progress(progress);\n\n        if (isWebAudioBackend && !paused) {\n            this.backend.play();\n        }\n\n        this.params.scrollParent = oldScrollParent;\n        this.fireEvent('seek', progress);\n    }\n\n    /**\n     * Stops and goes to the beginning.\n     *\n     * @example wavesurfer.stop();\n     */\n    stop() {\n        this.pause();\n        this.seekTo(0);\n        this.drawer.progress(0);\n    }\n\n    /**\n     * Sets the ID of the audio device to use for output and returns a Promise.\n     *\n     * @param {string} deviceId String value representing underlying output\n     * device\n     * @returns {Promise} `Promise` that resolves to `undefined` when there are\n     * no errors detected.\n     */\n    setSinkId(deviceId) {\n        return this.backend.setSinkId(deviceId);\n    }\n\n    /**\n     * Set the playback volume.\n     *\n     * @param {number} newVolume A value between 0 and 1, 0 being no\n     * volume and 1 being full volume.\n     * @emits WaveSurfer#volume\n     */\n    setVolume(newVolume) {\n        if (this.isMuted === true) {\n            this.savedVolume = newVolume;\n            return;\n        }\n        this.backend.setVolume(newVolume);\n        this.fireEvent('volume', newVolume);\n    }\n\n    /**\n     * Get the playback volume.\n     *\n     * @return {number} A value between 0 and 1, 0 being no\n     * volume and 1 being full volume.\n     */\n    getVolume() {\n        return this.backend.getVolume();\n    }\n\n    /**\n     * Set the playback rate.\n     *\n     * @param {number} rate A positive number. E.g. 0.5 means half the normal\n     * speed, 2 means double speed and so on.\n     * @example wavesurfer.setPlaybackRate(2);\n     */\n    setPlaybackRate(rate) {\n        this.backend.setPlaybackRate(rate);\n    }\n\n    /**\n     * Get the playback rate.\n     *\n     * @return {number} The current playback rate.\n     */\n    getPlaybackRate() {\n        return this.backend.getPlaybackRate();\n    }\n\n    /**\n     * Toggle the volume on and off. If not currently muted it will save the\n     * current volume value and turn the volume off. If currently muted then it\n     * will restore the volume to the saved value, and then rest the saved\n     * value.\n     *\n     * @example wavesurfer.toggleMute();\n     */\n    toggleMute() {\n        this.setMute(!this.isMuted);\n    }\n\n    /**\n     * Enable or disable muted audio\n     *\n     * @param {boolean} mute Specify `true` to mute audio.\n     * @emits WaveSurfer#volume\n     * @emits WaveSurfer#mute\n     * @example\n     * // unmute\n     * wavesurfer.setMute(false);\n     * console.log(wavesurfer.getMute()) // logs false\n     */\n    setMute(mute) {\n        // ignore all muting requests if the audio is already in that state\n        if (mute === this.isMuted) {\n            this.fireEvent('mute', this.isMuted);\n            return;\n        }\n\n        if (this.backend.setMute) {\n            // Backends such as the MediaElement backend have their own handling\n            // of mute, let them handle it.\n            this.backend.setMute(mute);\n            this.isMuted = mute;\n        } else {\n            if (mute) {\n                // If currently not muted then save current volume,\n                // turn off the volume and update the mute properties\n                this.savedVolume = this.backend.getVolume();\n                this.backend.setVolume(0);\n                this.isMuted = true;\n                this.fireEvent('volume', 0);\n            } else {\n                // If currently muted then restore to the saved volume\n                // and update the mute properties\n                this.backend.setVolume(this.savedVolume);\n                this.isMuted = false;\n                this.fireEvent('volume', this.savedVolume);\n            }\n        }\n        this.fireEvent('mute', this.isMuted);\n    }\n\n    /**\n     * Get the current mute status.\n     *\n     * @example const isMuted = wavesurfer.getMute();\n     * @return {boolean} Current mute status\n     */\n    getMute() {\n        return this.isMuted;\n    }\n\n    /**\n     * Get the list of current set filters as an array.\n     *\n     * Filters must be set with setFilters method first\n     *\n     * @return {array} List of enabled filters\n     */\n    getFilters() {\n        return this.backend.filters || [];\n    }\n\n    /**\n     * Toggles `scrollParent` and redraws\n     *\n     * @example wavesurfer.toggleScroll();\n     */\n    toggleScroll() {\n        this.params.scrollParent = !this.params.scrollParent;\n        this.drawBuffer();\n    }\n\n    /**\n     * Toggle mouse interaction\n     *\n     * @example wavesurfer.toggleInteraction();\n     */\n    toggleInteraction() {\n        this.params.interact = !this.params.interact;\n    }\n\n    /**\n     * Get the fill color of the waveform after the cursor.\n     *\n     * @param {?number} channelIdx Optional index of the channel to get its wave color if splitChannels is true\n     * @return {string|object} A CSS color string, or an array of CSS color strings.\n     */\n    getWaveColor(channelIdx = null) {\n        if (this.params.splitChannelsOptions.channelColors[channelIdx]) {\n            return this.params.splitChannelsOptions.channelColors[channelIdx].waveColor;\n        }\n        return this.params.waveColor;\n    }\n\n    /**\n     * Set the fill color of the waveform after the cursor.\n     *\n     * @param {string|object} color A CSS color string, or an array of CSS color strings.\n     * @param {?number} channelIdx Optional index of the channel to set its wave color if splitChannels is true\n     * @example wavesurfer.setWaveColor('#ddd');\n     */\n    setWaveColor(color, channelIdx = null) {\n        if (this.params.splitChannelsOptions.channelColors[channelIdx]) {\n            this.params.splitChannelsOptions.channelColors[channelIdx].waveColor = color;\n        } else {\n            this.params.waveColor = color;\n        }\n        this.drawBuffer();\n    }\n\n    /**\n     * Get the fill color of the waveform behind the cursor.\n     *\n     * @param {?number} channelIdx Optional index of the channel to get its progress color if splitChannels is true\n     * @return {string|object} A CSS color string, or an array of CSS color strings.\n     */\n    getProgressColor(channelIdx = null) {\n        if (this.params.splitChannelsOptions.channelColors[channelIdx]) {\n            return this.params.splitChannelsOptions.channelColors[channelIdx].progressColor;\n        }\n        return this.params.progressColor;\n    }\n\n    /**\n     * Set the fill color of the waveform behind the cursor.\n     *\n     * @param {string|object} color A CSS color string, or an array of CSS color strings.\n     * @param {?number} channelIdx Optional index of the channel to set its progress color if splitChannels is true\n     * @example wavesurfer.setProgressColor('#400');\n     */\n    setProgressColor(color, channelIdx) {\n        if (this.params.splitChannelsOptions.channelColors[channelIdx]) {\n            this.params.splitChannelsOptions.channelColors[channelIdx].progressColor = color;\n        } else {\n            this.params.progressColor = color;\n        }\n        this.drawBuffer();\n    }\n\n    /**\n     * Get the background color of the waveform container.\n     *\n     * @return {string} A CSS color string.\n     */\n    getBackgroundColor() {\n        return this.params.backgroundColor;\n    }\n\n    /**\n     * Set the background color of the waveform container.\n     *\n     * @param {string} color A CSS color string.\n     * @example wavesurfer.setBackgroundColor('#FF00FF');\n     */\n    setBackgroundColor(color) {\n        this.params.backgroundColor = color;\n        util.style(this.container, { background: this.params.backgroundColor });\n    }\n\n    /**\n     * Get the fill color of the cursor indicating the playhead\n     * position.\n     *\n     * @return {string} A CSS color string.\n     */\n    getCursorColor() {\n        return this.params.cursorColor;\n    }\n\n    /**\n     * Set the fill color of the cursor indicating the playhead\n     * position.\n     *\n     * @param {string} color A CSS color string.\n     * @example wavesurfer.setCursorColor('#222');\n     */\n    setCursorColor(color) {\n        this.params.cursorColor = color;\n        this.drawer.updateCursor();\n    }\n\n    /**\n     * Get the height of the waveform.\n     *\n     * @return {number} Height measured in pixels.\n     */\n    getHeight() {\n        return this.params.height;\n    }\n\n    /**\n     * Set the height of the waveform.\n     *\n     * @param {number} height Height measured in pixels.\n     * @example wavesurfer.setHeight(200);\n     */\n    setHeight(height) {\n        this.params.height = height;\n        this.drawer.setHeight(height * this.params.pixelRatio);\n        this.drawBuffer();\n    }\n\n    /**\n     * Hide channels from being drawn on the waveform if splitting channels.\n     *\n     * For example, if we want to draw only the peaks for the right stereo channel:\n     *\n     * const wavesurfer = new WaveSurfer.create({...splitChannels: true});\n     * wavesurfer.load('stereo_audio.mp3');\n     *\n     * wavesurfer.setFilteredChannel([0]); <-- hide left channel peaks.\n     *\n     * @param {array} channelIndices Channels to be filtered out from drawing.\n     * @version 4.0.0\n     */\n    setFilteredChannels(channelIndices) {\n        this.params.splitChannelsOptions.filterChannels = channelIndices;\n        this.drawBuffer();\n    }\n\n    /**\n     * Get the correct peaks for current wave view-port and render wave\n     *\n     * @private\n     * @emits WaveSurfer#redraw\n     */\n    drawBuffer() {\n        const nominalWidth = Math.round(\n            this.getDuration() *\n                this.params.minPxPerSec *\n                this.params.pixelRatio\n        );\n        const parentWidth = this.drawer.getWidth();\n        let width = nominalWidth;\n        // always start at 0 after zooming for scrolling : issue redraw left part\n        let start = 0;\n        let end = Math.max(start + parentWidth, width);\n        // Fill container\n        if (\n            this.params.fillParent &&\n            (!this.params.scrollParent || nominalWidth < parentWidth)\n        ) {\n            width = parentWidth;\n            start = 0;\n            end = width;\n        }\n\n        let peaks;\n        if (this.params.partialRender) {\n            const newRanges = this.peakCache.addRangeToPeakCache(\n                width,\n                start,\n                end\n            );\n            let i;\n            for (i = 0; i < newRanges.length; i++) {\n                peaks = this.backend.getPeaks(\n                    width,\n                    newRanges[i][0],\n                    newRanges[i][1]\n                );\n                this.drawer.drawPeaks(\n                    peaks,\n                    width,\n                    newRanges[i][0],\n                    newRanges[i][1]\n                );\n            }\n        } else {\n            peaks = this.backend.getPeaks(width, start, end);\n            this.drawer.drawPeaks(peaks, width, start, end);\n        }\n        this.fireEvent('redraw', peaks, width);\n    }\n\n    /**\n     * Horizontally zooms the waveform in and out. It also changes the parameter\n     * `minPxPerSec` and enables the `scrollParent` option. Calling the function\n     * with a falsey parameter will reset the zoom state.\n     *\n     * @param {?number} pxPerSec Number of horizontal pixels per second of\n     * audio, if none is set the waveform returns to unzoomed state\n     * @emits WaveSurfer#zoom\n     * @example wavesurfer.zoom(20);\n     */\n    zoom(pxPerSec) {\n        if (!pxPerSec) {\n            this.params.minPxPerSec = this.defaultParams.minPxPerSec;\n            this.params.scrollParent = false;\n        } else {\n            this.params.minPxPerSec = pxPerSec;\n            this.params.scrollParent = true;\n        }\n\n        this.drawBuffer();\n        this.drawer.progress(this.backend.getPlayedPercents());\n\n        this.drawer.recenter(this.getCurrentTime() / this.getDuration());\n        this.fireEvent('zoom', pxPerSec);\n    }\n\n    /**\n     * Decode buffer and load\n     *\n     * @private\n     * @param {ArrayBuffer} arraybuffer Buffer to process\n     */\n    loadArrayBuffer(arraybuffer) {\n        this.decodeArrayBuffer(arraybuffer, data => {\n            if (!this.isDestroyed) {\n                this.loadDecodedBuffer(data);\n            }\n        });\n    }\n\n    /**\n     * Directly load an externally decoded AudioBuffer\n     *\n     * @private\n     * @param {AudioBuffer} buffer Buffer to process\n     * @emits WaveSurfer#ready\n     */\n    loadDecodedBuffer(buffer) {\n        this.backend.load(buffer);\n        this.drawBuffer();\n        this.isReady = true;\n        this.fireEvent('ready');\n    }\n\n    /**\n     * Loads audio data from a Blob or File object\n     *\n     * @param {Blob|File} blob Audio data\n     * @example\n     */\n    loadBlob(blob) {\n        // Create file reader\n        const reader = new FileReader();\n        reader.addEventListener('progress', e => this.onProgress(e));\n        reader.addEventListener('load', e =>\n            this.loadArrayBuffer(e.target.result)\n        );\n        reader.addEventListener('error', () =>\n            this.fireEvent('error', 'Error reading file')\n        );\n        reader.readAsArrayBuffer(blob);\n        this.empty();\n    }\n\n    /**\n     * Loads audio and re-renders the waveform.\n     *\n     * @param {string|HTMLMediaElement} url The url of the audio file or the\n     * audio element with the audio\n     * @param {number[]|Number.<Array[]>} peaks Wavesurfer does not have to decode\n     * the audio to render the waveform if this is specified\n     * @param {?string} preload (Use with backend `MediaElement` and `MediaElementWebAudio`)\n     * `'none'|'metadata'|'auto'` Preload attribute for the media element\n     * @param {?number} duration The duration of the audio. This is used to\n     * render the peaks data in the correct size for the audio duration (as\n     * befits the current `minPxPerSec` and zoom value) without having to decode\n     * the audio.\n     * @returns {void}\n     * @throws Will throw an error if the `url` argument is empty.\n     * @example\n     * // uses fetch or media element to load file (depending on backend)\n     * wavesurfer.load('http://example.com/demo.wav');\n     *\n     * // setting preload attribute with media element backend and supplying\n     * // peaks\n     * wavesurfer.load(\n     *   'http://example.com/demo.wav',\n     *   [0.0218, 0.0183, 0.0165, 0.0198, 0.2137, 0.2888],\n     *   true\n     * );\n     */\n    load(url, peaks, preload, duration) {\n        if (!url) {\n            throw new Error('url parameter cannot be empty');\n        }\n        this.empty();\n        if (preload) {\n            // check whether the preload attribute will be usable and if not log\n            // a warning listing the reasons why not and nullify the variable\n            const preloadIgnoreReasons = {\n                \"Preload is not 'auto', 'none' or 'metadata'\":\n                    ['auto', 'metadata', 'none'].indexOf(preload) === -1,\n                'Peaks are not provided': !peaks,\n                \"Backend is not of type 'MediaElement' or 'MediaElementWebAudio'\":\n                    ['MediaElement', 'MediaElementWebAudio'].indexOf(\n                        this.params.backend\n                    ) === -1,\n                'Url is not of type string': typeof url !== 'string'\n            };\n            const activeReasons = Object.keys(preloadIgnoreReasons).filter(\n                reason => preloadIgnoreReasons[reason]\n            );\n            if (activeReasons.length) {\n                // eslint-disable-next-line no-console\n                console.warn(\n                    'Preload parameter of wavesurfer.load will be ignored because:\\n\\t- ' +\n                        activeReasons.join('\\n\\t- ')\n                );\n                // stop invalid values from being used\n                preload = null;\n            }\n        }\n\n        // loadBuffer(url, peaks, duration) requires that url is a string\n        // but users can pass in a HTMLMediaElement to WaveSurfer\n        if (this.params.backend === 'WebAudio' && url instanceof HTMLMediaElement) {\n            url = url.src;\n        }\n\n        switch (this.params.backend) {\n            case 'WebAudio':\n                return this.loadBuffer(url, peaks, duration);\n            case 'MediaElement':\n            case 'MediaElementWebAudio':\n                return this.loadMediaElement(url, peaks, preload, duration);\n        }\n    }\n\n    /**\n     * Loads audio using Web Audio buffer backend.\n     *\n     * @private\n     * @emits WaveSurfer#waveform-ready\n     * @param {string} url URL of audio file\n     * @param {number[]|Number.<Array[]>} peaks Peaks data\n     * @param {?number} duration Optional duration of audio file\n     * @returns {void}\n     */\n    loadBuffer(url, peaks, duration) {\n        const load = action => {\n            if (action) {\n                this.tmpEvents.push(this.once('ready', action));\n            }\n            return this.getArrayBuffer(url, data => this.loadArrayBuffer(data));\n        };\n\n        if (peaks) {\n            this.backend.setPeaks(peaks, duration);\n            this.drawBuffer();\n            this.fireEvent('waveform-ready');\n            this.tmpEvents.push(this.once('interaction', load));\n        } else {\n            return load();\n        }\n    }\n\n    /**\n     * Either create a media element, or load an existing media element.\n     *\n     * @private\n     * @emits WaveSurfer#waveform-ready\n     * @param {string|HTMLMediaElement} urlOrElt Either a path to a media file, or an\n     * existing HTML5 Audio/Video Element\n     * @param {number[]|Number.<Array[]>} peaks Array of peaks. Required to bypass web audio\n     * dependency\n     * @param {?boolean} preload Set to true if the preload attribute of the\n     * audio element should be enabled\n     * @param {?number} duration Optional duration of audio file\n     */\n    loadMediaElement(urlOrElt, peaks, preload, duration) {\n        let url = urlOrElt;\n\n        if (typeof urlOrElt === 'string') {\n            this.backend.load(url, this.mediaContainer, peaks, preload);\n        } else {\n            const elt = urlOrElt;\n            this.backend.loadElt(elt, peaks);\n\n            // If peaks are not provided,\n            // url = element.src so we can get peaks with web audio\n            url = elt.src;\n        }\n\n        this.tmpEvents.push(\n            this.backend.once('canplay', () => {\n                // ignore when backend was already destroyed\n                if (!this.backend.destroyed) {\n                    this.drawBuffer();\n                    this.isReady = true;\n                    this.fireEvent('ready');\n                }\n            }),\n            this.backend.once('error', err => this.fireEvent('error', err))\n        );\n\n        // If peaks are provided, render them and fire the `waveform-ready` event.\n        if (peaks) {\n            this.backend.setPeaks(peaks, duration);\n            this.drawBuffer();\n            this.fireEvent('waveform-ready');\n        }\n\n        // If no pre-decoded peaks are provided, or are provided with\n        // forceDecode flag, attempt to download the audio file and decode it\n        // with Web Audio.\n        if (\n            (!peaks || this.params.forceDecode) &&\n            this.backend.supportsWebAudio()\n        ) {\n            this.getArrayBuffer(url, arraybuffer => {\n                this.decodeArrayBuffer(arraybuffer, buffer => {\n                    this.backend.buffer = buffer;\n                    this.backend.setPeaks(null);\n                    this.drawBuffer();\n                    this.fireEvent('waveform-ready');\n                });\n            });\n        }\n    }\n\n    /**\n     * Decode an array buffer and pass data to a callback\n     *\n     * @private\n     * @param {Object} arraybuffer The array buffer to decode\n     * @param {function} callback The function to call on complete\n     */\n    decodeArrayBuffer(arraybuffer, callback) {\n        if (!this.isDestroyed) {\n            this.arraybuffer = arraybuffer;\n            this.backend.decodeArrayBuffer(\n                arraybuffer,\n                data => {\n                    // Only use the decoded data if we haven't been destroyed or\n                    // another decode started in the meantime\n                    if (!this.isDestroyed && this.arraybuffer == arraybuffer) {\n                        callback(data);\n                        this.arraybuffer = null;\n                    }\n                },\n                () => this.fireEvent('error', 'Error decoding audiobuffer')\n            );\n        }\n    }\n\n    /**\n     * Load an array buffer using fetch and pass the result to a callback\n     *\n     * @param {string} url The URL of the file object\n     * @param {function} callback The function to call on complete\n     * @returns {util.fetchFile} fetch call\n     * @private\n     */\n    getArrayBuffer(url, callback) {\n        let options = Object.assign(\n            {\n                url: url,\n                responseType: 'arraybuffer'\n            },\n            this.params.xhr\n        );\n        const request = util.fetchFile(options);\n\n        this.currentRequest = request;\n\n        this.tmpEvents.push(\n            request.on('progress', e => {\n                this.onProgress(e);\n            }),\n            request.on('success', data => {\n                callback(data);\n                this.currentRequest = null;\n            }),\n            request.on('error', e => {\n                this.fireEvent('error', e);\n                this.currentRequest = null;\n            })\n        );\n\n        return request;\n    }\n\n    /**\n     * Called while the audio file is loading\n     *\n     * @private\n     * @param {Event} e Progress event\n     * @emits WaveSurfer#loading\n     */\n    onProgress(e) {\n        let percentComplete;\n        if (e.lengthComputable) {\n            percentComplete = e.loaded / e.total;\n        } else {\n            // Approximate progress with an asymptotic\n            // function, and assume downloads in the 1-3 MB range.\n            percentComplete = e.loaded / (e.loaded + 1000000);\n        }\n        this.fireEvent('loading', Math.round(percentComplete * 100), e.target);\n    }\n\n    /**\n     * Exports PCM data into a JSON array and optionally opens in a new window\n     * as valid JSON Blob instance.\n     *\n     * @param {number} length=1024 The scale in which to export the peaks\n     * @param {number} accuracy=10000\n     * @param {?boolean} noWindow Set to true to disable opening a new\n     * window with the JSON\n     * @param {number} start Start index\n     * @param {number} end End index\n     * @return {Promise} Promise that resolves with array of peaks\n     */\n    exportPCM(length, accuracy, noWindow, start, end) {\n        length = length || 1024;\n        start = start || 0;\n        accuracy = accuracy || 10000;\n        noWindow = noWindow || false;\n        const peaks = this.backend.getPeaks(length, start, end);\n        const arr = [].map.call(\n            peaks,\n            val => Math.round(val * accuracy) / accuracy\n        );\n\n        return new Promise((resolve, reject) => {\n            if (!noWindow){\n                const blobJSON = new Blob(\n                    [JSON.stringify(arr)],\n                    {type: 'application/json;charset=utf-8'}\n                );\n                const objURL = URL.createObjectURL(blobJSON);\n                window.open(objURL);\n                URL.revokeObjectURL(objURL);\n            }\n            resolve(arr);\n        });\n    }\n\n    /**\n     * Save waveform image as data URI.\n     *\n     * The default format is `image/png`. Other supported types are\n     * `image/jpeg` and `image/webp`.\n     *\n     * @param {string} format='image/png' A string indicating the image format.\n     * The default format type is `image/png`.\n     * @param {number} quality=1 A number between 0 and 1 indicating the image\n     * quality to use for image formats that use lossy compression such as\n     * `image/jpeg` and `image/webp`.\n     * @param {string} type Image data type to return. Either `dataURL` (default)\n     * or `blob`.\n     * @return {string|string[]|Promise} When using `dataURL` type this returns\n     * a single data URL or an array of data URLs, one for each canvas. When using\n     * `blob` type this returns a `Promise` resolving with an array of `Blob`\n     * instances, one for each canvas.\n     */\n    exportImage(format, quality, type) {\n        if (!format) {\n            format = 'image/png';\n        }\n        if (!quality) {\n            quality = 1;\n        }\n        if (!type) {\n            type = 'dataURL';\n        }\n\n        return this.drawer.getImage(format, quality, type);\n    }\n\n    /**\n     * Cancel any fetch request currently in progress\n     */\n    cancelAjax() {\n        if (this.currentRequest && this.currentRequest.controller) {\n            // If the current request has a ProgressHandler, then its ReadableStream might need to be cancelled too\n            // See: Wavesurfer issue #2042\n            // See Firefox bug: https://bugzilla.mozilla.org/show_bug.cgi?id=1583815\n            if (this.currentRequest._reader) {\n                // Ignoring exceptions thrown by call to cancel()\n                this.currentRequest._reader.cancel().catch(err => {});\n            }\n\n            this.currentRequest.controller.abort();\n            this.currentRequest = null;\n        }\n    }\n\n    /**\n     * @private\n     */\n    clearTmpEvents() {\n        this.tmpEvents.forEach(e => e.un());\n    }\n\n    /**\n     * Display empty waveform.\n     */\n    empty() {\n        if (!this.backend.isPaused()) {\n            this.stop();\n            this.backend.disconnectSource();\n        }\n        this.isReady = false;\n        this.cancelAjax();\n        this.clearTmpEvents();\n\n        // empty drawer\n        this.drawer.progress(0);\n        this.drawer.setWidth(0);\n        this.drawer.drawPeaks({ length: this.drawer.getWidth() }, 0);\n    }\n\n    /**\n     * Remove events, elements and disconnect WebAudio nodes.\n     *\n     * @emits WaveSurfer#destroy\n     */\n    destroy() {\n        this.destroyAllPlugins();\n        this.fireEvent('destroy');\n        this.cancelAjax();\n        this.clearTmpEvents();\n        this.unAll();\n        if (this.params.responsive !== false) {\n            window.removeEventListener('resize', this._onResize, true);\n            window.removeEventListener(\n                'orientationchange',\n                this._onResize,\n                true\n            );\n        }\n        if (this.backend) {\n            this.backend.destroy();\n            // clears memory usage\n            this.backend = null;\n        }\n        if (this.drawer) {\n            this.drawer.destroy();\n        }\n        this.isDestroyed = true;\n        this.isReady = false;\n        this.arraybuffer = null;\n    }\n}\n", "import * as util from './util';\n\n// using constants to prevent someone writing the string wrong\nconst PLAYING = 'playing';\nconst PAUSED = 'paused';\nconst FINISHED = 'finished';\n\n/**\n * WebAudio backend\n *\n * @extends {util.Observer}\n */\nexport default class WebAudio extends util.Observer {\n    /** audioContext: allows to process audio with WebAudio API */\n    audioContext = null;\n    /** @private */\n    stateBehaviors = {\n        [PLAYING]: {\n            init() {\n                this.addOnAudioProcess();\n            },\n            getPlayedPercents() {\n                const duration = this.getDuration();\n                return this.getCurrentTime() / duration || 0;\n            },\n            getCurrentTime() {\n                return this.startPosition + this.getPlayedTime();\n            }\n        },\n        [PAUSED]: {\n            init() {\n            },\n            getPlayedPercents() {\n                const duration = this.getDuration();\n                return this.getCurrentTime() / duration || 0;\n            },\n            getCurrentTime() {\n                return this.startPosition;\n            }\n        },\n        [FINISHED]: {\n            init() {\n                this.fireEvent('finish');\n            },\n            getPlayedPercents() {\n                return 1;\n            },\n            getCurrentTime() {\n                return this.getDuration();\n            }\n        }\n    };\n\n    /**\n     * Does the browser support this backend\n     *\n     * @return {boolean} Whether or not this browser supports this backend\n     */\n    supportsWebAudio() {\n        return !!(window.AudioContext || window.webkitAudioContext);\n    }\n\n    /**\n     * Get the audio context used by this backend or create one\n     *\n     * @return {AudioContext} Existing audio context, or creates a new one\n     */\n    getAudioContext() {\n        if (!window.WaveSurferAudioContext) {\n            window.WaveSurferAudioContext = new (window.AudioContext ||\n                window.webkitAudioContext)();\n        }\n        return window.WaveSurferAudioContext;\n    }\n\n    /**\n     * Get the offline audio context used by this backend or create one\n     *\n     * @param {number} sampleRate The sample rate to use\n     * @return {OfflineAudioContext} Existing offline audio context, or creates\n     * a new one\n     */\n    getOfflineAudioContext(sampleRate) {\n        if (!window.WaveSurferOfflineAudioContext) {\n            window.WaveSurferOfflineAudioContext = new (window.OfflineAudioContext ||\n                window.webkitOfflineAudioContext)(1, 2, sampleRate);\n        }\n        return window.WaveSurferOfflineAudioContext;\n    }\n\n    /**\n     * Construct the backend\n     *\n     * @param {WavesurferParams} params Wavesurfer parameters\n     */\n    constructor(params) {\n        super();\n        /** @private */\n        this.params = params;\n        /** ac: Audio Context instance */\n        this.ac =\n            params.audioContext ||\n            (this.supportsWebAudio() ? this.getAudioContext() : {});\n        /**@private */\n        this.lastPlay = this.ac.currentTime;\n        /** @private */\n        this.startPosition = 0;\n        /** @private */\n        this.scheduledPause = null;\n        /** @private */\n        this.states = {\n            [PLAYING]: Object.create(this.stateBehaviors[PLAYING]),\n            [PAUSED]: Object.create(this.stateBehaviors[PAUSED]),\n            [FINISHED]: Object.create(this.stateBehaviors[FINISHED])\n        };\n        /** @private */\n        this.buffer = null;\n        /** @private */\n        this.filters = [];\n        /** gainNode: allows to control audio volume */\n        this.gainNode = null;\n        /** @private */\n        this.mergedPeaks = null;\n        /** @private */\n        this.offlineAc = null;\n        /** @private */\n        this.peaks = null;\n        /** @private */\n        this.playbackRate = 1;\n        /** analyser: provides audio analysis information */\n        this.analyser = null;\n        /** scriptNode: allows processing audio */\n        this.scriptNode = null;\n        /** @private */\n        this.source = null;\n        /** @private */\n        this.splitPeaks = [];\n        /** @private */\n        this.state = null;\n        /** @private */\n        this.explicitDuration = params.duration;\n        /** @private */\n        this.sinkStreamDestination = null;\n        /** @private */\n        this.sinkAudioElement = null;\n        /**\n         * Boolean indicating if the backend was destroyed.\n         */\n        this.destroyed = false;\n    }\n\n    /**\n     * Initialise the backend, called in `wavesurfer.createBackend()`\n     */\n    init() {\n        this.createVolumeNode();\n        this.createScriptNode();\n        this.createAnalyserNode();\n\n        this.setState(PAUSED);\n        this.setPlaybackRate(this.params.audioRate);\n        this.setLength(0);\n    }\n\n    /** @private */\n    disconnectFilters() {\n        if (this.filters) {\n            this.filters.forEach(filter => {\n                filter && filter.disconnect();\n            });\n            this.filters = null;\n            // Reconnect direct path\n            this.analyser.connect(this.gainNode);\n        }\n    }\n\n    /**\n     * @private\n     *\n     * @param {string} state The new state\n     */\n    setState(state) {\n        if (this.state !== this.states[state]) {\n            this.state = this.states[state];\n            this.state.init.call(this);\n        }\n    }\n\n    /**\n     * Unpacked `setFilters()`\n     *\n     * @param {...AudioNode} filters One or more filters to set\n     */\n    setFilter(...filters) {\n        this.setFilters(filters);\n    }\n\n    /**\n     * Insert custom Web Audio nodes into the graph\n     *\n     * @param {AudioNode[]} filters Packed filters array\n     * @example\n     * const lowpass = wavesurfer.backend.ac.createBiquadFilter();\n     * wavesurfer.backend.setFilter(lowpass);\n     */\n    setFilters(filters) {\n        // Remove existing filters\n        this.disconnectFilters();\n\n        // Insert filters if filter array not empty\n        if (filters && filters.length) {\n            this.filters = filters;\n\n            // Disconnect direct path before inserting filters\n            this.analyser.disconnect();\n\n            // Connect each filter in turn\n            filters\n                .reduce((prev, curr) => {\n                    prev.connect(curr);\n                    return curr;\n                }, this.analyser)\n                .connect(this.gainNode);\n        }\n    }\n    /** Create ScriptProcessorNode to process audio */\n    createScriptNode() {\n        if (this.params.audioScriptProcessor) {\n            this.scriptNode = this.params.audioScriptProcessor;\n            this.scriptNode.connect(this.ac.destination);\n        }\n    }\n\n    /** @private */\n    addOnAudioProcess() {\n        const loop = () => {\n            const time = this.getCurrentTime();\n\n            if (time >= this.getDuration() && this.state !== this.states[FINISHED]) {\n                this.setState(FINISHED);\n                this.fireEvent('pause');\n            } else if (time >= this.scheduledPause && this.state !== this.states[PAUSED]) {\n                this.pause();\n            } else if (this.state === this.states[PLAYING]) {\n                this.fireEvent('audioprocess', time);\n                util.frame(loop)();\n            }\n        };\n\n        loop();\n    }\n\n    /** Create analyser node to perform audio analysis */\n    createAnalyserNode() {\n        this.analyser = this.ac.createAnalyser();\n        this.analyser.connect(this.gainNode);\n    }\n\n    /**\n     * Create the gain node needed to control the playback volume.\n     *\n     */\n    createVolumeNode() {\n        // Create gain node using the AudioContext\n        if (this.ac.createGain) {\n            this.gainNode = this.ac.createGain();\n        } else {\n            this.gainNode = this.ac.createGainNode();\n        }\n        // Add the gain node to the graph\n        this.gainNode.connect(this.ac.destination);\n    }\n\n    /**\n     * Set the sink id for the media player\n     *\n     * @param {string} deviceId String value representing audio device id.\n     * @returns {Promise} A Promise that resolves to `undefined` when there\n     * are no errors.\n     */\n    setSinkId(deviceId) {\n        if (deviceId) {\n            /**\n             * The webaudio API doesn't currently support setting the device\n             * output. Here we create an HTMLAudioElement, connect the\n             * webaudio stream to that element and setSinkId there.\n             */\n            if (!this.sinkAudioElement) {\n                this.sinkAudioElement = new window.Audio();\n                // autoplay is necessary since we're not invoking .play()\n                this.sinkAudioElement.autoplay = true;\n            }\n            if (!this.sinkAudioElement.setSinkId) {\n                return Promise.reject(\n                    new Error('setSinkId is not supported in your browser')\n                );\n            }\n            if (!this.sinkStreamDestination) {\n                this.sinkStreamDestination = this.ac.createMediaStreamDestination();\n            }\n            this.gainNode.disconnect();\n            this.gainNode.connect(this.sinkStreamDestination);\n            this.sinkAudioElement.srcObject = this.sinkStreamDestination.stream;\n\n            return this.sinkAudioElement.setSinkId(deviceId);\n        } else {\n            return Promise.reject(new Error('Invalid deviceId: ' + deviceId));\n        }\n    }\n\n    /**\n     * Set the audio volume\n     *\n     * @param {number} value A floating point value between 0 and 1.\n     */\n    setVolume(value) {\n        this.gainNode.gain.setValueAtTime(value, this.ac.currentTime);\n    }\n\n    /**\n     * Get the current volume\n     *\n     * @return {number} value A floating point value between 0 and 1.\n     */\n    getVolume() {\n        return this.gainNode.gain.value;\n    }\n\n    /**\n     * Decode an array buffer and pass data to a callback\n     *\n     * @private\n     * @param {ArrayBuffer} arraybuffer The array buffer to decode\n     * @param {function} callback The function to call on complete.\n     * @param {function} errback The function to call on error.\n     */\n    decodeArrayBuffer(arraybuffer, callback, errback) {\n        if (!this.offlineAc) {\n            this.offlineAc = this.getOfflineAudioContext(\n                this.ac && this.ac.sampleRate ? this.ac.sampleRate : 44100\n            );\n        }\n        if ('webkitAudioContext' in window) {\n            // Safari: no support for Promise-based decodeAudioData enabled\n            // Enable it in Safari using the Experimental Features > Modern WebAudio API option\n            this.offlineAc.decodeAudioData(\n                arraybuffer,\n                data => callback(data),\n                errback\n            );\n        } else {\n            this.offlineAc.decodeAudioData(arraybuffer).then(\n                (data) => callback(data)\n            ).catch(\n                (err) => errback(err)\n            );\n        }\n    }\n\n    /**\n     * Set pre-decoded peaks\n     *\n     * @param {number[]|Number.<Array[]>} peaks Peaks data\n     * @param {?number} duration Explicit duration\n     */\n    setPeaks(peaks, duration) {\n        if (duration != null) {\n            this.explicitDuration = duration;\n        }\n        this.peaks = peaks;\n    }\n\n    /**\n     * Set the rendered length (different from the length of the audio)\n     *\n     * @param {number} length The rendered length\n     */\n    setLength(length) {\n        // No resize, we can preserve the cached peaks.\n        if (this.mergedPeaks && length == 2 * this.mergedPeaks.length - 1 + 2) {\n            return;\n        }\n\n        this.splitPeaks = [];\n        this.mergedPeaks = [];\n        // Set the last element of the sparse array so the peak arrays are\n        // appropriately sized for other calculations.\n        const channels = this.buffer ? this.buffer.numberOfChannels : 1;\n        let c;\n        for (c = 0; c < channels; c++) {\n            this.splitPeaks[c] = [];\n            this.splitPeaks[c][2 * (length - 1)] = 0;\n            this.splitPeaks[c][2 * (length - 1) + 1] = 0;\n        }\n        this.mergedPeaks[2 * (length - 1)] = 0;\n        this.mergedPeaks[2 * (length - 1) + 1] = 0;\n    }\n\n    /**\n     * Compute the max and min value of the waveform when broken into <length> subranges.\n     *\n     * @param {number} length How many subranges to break the waveform into.\n     * @param {number} first First sample in the required range.\n     * @param {number} last Last sample in the required range.\n     * @return {number[]|Number.<Array[]>} Array of 2*<length> peaks or array of arrays of\n     * peaks consisting of (max, min) values for each subrange.\n     */\n    getPeaks(length, first, last) {\n        if (this.peaks) {\n            return this.peaks;\n        }\n        if (!this.buffer) {\n            return [];\n        }\n\n        first = first || 0;\n        last = last || length - 1;\n\n        this.setLength(length);\n\n        if (!this.buffer) {\n            return this.params.splitChannels\n                ? this.splitPeaks\n                : this.mergedPeaks;\n        }\n\n        /**\n         * The following snippet fixes a buffering data issue on the Safari\n         * browser which returned undefined It creates the missing buffer based\n         * on 1 channel, 4096 samples and the sampleRate from the current\n         * webaudio context 4096 samples seemed to be the best fit for rendering\n         * will review this code once a stable version of Safari TP is out\n         */\n        if (!this.buffer.length) {\n            const newBuffer = this.createBuffer(1, 4096, this.sampleRate);\n            this.buffer = newBuffer.buffer;\n        }\n\n        const sampleSize = this.buffer.length / length;\n        const sampleStep = ~~(sampleSize / 10) || 1;\n        const channels = this.buffer.numberOfChannels;\n        let c;\n\n        for (c = 0; c < channels; c++) {\n            const peaks = this.splitPeaks[c];\n            const chan = this.buffer.getChannelData(c);\n            let i;\n\n            for (i = first; i <= last; i++) {\n                const start = ~~(i * sampleSize);\n                const end = ~~(start + sampleSize);\n                /**\n                 * Initialize the max and min to the first sample of this\n                 * subrange, so that even if the samples are entirely\n                 * on one side of zero, we still return the true max and\n                 * min values in the subrange.\n                 */\n                let min = chan[start];\n                let max = min;\n                let j;\n\n                for (j = start; j < end; j += sampleStep) {\n                    const value = chan[j];\n\n                    if (value > max) {\n                        max = value;\n                    }\n\n                    if (value < min) {\n                        min = value;\n                    }\n                }\n\n                peaks[2 * i] = max;\n                peaks[2 * i + 1] = min;\n\n                if (c == 0 || max > this.mergedPeaks[2 * i]) {\n                    this.mergedPeaks[2 * i] = max;\n                }\n\n                if (c == 0 || min < this.mergedPeaks[2 * i + 1]) {\n                    this.mergedPeaks[2 * i + 1] = min;\n                }\n            }\n        }\n\n        return this.params.splitChannels ? this.splitPeaks : this.mergedPeaks;\n    }\n\n    /**\n     * Get the position from 0 to 1\n     *\n     * @return {number} Position\n     */\n    getPlayedPercents() {\n        return this.state.getPlayedPercents.call(this);\n    }\n\n    /** @private */\n    disconnectSource() {\n        if (this.source) {\n            this.source.disconnect();\n        }\n    }\n    /**\n     * Destroy all references with WebAudio, disconnecting audio nodes and closing Audio Context\n     */\n    destroyWebAudio() {\n        this.disconnectFilters();\n        this.disconnectSource();\n        this.gainNode.disconnect();\n        this.scriptNode && this.scriptNode.disconnect();\n        this.analyser.disconnect();\n\n        // close the audioContext if closeAudioContext option is set to true\n        if (this.params.closeAudioContext) {\n            // check if browser supports AudioContext.close()\n            if (\n                typeof this.ac.close === 'function' &&\n                this.ac.state != 'closed'\n            ) {\n                this.ac.close();\n            }\n            // clear the reference to the audiocontext\n            this.ac = null;\n            // clear the actual audiocontext, either passed as param or the\n            // global singleton\n            if (!this.params.audioContext) {\n                window.WaveSurferAudioContext = null;\n            } else {\n                this.params.audioContext = null;\n            }\n            // clear the offlineAudioContext\n            window.WaveSurferOfflineAudioContext = null;\n        }\n\n        // disconnect resources used by setSinkId\n        if (this.sinkStreamDestination) {\n            this.sinkAudioElement.pause();\n            this.sinkAudioElement.srcObject = null;\n            this.sinkStreamDestination.disconnect();\n            this.sinkStreamDestination = null;\n        }\n    }\n    /**\n     * This is called when wavesurfer is destroyed\n     */\n    destroy() {\n        if (!this.isPaused()) {\n            this.pause();\n        }\n        this.unAll();\n        this.buffer = null;\n        this.destroyed = true;\n\n        this.destroyWebAudio();\n    }\n\n    /**\n     * Loaded a decoded audio buffer\n     *\n     * @param {Object} buffer Decoded audio buffer to load\n     */\n    load(buffer) {\n        this.startPosition = 0;\n        this.lastPlay = this.ac.currentTime;\n        this.buffer = buffer;\n        this.createSource();\n    }\n\n    /** @private */\n    createSource() {\n        this.disconnectSource();\n        this.source = this.ac.createBufferSource();\n\n        // adjust for old browsers\n        this.source.start = this.source.start || this.source.noteGrainOn;\n        this.source.stop = this.source.stop || this.source.noteOff;\n\n        this.setPlaybackRate(this.playbackRate);\n        this.source.buffer = this.buffer;\n        this.source.connect(this.analyser);\n    }\n\n    /**\n     * @private\n     *\n     * some browsers require an explicit call to #resume before they will play back audio\n     */\n    resumeAudioContext() {\n        if (this.ac.state == 'suspended') {\n            this.ac.resume && this.ac.resume();\n        }\n    }\n\n    /**\n     * Used by `wavesurfer.isPlaying()` and `wavesurfer.playPause()`\n     *\n     * @return {boolean} Whether or not this backend is currently paused\n     */\n    isPaused() {\n        return this.state !== this.states[PLAYING];\n    }\n\n    /**\n     * Used by `wavesurfer.getDuration()`\n     *\n     * @return {number} Duration of loaded buffer\n     */\n    getDuration() {\n        if (this.explicitDuration) {\n            return this.explicitDuration;\n        }\n        if (!this.buffer) {\n            return 0;\n        }\n        return this.buffer.duration;\n    }\n\n    /**\n     * Used by `wavesurfer.seekTo()`\n     *\n     * @param {number} start Position to start at in seconds\n     * @param {number} end Position to end at in seconds\n     * @return {{start: number, end: number}} Object containing start and end\n     * positions\n     */\n    seekTo(start, end) {\n        if (!this.buffer) {\n            return;\n        }\n\n        this.scheduledPause = null;\n\n        if (start == null) {\n            start = this.getCurrentTime();\n            if (start >= this.getDuration()) {\n                start = 0;\n            }\n        }\n        if (end == null) {\n            end = this.getDuration();\n        }\n\n        this.startPosition = start;\n        this.lastPlay = this.ac.currentTime;\n\n        if (this.state === this.states[FINISHED]) {\n            this.setState(PAUSED);\n        }\n\n        return {\n            start: start,\n            end: end\n        };\n    }\n\n    /**\n     * Get the playback position in seconds\n     *\n     * @return {number} The playback position in seconds\n     */\n    getPlayedTime() {\n        return (this.ac.currentTime - this.lastPlay) * this.playbackRate;\n    }\n\n    /**\n     * Plays the loaded audio region.\n     *\n     * @param {number} start Start offset in seconds, relative to the beginning\n     * of a clip.\n     * @param {number} end When to stop relative to the beginning of a clip.\n     */\n    play(start, end) {\n        if (!this.buffer) {\n            return;\n        }\n\n        // need to re-create source on each playback\n        this.createSource();\n\n        const adjustedTime = this.seekTo(start, end);\n\n        start = adjustedTime.start;\n        end = adjustedTime.end;\n\n        this.scheduledPause = end;\n\n        this.source.start(0, start);\n\n        this.resumeAudioContext();\n\n        this.setState(PLAYING);\n\n        this.fireEvent('play');\n    }\n\n    /**\n     * Pauses the loaded audio.\n     */\n    pause() {\n        this.scheduledPause = null;\n\n        this.startPosition += this.getPlayedTime();\n        try {\n            this.source && this.source.stop(0);\n        } catch (err) {\n            // Calling stop can throw the following 2 errors:\n            // - RangeError (The value specified for when is negative.)\n            // - InvalidStateNode (The node has not been started by calling start().)\n            // We can safely ignore both errors, because:\n            // - The range is surely correct\n            // - The node might not have been started yet, in which case we just want to carry on without causing any trouble.\n        }\n\n        this.setState(PAUSED);\n\n        this.fireEvent('pause');\n    }\n\n    /**\n     * Returns the current time in seconds relative to the audio-clip's\n     * duration.\n     *\n     * @return {number} The current time in seconds\n     */\n    getCurrentTime() {\n        return this.state.getCurrentTime.call(this);\n    }\n\n    /**\n     * Returns the current playback rate. (0=no playback, 1=normal playback)\n     *\n     * @return {number} The current playback rate\n     */\n    getPlaybackRate() {\n        return this.playbackRate;\n    }\n\n    /**\n     * Set the audio source playback rate.\n     *\n     * @param {number} value The playback rate to use\n     */\n    setPlaybackRate(value) {\n        this.playbackRate = value || 1;\n        this.source && this.source.playbackRate.setValueAtTime(\n            this.playbackRate,\n            this.ac.currentTime\n        );\n    }\n\n    /**\n     * Set a point in seconds for playback to stop at.\n     *\n     * @param {number} end Position to end at\n     * @version 3.3.0\n     */\n    setPlayEnd(end) {\n        this.scheduledPause = end;\n    }\n}\n", "/**\n * Returns a function, that, as long as it continues to be invoked, will not\n * be triggered. The function will be called after it stops being called for\n * N milliseconds. If `immediate` is passed, trigger the function on the\n * leading edge, instead of the trailing. The function also has a property 'clear' \n * that is a function which will clear the timer to prevent previously scheduled executions. \n *\n * @source underscore.js\n * @see http://unscriptable.com/2009/03/20/debouncing-javascript-methods/\n * @param {Function} function to wrap\n * @param {Number} timeout in ms (`100`)\n * @param {Boolean} whether to execute at the beginning (`false`)\n * @api public\n */\nfunction debounce(func, wait, immediate){\n  var timeout, args, context, timestamp, result;\n  if (null == wait) wait = 100;\n\n  function later() {\n    var last = Date.now() - timestamp;\n\n    if (last < wait && last >= 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n      if (!immediate) {\n        result = func.apply(context, args);\n        context = args = null;\n      }\n    }\n  };\n\n  var debounced = function(){\n    context = this;\n    args = arguments;\n    timestamp = Date.now();\n    var callNow = immediate && !timeout;\n    if (!timeout) timeout = setTimeout(later, wait);\n    if (callNow) {\n      result = func.apply(context, args);\n      context = args = null;\n    }\n\n    return result;\n  };\n\n  debounced.clear = function() {\n    if (timeout) {\n      clearTimeout(timeout);\n      timeout = null;\n    }\n  };\n  \n  debounced.flush = function() {\n    if (timeout) {\n      result = func.apply(context, args);\n      context = args = null;\n      \n      clearTimeout(timeout);\n      timeout = null;\n    }\n  };\n\n  return debounced;\n};\n\n// Adds compatibility for ES modules\ndebounce.debounce = debounce;\n\nmodule.exports = debounce;\n", "// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n", "", "// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/wavesurfer.js\");\n", "", "var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { useEffect, useRef, useState } from \"react\";\nimport useRegionEvent from \"../hooks/useRegionEvent\";\nimport useWavesurferContext from \"../hooks/useWavesurferContext\";\nimport { UpdatableRegionProps } from \"../constants/updatableRegionProps\";\nexport const Region = (_a) => {\n    var { onOver, onLeave, onClick, onDoubleClick, onIn, onOut, onRemove, onUpdate, onUpdateEnd } = _a, props = __rest(_a, [\"onOver\", \"onLeave\", \"onClick\", \"onDoubleClick\", \"onIn\", \"onOut\", \"onRemove\", \"onUpdate\", \"onUpdateEnd\"]);\n    const waveSurfer = useWavesurferContext();\n    const isRenderedCache = useRef(false);\n    const [regionRef, setRegionRef] = useState(null);\n    useEffect(() => {\n        return () => {\n            regionRef === null || regionRef === void 0 ? void 0 : regionRef.remove();\n        };\n    }, [regionRef]);\n    useEffect(() => {\n        // If there is a regionRef, then process update on any props update\n        regionRef === null || regionRef === void 0 ? void 0 : regionRef.update(UpdatableRegionProps.reduce((result, prop) => {\n            if (regionRef[prop] !== props[prop]) {\n                return Object.assign(Object.assign({}, result), { [prop]: props[prop] });\n            }\n            return result;\n        }, { id: props.id }));\n    }, UpdatableRegionProps.map((prop) => props[prop]));\n    useEffect(() => {\n        if (!isRenderedCache.current && waveSurfer) {\n            isRenderedCache.current = true;\n            let region;\n            region = waveSurfer.regions.list[props.id];\n            if (!region) {\n                region = waveSurfer.addRegion(props);\n            }\n            setRegionRef(region);\n        }\n        // eslint-disable-next-line\n    }, [waveSurfer]);\n    useRegionEvent(regionRef, \"click\", onClick);\n    useRegionEvent(regionRef, \"mouseenter\", onOver);\n    useRegionEvent(regionRef, \"mouseleave\", onLeave);\n    useRegionEvent(regionRef, \"dblclick\", onDoubleClick);\n    useRegionEvent(regionRef, \"in\", onIn);\n    useRegionEvent(regionRef, \"out\", onOut);\n    useRegionEvent(regionRef, \"remove\", onRemove);\n    useRegionEvent(regionRef, \"update\", onUpdate);\n    useRegionEvent(regionRef, \"update-end\", onUpdateEnd);\n    return null;\n};\nexport default Region;\n", "import { useEffect, useRef } from \"react\";\nconst useRegionEvent = (ref, eventName, callback) => {\n    const callbackRef = useRef(null);\n    useEffect(() => {\n        if (!ref) {\n            return;\n        }\n        if (callback) {\n            callbackRef.current = (...args) => callback(ref, ...args);\n            ref.on(eventName, callbackRef.current);\n        }\n        return () => {\n            callbackRef.current && ref.un(eventName, callbackRef.current);\n            callbackRef.current = null;\n        };\n    }, [ref, eventName, callback]);\n};\nexport default useRegionEvent;\n", "import { createContext } from 'react';\nconst WaveSurferContext = createContext(null);\nexport default WaveSurferContext;\n", "import WaveSurferContext from \"../contexts/WaveSurferContext\";\nimport { useContext } from \"react\";\nexport default function useWavesurferContext() {\n    return useContext(WaveSurferContext);\n}\n", "export const UpdatableRegionProps = [\n    \"start\",\n    \"end\",\n    \"loop\",\n    \"color\",\n    \"handleStyle\",\n    \"resize\",\n    \"drag\",\n    \"drag\",\n    \"end\",\n    \"handleStyle\",\n    \"id\",\n    \"loop\",\n    \"preventContextMenu\",\n    \"resize\",\n    \"start\"\n];\n", "var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { useEffect, useRef } from \"react\";\nimport useWavesurferContext from \"../hooks/useWavesurferContext\";\n// TODO: remove boilerplate in useEffects section, try to update useRegionEvent to support\n//  all kinds of event handling within WaveSurfer ecosystem\nexport default function Marker(_a) {\n    var { onClick, onDrop, onDrag } = _a, data = __rest(_a, [\"onClick\", \"onDrop\", \"onDrag\"]);\n    const ws = useWavesurferContext();\n    // TODO: make some kind of useGetLatestWs...\n    const ws$ = useRef(ws);\n    useEffect(() => {\n        ws$.current = ws;\n    }, [ws]);\n    // This is the only legal/official way to identify marker\n    // inside wavesurfer markers list and\n    // to tie it with Marker component\n    const isRendered = useRef(false);\n    const markerEl = useRef(null);\n    useEffect(() => {\n        if (!ws)\n            return;\n        if (!onClick)\n            return;\n        function handler(marker, event) {\n            if (!markerEl.current)\n                return;\n            if (marker.el !== markerEl.current.el)\n                return;\n            onClick === null || onClick === void 0 ? void 0 : onClick(marker, event);\n        }\n        ws.on(\"marker-click\", handler);\n        return () => {\n            ws.un(\"marker-click\", handler);\n        };\n    }, [ws, onClick]);\n    useEffect(() => {\n        if (!ws)\n            return;\n        if (!onDrag)\n            return;\n        function handler(marker, event) {\n            if (!markerEl.current)\n                return;\n            if (marker.el !== markerEl.current.el)\n                return;\n            onDrag === null || onDrag === void 0 ? void 0 : onDrag(marker, event);\n        }\n        ws.on(\"marker-drag\", handler);\n        return () => {\n            ws.un(\"marker-drag\", handler);\n        };\n    }, [ws, onDrag]);\n    useEffect(() => {\n        if (!ws)\n            return;\n        if (!onDrop)\n            return;\n        function handler(marker, event) {\n            if (!markerEl.current)\n                return;\n            if (marker.el !== markerEl.current.el)\n                return;\n            onDrop === null || onDrop === void 0 ? void 0 : onDrop(marker, event);\n        }\n        ws.on(\"marker-drop\", handler);\n        return () => {\n            ws.un(\"marker-drop\", handler);\n        };\n    }, [ws, onDrop]);\n    useEffect(() => {\n        if (!ws)\n            return;\n        // THERE CAN BE ONLY ONE\n        // ...\n        // ...\n        // ...\n        // marker creation for each Marker component.\n        // If there is a better way, PRs welcome!\n        if (isRendered.current)\n            return;\n        isRendered.current = true;\n        // create marker: marker becomes visible at the same time\n        markerEl.current = ws.addMarker(data);\n    }, [ws]);\n    useEffect(() => {\n        var _a;\n        if (!ws || !markerEl.current || !isRendered.current)\n            return;\n        // Проверяем что изменения реально имели место быть,\n        // но снаружи, а не внутри\n        // На данный момент, меняется только позиция\n        if (data.time === ((_a = markerEl.current) === null || _a === void 0 ? void 0 : _a.time))\n            return;\n        // When wavesurfer will officially make markers fully updatable,\n        // then it will be done in other way, for now it's enough.\n        //\n        // For enthusiasts, it is possible to deep dive into the process of marker creation and make a PR,\n        // that will add full marker update support.\n        // https://wavesurfer-js.org/api/file/src/plugin/markers/index.js.html\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        const marker = ws.markers.markers.find(mark => { var _a; return mark.el === ((_a = markerEl.current) === null || _a === void 0 ? void 0 : _a.el); });\n        if (!marker)\n            return;\n        marker.time = data.time;\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        ws.markers._updateMarkerPosition(Object.assign(Object.assign({}, markerEl.current), { time: data.time }));\n    }, [data === null || data === void 0 ? void 0 : data.time]);\n    // Maybe it will require to create some single source of truth for Markers,\n    // as far as they are working via wavesurfer instance. That's making'em\n    // different from Regions in the way of working.\n    useEffect(() => () => {\n        if (!ws$.current || !markerEl.current)\n            return;\n        const index = ws$.current.markers.markers.findIndex((marker) => {\n            var _a;\n            return marker.el === ((_a = markerEl.current) === null || _a === void 0 ? void 0 : _a.el);\n        });\n        ws$.current.markers.remove(index);\n    }, []);\n    return null;\n}\n", "var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport React, { Children, useMemo } from \"react\";\nimport WaveForm from \"../components/WaveForm\";\nimport WaveSurferContext from \"../contexts/WaveSurferContext\";\nimport getWaveFormOptionsFromProps from \"../utils/getWaveFormOptionsFromProps\";\nimport useWavesurfer from \"../hooks/useWavesurfer\";\nimport isReactElement from \"../utils/isReactElement\";\n// TODO: research on ref usage\nconst WaveSurfer = (_a) => {\n    var { children, plugins = [], onMount } = _a, props = __rest(_a, [\"children\", \"plugins\", \"onMount\"]);\n    // Search for WaveForm component props\n    // it's making new logic compatible with old one\n    const UNSTABLE_waveFormProps = useMemo(() => {\n        let waveformProps = {};\n        Children.forEach(children, (element) => {\n            if (typeof element !== \"object\" || element === null || [\"string\", \"number\"].includes(typeof element)) {\n                return;\n            }\n            // return if child does not have either props, or type\n            if (!isReactElement(element))\n                return;\n            const { props, type: elType } = element;\n            if (elType === WaveForm) {\n                const { id } = props;\n                waveformProps = getWaveFormOptionsFromProps(props);\n                waveformProps = Object.assign(Object.assign({}, waveformProps), { container: \"#\" + id });\n            }\n        });\n        return waveformProps;\n    }, [children]);\n    const wavesurfer = useWavesurfer(Object.assign(Object.assign({ plugins,\n        // TODO: remove in future\n        onMount }, props), UNSTABLE_waveFormProps));\n    return (React.createElement(WaveSurferContext.Provider, { value: wavesurfer }, children));\n};\nWaveSurfer.defaultProps = {\n    children: null,\n    plugins: [],\n};\nexport default WaveSurfer;\n", "import React from \"react\";\nconst WaveForm = ({ id = \"waveform\", children }) => {\n    return React.createElement(\"div\", { id: id }, children);\n};\nexport default WaveForm;\n", "export const waveFormPropsList = [\n    \"audioRate\",\n    \"audioContext\",\n    \"audioScriptProcessor\",\n    \"autoCenter\",\n    \"backend\",\n    \"backgroundColor\",\n    \"barGap\",\n    \"barHeight\",\n    \"barMinHeight\",\n    \"barRadius\",\n    \"barWidth\",\n    \"closeAudioContext\",\n    \"cursorColor\",\n    \"cursorWidth\",\n    \"fillParent\",\n    \"forceDecode\",\n    \"height\",\n    \"hideScrollbar\",\n    \"interact\",\n    \"loopSelection\",\n    \"maxCanvasWidth\",\n    \"mediaControls\",\n    \"mediaType\",\n    \"minPxPerSec\",\n    \"normalize\",\n    \"partialRender\",\n    \"pixelRatio\",\n    \"progressColor\",\n    \"removeMediaElementOnDestroy\",\n    \"renderer\",\n    \"responsive\",\n    \"scrollParent\",\n    \"skipLength\",\n    \"splitChannels\",\n    \"waveColor\",\n    \"autoCenterRate\",\n    \"autoCenterImmediately\",\n    \"drawingContextAttributes\",\n    \"duration\",\n    \"ignoreSilenceMode\",\n    \"rtl\",\n    \"splitChannelsOptions\",\n    \"vertical\",\n    \"xhr\"\n];\nconst getWaveFormOptionsFromProps = (props) => {\n    if (!props)\n        return {};\n    return waveFormPropsList.reduce((waveFormOptions, optionName) => {\n        if (!Object.prototype.hasOwnProperty.call(props, optionName)) {\n            return waveFormOptions;\n        }\n        return Object.assign(Object.assign({}, waveFormOptions), { [optionName]: props[optionName] });\n    }, {});\n};\nexport default getWaveFormOptionsFromProps;\n", "var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { useEffect, useRef, useState } from \"react\";\nimport createWavesurfer from \"../utils/createWavesurfer\";\nimport createPlugin from \"../utils/createPlugin\";\nimport getDifference from \"../utils/getDifference\";\nexport default function useWavesurfer(_a) {\n    var { container, plugins = [], onMount } = _a, props = __rest(_a, [\"container\", \"plugins\", \"onMount\"]);\n    const usedPluginsListCache = useRef([]);\n    const [wavesurfer, setWavesurfer] = useState(null);\n    useEffect(() => {\n        if (!container)\n            return;\n        let _plugins = [];\n        // construct initial plugins list\n        if (plugins) {\n            _plugins = plugins.map(createPlugin);\n        }\n        usedPluginsListCache.current = _plugins;\n        const ws = createWavesurfer(Object.assign(Object.assign({ container }, props), { plugins: _plugins }));\n        onMount === null || onMount === void 0 ? void 0 : onMount(ws);\n        setWavesurfer(ws);\n        return () => {\n            ws.destroy();\n        };\n    }, [container]);\n    // TODO: update waveform appearance\n    // useEffect(() => {}, [props]);\n    // TODO: think about whether its place is this hook?\n    useEffect(() => {\n        if (wavesurfer) {\n            const nextPluginsMap = plugins.map(createPlugin);\n            const { disabled, enabled } = getDifference(usedPluginsListCache.current, nextPluginsMap);\n            usedPluginsListCache.current = nextPluginsMap;\n            disabled.forEach((plugin) => {\n                if (!plugin.name)\n                    return;\n                wavesurfer === null || wavesurfer === void 0 ? void 0 : wavesurfer.destroyPlugin(plugin.name);\n            });\n            enabled.forEach((plugin) => {\n                if (!plugin.name)\n                    return;\n                wavesurfer === null || wavesurfer === void 0 ? void 0 : wavesurfer.addPlugin(plugin).initPlugin(plugin.name);\n            });\n        }\n    }, [plugins]);\n    return wavesurfer;\n}\n", "import WaveSurfer from \"wavesurfer.js\";\nexport default function createWavesurfer(options) {\n    return WaveSurfer.create(options);\n}\nexport { WaveSurfer };\n", "export default function createPlugin(pluginObj) {\n    const { plugin, options, creator = 'create' } = pluginObj;\n    const createMethod = plugin[creator];\n    if (!plugin)\n        throw new Error(`Please pass a valid plugin in plugin list`);\n    if (!creator)\n        throw new Error(`Please pass the creator function name in 'creator' property.`);\n    if (typeof createMethod !== 'function') {\n        throw new Error(`\"${creator}\" is not callable on given plugin. Please pass a valid 'creator' in plugins list.`);\n    }\n    return createMethod(options);\n}\n", "const getDifference = (arr1, arr2) => {\n    const nextArr1 = [...arr1];\n    const nextArr2 = [...arr2];\n    const disabled = nextArr1.filter(item => nextArr2.findIndex((nextItem) => nextItem.name === item.name) === -1);\n    const enabled = nextArr2.filter(item => nextArr1.findIndex(nextItem => nextItem.name === item.name) === -1);\n    return { disabled, enabled };\n    // map arr2 via reduce and remove each item, which name exists in arr1\n};\nexport default getDifference;\n", "export default function isReactElement(el) {\n    return !!el && typeof el !== \"string\" && typeof el !== \"number\" && typeof el !== \"boolean\" && \"type\" in el && \"props\" in el;\n}\n"],
  "mappings": ";;;;;;;;;AAAA,KAAA,SAAA,iCAAA,MAAA,SAAA;AACA,UAAA,OAAA,YAAA,YAAA,OAAA,WAAA;AACA,eAAA,UAAA,QAAA;eACA,OAAA,WAAA,cAAA,OAAA;AACA,eAAA,cAAA,CAAA,GAAA,OAAA;eACA,OAAA,YAAA;AACA,gBAAA,YAAA,IAAA,QAAA;;AAEA,aAAA,YAAA,IAAA,QAAA;IACA,GAAC,MAAA,MAAA;AACD;;SAAA,MAAA;;;;;;;;;;;;;;ACNA,oBAAAA,SAAAC,uBAAAC;;kBAAA;gBAAA,CAAA;AACA,oBAAAC,SAAAF,uBAAAC;;kBAAA;gBAAA,CAAA;AAAkC,yBAAAD,uBAAAG,KAAA;AAAA,yBAAAA,OAAAA,IAAAC,aAAAD,MAAA,EAAAE,SAAAF,IAAA;gBAAA;AAAA,yBAAAG,QAAAH,KAAA;AAAA;AAAA,yBAAAG,UAAA,cAAA,OAAAC,UAAA,YAAA,OAAAA,OAAAC,WAAA,SAAAL,MAAA;AAAA,2BAAA,OAAAA;kBAAA,IAAA,SAAAA,MAAA;AAAA,2BAAAA,QAAA,cAAA,OAAAI,UAAAJ,KAAAM,gBAAAF,UAAAJ,SAAAI,OAAAG,YAAA,WAAA,OAAAP;kBAAA,GAAAG,QAAAH,GAAA;gBAAA;AAAA,yBAAAQ,gBAAAC,UAAAC,aAAA;AAAA,sBAAA,EAAAD,oBAAAC,cAAA;AAAA,0BAAA,IAAAC,UAAA,mCAAA;kBAAA;gBAAA;AAAA,yBAAAC,kBAAAC,QAAAC,OAAA;AAAA,2BAAAC,IAAA,GAAAA,IAAAD,MAAAE,QAAAD,KAAA;AAAA,wBAAAE,aAAAH,MAAAC,CAAA;AAAAE,+BAAAC,aAAAD,WAAAC,cAAA;AAAAD,+BAAAE,eAAA;AAAA,wBAAA,WAAAF;AAAAA,iCAAAG,WAAA;AAAAC,2BAAAC,eAAAT,QAAAU,eAAAN,WAAAO,GAAA,GAAAP,UAAA;kBAAA;gBAAA;AAAA,yBAAAQ,aAAAf,aAAAgB,YAAAC,aAAA;AAAA,sBAAAD;AAAAd,sCAAAF,YAAAH,WAAAmB,UAAA;AAAA,sBAAAC;AAAAf,sCAAAF,aAAAiB,WAAA;AAAAN,yBAAAC,eAAAZ,aAAA,aAAA,EAAAU,UAAA,MAAA,CAAA;AAAA,yBAAAV;gBAAA;AAAA,yBAAAa,eAAAK,KAAA;AAAA,sBAAAJ,MAAAK,aAAAD,KAAA,QAAA;AAAA,yBAAAzB,QAAAqB,GAAA,MAAA,WAAAA,MAAAM,OAAAN,GAAA;gBAAA;AAAA,yBAAAK,aAAAE,OAAAC,MAAA;AAAA,sBAAA7B,QAAA4B,KAAA,MAAA,YAAAA,UAAA;AAAA,2BAAAA;AAAA,sBAAAE,OAAAF,MAAA3B,OAAA8B,WAAA;AAAA,sBAAAD,SAAAE,QAAA;AAAA,wBAAAC,MAAAH,KAAAI,KAAAN,OAAAC,QAAA,SAAA;AAAA,wBAAA7B,QAAAiC,GAAA,MAAA;AAAA,6BAAAA;AAAA,0BAAA,IAAAzB,UAAA,8CAAA;kBAAA;AAAA,0BAAAqB,SAAA,WAAAF,SAAAQ,QAAAP,KAAA;gBAAA;AAElC,oBAOqBQ,cAAW,WAAA;AAC5B,2BAAAA,eAAc;AAAA/B,oCAAA,MAAA+B,YAAA;AAMV,yBAAKC,OAAO;AAMZ,yBAAKC,UAAU;AAMf,yBAAKC,WAAW;AAMhB,yBAAKC,cAAc;AAMnB,yBAAKC,QAAQ;AAMb,yBAAKC,MAAM;AAMX,yBAAKC,MAAK,GAAAC,OAAAA,SACN,OAAO,KAAKzC,YAAY0C,SAAS,cAC3B,KAAK1C,YAAY0C,KAAKC,YAAW,IAAK,MACtC,cAAc;AAOxB,yBAAKC,0BAA0B,CAAC;kBACpC;AAEAzB,+BAAAc,cAAA,CAAA;oBAAAf,KAAA;oBAAA2B,OAKA,SAAAC,SAASC,SAAS;AACd,2BAAKb,OAAOa;AACZ,2BAAKZ,UAAU,KAAKD,KAAKc,WAAW,MAAM,KAAKJ,uBAAuB;oBAC1E;;;;;;;kBAEA,GAAA;oBAAA1B,KAAA;oBAAA2B,OAMA,SAAAI,aAAaF,SAAS;AAClB,2BAAKX,WAAWW;AAChB,2BAAKV,cAAc,KAAKD,SAASY,WAC7B,MACA,KAAKJ,uBAAuB;oBAEpC;;;;;;;;;kBAEA,GAAA;oBAAA1B,KAAA;oBAAA2B,OAQA,SAAAK,iBAAiBC,cAAcC,YAAYC,OAAOC,QAAQ;AAGtD,2BAAKhB,QAAQ,KAAKJ,KAAKqB,aAAaH,cAAc;AAClD,2BAAKb,MAAM,KAAKD,QAAQa,eAAeC;AAGvC,2BAAKlB,KAAKmB,QAAQA;AAClB,2BAAKnB,KAAKoB,SAASA;AACnB,0BAAIE,cAAc;wBAAEH,OAAOF,eAAe;sBAAK;AAC/C,uBAAA,GAAAM,OAAAA,SAAM,KAAKvB,MAAMsB,WAAW;AAE5B,0BAAI,KAAKE,mBAAmB;AAExB,6BAAKtB,SAASiB,QAAQA;AACtB,6BAAKjB,SAASkB,SAASA;AACvB,yBAAA,GAAAG,OAAAA,SAAM,KAAKrB,UAAUoB,WAAW;sBACpC;oBACJ;;;;kBAEA,GAAA;oBAAAtC,KAAA;oBAAA2B,OAGA,SAAAc,YAAY;AAER,2BAAKxB,QAAQyB,UACT,GACA,GACA,KAAKzB,QAAQ0B,OAAOR,OACpB,KAAKlB,QAAQ0B,OAAOP,MAAM;AAI9B,0BAAI,KAAKI,mBAAmB;AACxB,6BAAKrB,YAAYuB,UACb,GACA,GACA,KAAKvB,YAAYwB,OAAOR,OACxB,KAAKhB,YAAYwB,OAAOP,MAAM;sBAEtC;oBACJ;;;;;;;;kBAEA,GAAA;oBAAApC,KAAA;oBAAA2B,OAOA,SAAAiB,cAAcC,WAAWC,eAAe;AACpC,2BAAK7B,QAAQ8B,YAAY,KAAKC,aAAa,KAAK/B,SAAS4B,SAAS;AAElE,0BAAI,KAAKL,mBAAmB;AACxB,6BAAKrB,YAAY4B,YAAY,KAAKC,aAAa,KAAK7B,aAAa2B,aAAa;sBAClF;oBACJ;;;;;;;;;;;;;;;;kBAEA,GAAA;oBAAA9C,KAAA;oBAAA2B,OAeA,SAAAqB,aAAaC,KAAKC,OAAO;AACrB,0BAAI,OAAOA,SAAS,YAAYA,iBAAiBC,gBAAgB;AAC7D,+BAAOD;sBACX;AAEA,0BAAME,eAAeH,IAAII,qBAAqB,GAAG,GAAG,GAAGJ,IAAIN,OAAOP,MAAM;AACxEc,4BAAMI,QAAQ,SAAC3B,OAAO4B,OAAK;AAAA,+BAAKH,aAAaI,aAAcD,QAAQL,MAAM1D,QAASmC,KAAK;sBAAC,CAAA;AAExF,6BAAOyB;oBACX;;;;;;kBAEA,GAAA;oBAAApD,KAAA;oBAAA2B,OAKA,SAAA8B,sBAAsBC,UAAU;AAC5B,0BAAIA,UAAU;AAEV,6BAAKzC,QAAQ0C,aAAa,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAE1C,4BAAI,KAAKnB,mBAAmB;AACxB,+BAAKrB,YAAYwC,aAAa,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;wBAClD;sBACJ;oBACJ;;;;;;;;;;kBAEA,GAAA;oBAAA3D,KAAA;oBAAA2B,OASA,SAAAiC,UAAUC,GAAGC,GAAG3B,OAAOC,QAAQ2B,QAAQ;AACnC,2BAAKC,kBAAkB,KAAK/C,SAAS4C,GAAGC,GAAG3B,OAAOC,QAAQ2B,MAAM;AAEhE,0BAAI,KAAKvB,mBAAmB;AACxB,6BAAKwB,kBACD,KAAK7C,aACL0C,GACAC,GACA3B,OACAC,QACA2B,MAAM;sBAEd;oBACJ;;;;;;;;;;;kBAEA,GAAA;oBAAA/D,KAAA;oBAAA2B,OAUA,SAAAqC,kBAAkBf,KAAKY,GAAGC,GAAG3B,OAAOC,QAAQ2B,QAAQ;AAChD,0BAAI,CAACd,KAAK;AACN;sBACJ;AAEA,0BAAIc,QAAQ;AACR,6BAAKE,gBAAgBhB,KAAKY,GAAGC,GAAG3B,OAAOC,QAAQ2B,MAAM;sBACzD,OAAO;AACHd,4BAAIiB,SAASL,GAAGC,GAAG3B,OAAOC,MAAM;sBACpC;oBACJ;;;;;;;;;;;;;;kBAEA,GAAA;oBAAApC,KAAA;oBAAA2B,OAaA,SAAAsC,gBAAgBhB,KAAKY,GAAGC,GAAG3B,OAAOC,QAAQ2B,QAAQ;AAC9C,0BAAI3B,WAAW,GAAG;AACd;sBACJ;AAGA,0BAAIA,SAAS,GAAG;AACZA,kCAAU;AACV0B,6BAAK1B;sBACT;AACAa,0BAAIkB,UAAS;AACblB,0BAAImB,OAAOP,IAAIE,QAAQD,CAAC;AACxBb,0BAAIoB,OAAOR,IAAI1B,QAAQ4B,QAAQD,CAAC;AAChCb,0BAAIqB,iBAAiBT,IAAI1B,OAAO2B,GAAGD,IAAI1B,OAAO2B,IAAIC,MAAM;AACxDd,0BAAIoB,OAAOR,IAAI1B,OAAO2B,IAAI1B,SAAS2B,MAAM;AACzCd,0BAAIqB,iBACAT,IAAI1B,OACJ2B,IAAI1B,QACJyB,IAAI1B,QAAQ4B,QACZD,IAAI1B,MAAM;AAEda,0BAAIoB,OAAOR,IAAIE,QAAQD,IAAI1B,MAAM;AACjCa,0BAAIqB,iBAAiBT,GAAGC,IAAI1B,QAAQyB,GAAGC,IAAI1B,SAAS2B,MAAM;AAC1Dd,0BAAIoB,OAAOR,GAAGC,IAAIC,MAAM;AACxBd,0BAAIqB,iBAAiBT,GAAGC,GAAGD,IAAIE,QAAQD,CAAC;AACxCb,0BAAIsB,UAAS;AACbtB,0BAAIuB,KAAI;oBACZ;;;;;;;;;;;;;kBAEA,GAAA;oBAAAxE,KAAA;oBAAA2B,OAYA,SAAA8C,UAAUC,OAAOC,QAAQC,OAAOC,SAASzD,OAAOC,KAAK;AACjD,2BAAKyD,kBACD,KAAK7D,SACLyD,OACAC,QACAC,OACAC,SACAzD,OACAC,GAAG;AAGP,0BAAI,KAAKmB,mBAAmB;AACxB,6BAAKsC,kBACD,KAAK3D,aACLuD,OACAC,QACAC,OACAC,SACAzD,OACAC,GAAG;sBAEX;oBACJ;;;;;;;;;;;;;;kBAEA,GAAA;oBAAArB,KAAA;oBAAA2B,OAaA,SAAAmD,kBAAkB7B,KAAKyB,OAAOC,QAAQC,OAAOC,SAASzD,OAAOC,KAAK;AAC9D,0BAAI,CAAC4B,KAAK;AACN;sBACJ;AAEA,0BAAMzD,SAASkF,MAAMlF,SAAS;AAC9B,0BAAMuF,QAAQC,KAAKC,MAAMzF,SAAS,KAAK4B,KAAK;AAI5C,0BAAM8D,OAAOF,KAAKC,MAAMzF,SAAS,KAAK6B,GAAG,IAAI;AAE7C,0BAAM8D,cAAcJ;AACpB,0BAAMK,YAAYF;AAClB,0BAAMG,QAAQ,KAAKrE,KAAKmB,SAASiD,YAAYD,cAAc;AAG3D,0BAAMG,aAAaV,QAAQC;AAC3B,0BAAMU,aAAaZ,SAASC;AAE5B3B,0BAAIkB,UAAS;AACblB,0BAAImB,QAAQe,cAAcJ,SAASM,OAAOC,UAAU;AAEpDrC,0BAAIoB,QACCc,cAAcJ,SAASM,OACxBC,aAAaN,KAAKC,OAAOP,MAAM,IAAIS,WAAW,KAAK,KAAKI,UAAU,CAAC;AAGvE,0BAAIhG,GAAGiG,MAAMC;AACb,2BAAKlG,IAAI4F,aAAa5F,IAAI6F,WAAW7F,KAAK;AACtCiG,+BAAOd,MAAM,IAAInF,CAAC,KAAK;AACvBkG,4BAAIT,KAAKC,MAAMO,OAAOD,UAAU;AAChCtC,4BAAIoB,QAAQ9E,IAAIwF,SAASM,QAAQ,KAAKK,WAAWJ,aAAaG,CAAC;sBACnE;AAIA,0BAAIE,IAAIP,YAAY;AACpB,2BAAKO,GAAGA,KAAKR,aAAaQ,KAAK;AAC3BH,+BAAOd,MAAM,IAAIiB,IAAI,CAAC,KAAK;AAC3BF,4BAAIT,KAAKC,MAAMO,OAAOD,UAAU;AAChCtC,4BAAIoB,QAAQsB,IAAIZ,SAASM,QAAQ,KAAKK,WAAWJ,aAAaG,CAAC;sBACnE;AAEAxC,0BAAIoB,QACCc,cAAcJ,SAASM,OACxBC,aACAN,KAAKC,OAAOP,MAAM,IAAIS,cAAc,CAAC,KAAK,KAAKI,UAAU,CAAC;AAG9DtC,0BAAIsB,UAAS;AACbtB,0BAAIuB,KAAI;oBACZ;;;;kBAEA,GAAA;oBAAAxE,KAAA;oBAAA2B,OAGA,SAAAiE,UAAU;AACN,2BAAK3E,UAAU;AACf,2BAAKD,OAAO;AAEZ,2BAAKG,cAAc;AACnB,2BAAKD,WAAW;oBACpB;;;;;;;;;;;;;;kBAEA,GAAA;oBAAAlB,KAAA;oBAAA2B,OAaA,SAAAkE,SAASC,QAAQC,SAASC,MAAM;AAAA,0BAAAC,QAAA;AAC5B,0BAAID,SAAS,QAAQ;AACjB,+BAAO,IAAIE,QAAQ,SAAAC,SAAW;AAC1BF,gCAAKjF,KAAKoF,OAAOD,SAASL,QAAQC,OAAO;wBAC7C,CAAC;sBACL,WAAWC,SAAS,WAAW;AAC3B,+BAAO,KAAKhF,KAAKqF,UAAUP,QAAQC,OAAO;sBAC9C;oBACJ;kBAAC,CAAA,CAAA;AAAA,yBAAAhF;gBAAA,EAAA;AAAAuF,gBAAAA,SAAAA,SAAAA,IAAAvF;AAAAwF,gBAAAA,QAAAD,UAAAA,SAAA5H;;;;;;;;;;;;;;;;;;;;;;;ACzaL,oBAAA8H,OAAAC,wBAAAnI;;kBAAA;gBAAA,CAAA;AAA+B,yBAAAoI,yBAAAC,aAAA;AAAA,sBAAA,OAAAC,YAAA;AAAA,2BAAA;AAAA,sBAAAC,oBAAA,oBAAAD,QAAA;AAAA,sBAAAE,mBAAA,oBAAAF,QAAA;AAAA,0BAAAF,2BAAA,SAAAA,0BAAAC,cAAA;AAAA,2BAAAA,eAAAG,mBAAAD;kBAAA,GAAAF,WAAA;gBAAA;AAAA,yBAAAF,wBAAAjI,KAAAmI,aAAA;AAAA,sBAAA,CAAAA,eAAAnI,OAAAA,IAAAC,YAAA;AAAA,2BAAAD;kBAAA;AAAA,sBAAAA,QAAA,QAAAG,QAAAH,GAAA,MAAA,YAAA,OAAAA,QAAA,YAAA;AAAA,2BAAA,EAAAE,SAAAF,IAAA;kBAAA;AAAA,sBAAAuI,QAAAL,yBAAAC,WAAA;AAAA,sBAAAI,SAAAA,MAAAC,IAAAxI,GAAA,GAAA;AAAA,2BAAAuI,MAAAE,IAAAzI,GAAA;kBAAA;AAAA,sBAAA0I,SAAA,CAAA;AAAA,sBAAAC,wBAAAtH,OAAAC,kBAAAD,OAAAuH;AAAA,2BAAApH,OAAAxB,KAAA;AAAA,wBAAAwB,QAAA,aAAAH,OAAAd,UAAAsI,eAAAxG,KAAArC,KAAAwB,GAAA,GAAA;AAAA,0BAAAsH,OAAAH,wBAAAtH,OAAAuH,yBAAA5I,KAAAwB,GAAA,IAAA;AAAA,0BAAAsH,SAAAA,KAAAL,OAAAK,KAAAC,MAAA;AAAA1H,+BAAAC,eAAAoH,QAAAlH,KAAAsH,IAAA;sBAAA,OAAA;AAAAJ,+BAAAlH,GAAA,IAAAxB,IAAAwB,GAAA;sBAAA;oBAAA;kBAAA;AAAAkH,yBAAAxI,UAAAF;AAAA,sBAAAuI,OAAA;AAAAA,0BAAAQ,IAAA/I,KAAA0I,MAAA;kBAAA;AAAA,yBAAAA;gBAAA;AAAA,yBAAAlI,gBAAAC,UAAAC,aAAA;AAAA,sBAAA,EAAAD,oBAAAC,cAAA;AAAA,0BAAA,IAAAC,UAAA,mCAAA;kBAAA;gBAAA;AAAA,yBAAAC,kBAAAC,QAAAC,OAAA;AAAA,2BAAAC,IAAA,GAAAA,IAAAD,MAAAE,QAAAD,KAAA;AAAA,wBAAAE,aAAAH,MAAAC,CAAA;AAAAE,+BAAAC,aAAAD,WAAAC,cAAA;AAAAD,+BAAAE,eAAA;AAAA,wBAAA,WAAAF;AAAAA,iCAAAG,WAAA;AAAAC,2BAAAC,eAAAT,QAAAU,eAAAN,WAAAO,GAAA,GAAAP,UAAA;kBAAA;gBAAA;AAAA,yBAAAQ,aAAAf,aAAAgB,YAAAC,aAAA;AAAA,sBAAAD;AAAAd,sCAAAF,YAAAH,WAAAmB,UAAA;AAAA,sBAAAC;AAAAf,sCAAAF,aAAAiB,WAAA;AAAAN,yBAAAC,eAAAZ,aAAA,aAAA,EAAAU,UAAA,MAAA,CAAA;AAAA,yBAAAV;gBAAA;AAAA,yBAAAa,eAAAK,KAAA;AAAA,sBAAAJ,MAAAK,aAAAD,KAAA,QAAA;AAAA,yBAAAzB,QAAAqB,GAAA,MAAA,WAAAA,MAAAM,OAAAN,GAAA;gBAAA;AAAA,yBAAAK,aAAAE,OAAAC,MAAA;AAAA,sBAAA7B,QAAA4B,KAAA,MAAA,YAAAA,UAAA;AAAA,2BAAAA;AAAA,sBAAAE,OAAAF,MAAA3B,OAAA8B,WAAA;AAAA,sBAAAD,SAAAE,QAAA;AAAA,wBAAAC,MAAAH,KAAAI,KAAAN,OAAAC,QAAA,SAAA;AAAA,wBAAA7B,QAAAiC,GAAA,MAAA;AAAA,6BAAAA;AAAA,0BAAA,IAAAzB,UAAA,8CAAA;kBAAA;AAAA,0BAAAqB,SAAA,WAAAF,SAAAQ,QAAAP,KAAA;gBAAA;AAAA,yBAAAiH,UAAAC,UAAAC,YAAA;AAAA,sBAAA,OAAAA,eAAA,cAAAA,eAAA,MAAA;AAAA,0BAAA,IAAAvI,UAAA,oDAAA;kBAAA;AAAAsI,2BAAA1I,YAAAc,OAAA8H,OAAAD,cAAAA,WAAA3I,WAAA,EAAAD,aAAA,EAAA6C,OAAA8F,UAAA7H,UAAA,MAAAD,cAAA,KAAA,EAAA,CAAA;AAAAE,yBAAAC,eAAA2H,UAAA,aAAA,EAAA7H,UAAA,MAAA,CAAA;AAAA,sBAAA8H;AAAAE,oCAAAH,UAAAC,UAAA;gBAAA;AAAA,yBAAAE,gBAAAC,GAAAC,GAAA;AAAAF,oCAAA/H,OAAAkI,iBAAAlI,OAAAkI,eAAAC,KAAA,IAAA,SAAAJ,iBAAAC,IAAAC,IAAA;AAAAD,oBAAAA,GAAAI,YAAAH;AAAA,2BAAAD;kBAAA;AAAA,yBAAAD,gBAAAC,GAAAC,CAAA;gBAAA;AAAA,yBAAAI,aAAAC,SAAA;AAAA,sBAAAC,4BAAAC,0BAAA;AAAA,yBAAA,SAAAC,uBAAA;AAAA,wBAAAC,QAAAC,gBAAAL,OAAA,GAAAM;AAAA,wBAAAL,2BAAA;AAAA,0BAAAM,YAAAF,gBAAA,IAAA,EAAA1J;AAAA2J,+BAAAE,QAAAC,UAAAL,OAAAM,WAAAH,SAAA;oBAAA,OAAA;AAAAD,+BAAAF,MAAAO,MAAA,MAAAD,SAAA;oBAAA;AAAA,2BAAAE,2BAAA,MAAAN,MAAA;kBAAA;gBAAA;AAAA,yBAAAM,2BAAAC,OAAAnI,MAAA;AAAA,sBAAAA,SAAAlC,QAAAkC,IAAA,MAAA,YAAA,OAAAA,SAAA,aAAA;AAAA,2BAAAA;kBAAA,WAAAA,SAAA,QAAA;AAAA,0BAAA,IAAA1B,UAAA,0DAAA;kBAAA;AAAA,yBAAA8J,uBAAAD,KAAA;gBAAA;AAAA,yBAAAC,uBAAAD,OAAA;AAAA,sBAAAA,UAAA,QAAA;AAAA,0BAAA,IAAAE,eAAA,2DAAA;kBAAA;AAAA,yBAAAF;gBAAA;AAAA,yBAAAX,4BAAA;AAAA,sBAAA,OAAAM,YAAA,eAAA,CAAAA,QAAAC;AAAA,2BAAA;AAAA,sBAAAD,QAAAC,UAAAO;AAAA,2BAAA;AAAA,sBAAA,OAAAC,UAAA;AAAA,2BAAA;AAAA,sBAAA;AAAAC,4BAAAtK,UAAAuK,QAAAzI,KAAA8H,QAAAC,UAAAS,SAAA,CAAA,GAAA,WAAA;oBAAA,CAAA,CAAA;AAAA,2BAAA;kBAAA,SAAAE,GAAA;AAAA,2BAAA;kBAAA;gBAAA;AAAA,yBAAAf,gBAAAX,GAAA;AAAAW,oCAAA3I,OAAAkI,iBAAAlI,OAAA2J,eAAAxB,KAAA,IAAA,SAAAQ,iBAAAX,IAAA;AAAA,2BAAAA,GAAAI,aAAApI,OAAA2J,eAAA3B,EAAA;kBAAA;AAAA,yBAAAW,gBAAAX,CAAA;gBAAA;AAE/B,oBAKqB4B,SAAM,SAAAC,gBAAA;AAAAlC,4BAAAiC,SAAAC,cAAA;AAAA,sBAAAC,SAAAzB,aAAAuB,OAAA;AAKvB,2BAAAA,QAAYG,WAAWC,QAAQ;AAAA,wBAAA5D;AAAAjH,oCAAA,MAAAyK,OAAA;AAC3BxD,4BAAA0D,OAAA9I,KAAA,IAAA;AAEAoF,0BAAK2D,YAAYpD,KAAKsD,gBAAgBF,WAAWC,OAAOnG,QAAQ;AAIhEuC,0BAAK4D,SAASA;AAKd5D,0BAAK9D,QAAQ;AAKb8D,0BAAK7D,SAASyH,OAAOzH,SAAS6D,MAAK4D,OAAOE;AAE1C9D,0BAAK+D,UAAU;AAKf/D,0BAAKgE,UAAU;AAAK,2BAAAhE;kBACxB;AAEAhG,+BAAAwJ,SAAA,CAAA;oBAAAzJ,KAAA;oBAAA2B,OAOA,SAAAY,MAAM2H,IAAIC,QAAQ;AACd,6BAAO3D,KAAKjE,MAAM2H,IAAIC,MAAM;oBAChC;;;;;kBAEA,GAAA;oBAAAnK,KAAA;oBAAA2B,OAIA,SAAAyI,gBAAgB;AACZ,2BAAKH,UAAUzD,KAAKsD,gBAChB,KAAKF,UAAUS,YAAYC,SAASC,cAAc,MAAM,CAAC,GACzD,KAAKV,OAAOnG,QAAQ;AAGxB,2BAAKnB,MAAM,KAAK0H,SAAS;wBACrBO,SAAS;wBACTC,UAAU;wBACVC,YAAY;wBACZC,kBAAkB;wBAClBvI,QAAQ,KAAKyH,OAAOzH,SAAS;sBACjC,CAAC;AAED,0BAAI,KAAKyH,OAAOe,cAAc,KAAKf,OAAOgB,cAAc;AACpD,6BAAKtI,MAAM,KAAK0H,SAAS;0BACrB9H,OAAO;0BACP2I,QAAQ,KAAKjB,OAAOkB,aAAa,SAAS;0BAC1CC,WAAW,KAAKnB,OAAOoB,gBAAgB,WAAW;0BAClDC,WAAW;wBACf,CAAC;sBACL;AAEA,2BAAKC,mBAAkB;oBAC3B;;;;;;;;kBAEA,GAAA;oBAAAnL,KAAA;oBAAA2B,OAOA,SAAAyJ,YAAY7B,GAAG8B,WAAW;AACtB,uBAACA,aAAa9B,EAAE+B,eAAc;AAE9B,0BAAMC,UAAU/E,KAAKsD,gBACjBP,EAAEiC,gBAAgBjC,EAAEiC,cAAc,CAAC,IAAIjC,GACvC,KAAKM,OAAOnG,QAAQ,EACtB6H;AACF,0BAAME,OAAO,KAAKxB,QAAQyB,sBAAqB;AAE/C,0BAAMC,eAAe,KAAKxJ;AAC1B,0BAAMyJ,cAAc,KAAKC,SAAQ;AACjC,0BAAMC,iBAAiB,KAAKC,kBAAkBN,MAAMF,OAAO;AAE3D,0BAAIrK;AACJ,0BAAI,CAAC,KAAK2I,OAAOe,cAAce,eAAeC,aAAa;AACvD1K,mCAAW4K,kBACN,KAAKjC,OAAOE,aAAa4B,iBAAiB;sBACnD,OAAO;AACHzK,oCAAY4K,iBAAiB,KAAK7B,QAAQ+B,cACtC,KAAK/B,QAAQgC,eAAe;sBACpC;AAEA,6BAAOzF,KAAK0F,MAAMhL,UAAU,GAAG,CAAC;oBACpC;kBAAC,GAAA;oBAAAlB,KAAA;oBAAA2B,OAED,SAAAoK,kBAAkBI,aAAaZ,SAAS;AACpC,0BAAI,KAAK1B,OAAOuC,KAAK;AACjB,+BAAOD,YAAYE,QAAQd;sBAC/B,OAAO;AACH,+BAAOA,UAAUY,YAAYG;sBACjC;oBACJ;kBAAC,GAAA;oBAAAtM,KAAA;oBAAA2B,OAED,SAAAwJ,qBAAqB;AAAA,0BAAAoB,SAAA;AACjB,2BAAKtC,QAAQuC,iBAAiB,SAAS,SAAAjD,GAAK;AACxC,4BAAMkD,gBAAgBjG,KAAKsD,gBAAgBP,GAAGgD,OAAK1C,OAAOnG,QAAQ;AAClE,4BAAMgJ,kBAAkBH,OAAKtC,QAAQ0C,eAC/BJ,OAAKtC,QAAQ2C;AAEnB,4BAAIF,oBAAoB,GAAG;AAEvB,8BAAMjB,OAAOc,OAAKtC,QAAQyB,sBAAqB;AAC/C,8BAAIe,cAAcI,WAAWpB,KAAKqB,SAASJ,iBAAiB;AAExD;0BACJ;wBACJ;AAEA,4BAAIH,OAAK1C,OAAOkD,UAAU;AACtBR,iCAAKS,UAAU,SAASzD,GAAGgD,OAAKnB,YAAY7B,CAAC,CAAC;wBAClD;sBACJ,CAAC;AAED,2BAAKU,QAAQuC,iBAAiB,YAAY,SAAAjD,GAAK;AAC3C,4BAAIgD,OAAK1C,OAAOkD,UAAU;AACtBR,iCAAKS,UAAU,YAAYzD,GAAGgD,OAAKnB,YAAY7B,CAAC,CAAC;wBACrD;sBACJ,CAAC;AAED,2BAAKU,QAAQuC,iBAAiB,UAAU,SAAAjD,GAAC;AAAA,+BACrCgD,OAAKS,UAAU,UAAUzD,CAAC;sBAAC,CAAA;oBAEnC;;;;;;;;;;;;kBAEA,GAAA;oBAAAvJ,KAAA;oBAAA2B,OAWA,SAAAsL,UAAUvI,OAAOlF,QAAQ4B,OAAOC,KAAK;AACjC,0BAAI,CAAC,KAAK6L,SAAS1N,MAAM,GAAG;AACxB,6BAAKiD,UAAS;sBAClB;AAEA,2BAAKoH,OAAOsD,WACN,KAAKC,SAAS1I,OAAO,GAAGtD,OAAOC,GAAG,IAClC,KAAKgM,SAAS3I,OAAO,GAAGtD,OAAOC,GAAG;oBAC5C;;;;kBAEA,GAAA;oBAAArB,KAAA;oBAAA2B,OAGA,SAAA2L,cAAc;AACV,0BAAI,KAAKrD,YAAY,MAAM;AACvB,6BAAKA,QAAQ+B,aAAa;sBAC9B;oBACJ;;;;;;kBAEA,GAAA;oBAAAhM,KAAA;oBAAA2B,OAKA,SAAA4L,SAASC,SAAS;AACd,0BAAM/C,WAAW,KAAKR,QAAQgC,cAAcuB;AAC5C,2BAAKC,mBAAmBhD,UAAU,IAAI;oBAC1C;;;;;;;;kBAEA,GAAA;oBAAAzK,KAAA;oBAAA2B,OAOA,SAAA8L,mBAAmBhD,UAAUiD,WAAW;AACpC,0BAAM1B,aAAa,KAAK/B,QAAQ+B;AAChC,0BAAM2B,OAAO,CAAC,EAAE,KAAK1D,QAAQ2D,cAAc;AAC3C,0BAAMC,YAAY,KAAK5D,QAAQgC,cAAc,KAAKhC,QAAQ2D;AAC1D,0BAAIvO,SAASoL,WAAWkD;AACxB,0BAAIG,SAASzO,SAAS2M;AAEtB,0BAAI6B,aAAa,GAAG;AAEhB;sBACJ;AAGA,0BAAI,CAACH,aAAa,CAACC,QAAQG,UAAUA,SAASH,MAAM;AAEhD,4BAAII,OAAO,KAAKlE,OAAOmE;AAGvBD,gCAAQJ;AACRI,gCAAQF;AAERC,iCAAS9I,KAAKiJ,IAAI,CAACF,MAAM/I,KAAKkJ,IAAIH,MAAMD,MAAM,CAAC;AAC/CzO,iCAAS2M,aAAa8B;sBAC1B;AAGAzO,+BAAS2F,KAAKiJ,IAAI,GAAGjJ,KAAKkJ,IAAIL,WAAWxO,MAAM,CAAC;AAEhD,0BAAIA,UAAU2M,YAAY;AACtB,6BAAK/B,QAAQ+B,aAAa3M;sBAC9B;oBACJ;;;;;;kBAEA,GAAA;oBAAAW,KAAA;oBAAA2B,OAKA,SAAAwM,aAAa;AACT,0BAAItK,IAAI;AACR,0BAAI,KAAKoG,SAAS;AACd,4BAAMF,aAAa,KAAKF,OAAOE;AAC/BlG,4BAAImB,KAAKC,MAAM,KAAKgF,QAAQ+B,aAAajC,UAAU;AAOnD,4BAAI,KAAKF,OAAOgB,cAAc;AAC1B,8BAAMgD,YAAY,CAAC,EACf,KAAK5D,QAAQgC,cAAclC,aAC3B,KAAK8B,SAAQ;AAEjBhI,8BAAImB,KAAKkJ,IAAIL,WAAW7I,KAAKiJ,IAAI,GAAGpK,CAAC,CAAC;wBAC1C;sBACJ;AACA,6BAAOA;oBACX;;;;;;kBAEA,GAAA;oBAAA7D,KAAA;oBAAA2B,OAKA,SAAAkK,WAAW;AACP,6BAAO7G,KAAKC,MAAM,KAAK2E,UAAUgE,cAAc,KAAK/D,OAAOE,UAAU;oBACzE;;;;;;;kBAEA,GAAA;oBAAA/J,KAAA;oBAAA2B,OAMA,SAAAuL,SAAS/K,OAAO;AACZ,0BAAI,KAAKA,SAASA,OAAO;AACrB,+BAAO;sBACX;AAEA,2BAAKA,QAAQA;AAEb,0BAAI,KAAK0H,OAAOe,cAAc,KAAKf,OAAOgB,cAAc;AACpD,6BAAKtI,MAAM,KAAK0H,SAAS;0BACrB9H,OAAO;wBACX,CAAC;sBACL,OAAO;AACH,4BAAMiM,WAAW,CAAC,EAAE,KAAKjM,QAAQ,KAAK0H,OAAOE,cAAc;AAC3D,6BAAKxH,MAAM,KAAK0H,SAAS;0BACrB9H,OAAOiM;wBACX,CAAC;sBACL;AAEA,2BAAKC,WAAU;AACf,6BAAO;oBACX;;;;;;;kBAEA,GAAA;oBAAArO,KAAA;oBAAA2B,OAMA,SAAA2M,UAAUlM,QAAQ;AACd,0BAAIA,UAAU,KAAKA,QAAQ;AACvB,+BAAO;sBACX;AACA,2BAAKA,SAASA;AAEd,2BAAKG,MAAM,KAAK0H,SAAS;wBACrB7H,QAAQ,CAAC,EAAE,KAAKA,SAAS,KAAKyH,OAAOE,cAAc;sBACvD,CAAC;AAED,2BAAKsE,WAAU;AACf,6BAAO;oBACX;;;;;;kBAEA,GAAA;oBAAArO,KAAA;oBAAA2B,OAKA,SAAAT,SAASA,WAAU;AACf,0BAAMqN,aAAa,IAAI,KAAK1E,OAAOE;AACnC,0BAAMyE,MAAMxJ,KAAKC,MAAM/D,YAAW,KAAKiB,KAAK,IAAIoM;AAEhD,0BAAIC,MAAM,KAAKxE,WAAWwE,MAAM,KAAKxE,WAAWuE,YAAY;AACxD,6BAAKvE,UAAUwE;AAEf,4BAAI,KAAK3E,OAAOgB,gBAAgB,KAAKhB,OAAO4E,YAAY;AACpD,8BAAMC,SAAS,CAAC,EAAE,KAAKzE,QAAQgC,cAAc/K;AAC7C,+BAAKuM,mBACDiB,QACA,KAAK7E,OAAO8E,qBAAqB;wBAEzC;AAEA,6BAAKC,eAAeJ,GAAG;sBAC3B;oBACJ;;;;kBAEA,GAAA;oBAAAxO,KAAA;oBAAA2B,OAGA,SAAAiE,UAAU;AACN,2BAAKiJ,MAAK;AACV,0BAAI,KAAK5E,SAAS;AACd,4BAAI,KAAKA,QAAQ6E,cAAc,KAAKlF,UAAUmF,YAAY;AACtD,+BAAKnF,UAAUoF,YAAY,KAAK/E,QAAQ8E,UAAU;wBACtD;AACA,6BAAK9E,UAAU;sBACnB;oBACJ;;;;;;;kBAIA,GAAA;oBAAAjK,KAAA;oBAAA2B,OAKA,SAAAsN,eAAe;oBAAC;;;;;;kBAEhB,GAAA;oBAAAjP,KAAA;oBAAA2B,OAKA,SAAA0M,aAAa;oBAAC;;;;;;;;;;;;;;kBAEd,GAAA;oBAAArO,KAAA;oBAAA2B,OAaA,SAAAyL,SAAS1I,OAAOwK,cAAc9N,OAAOC,KAAK;oBAAC;;;;;;;;;;;;;;kBAE3C,GAAA;oBAAArB,KAAA;oBAAA2B,OAaA,SAAA0L,SAAS3I,OAAOwK,cAAc9N,OAAOC,KAAK;oBAAC;;;;;;kBAE3C,GAAA;oBAAArB,KAAA;oBAAA2B,OAKA,SAAAc,YAAY;oBAAC;;;;;;;kBAEb,GAAA;oBAAAzC,KAAA;oBAAA2B,OAMA,SAAAiN,eAAenE,UAAU;oBAAC;kBAAC,CAAA,CAAA;AAAA,yBAAAhB;gBAAA,EApZKjD,KAAK2I,QAAQ;AAAA7I,gBAAAA,SAAAA,SAAAA,IAAAmD;AAAAlD,gBAAAA,QAAAD,UAAAA,SAAA5H;;;;;;;;;;;;;;;;;;;;;;;ACPjD,oBAAA0Q,UAAA/Q,uBAAAC;;kBAAA;gBAAA,CAAA;AACA,oBAAAkI,OAAAC,wBAAAnI;;kBAAA;gBAAA,CAAA;AACA,oBAAA+Q,WAAAhR,uBAAAC;;kBAAA;gBAAA,CAAA;AAA+C,yBAAAoI,yBAAAC,aAAA;AAAA,sBAAA,OAAAC,YAAA;AAAA,2BAAA;AAAA,sBAAAC,oBAAA,oBAAAD,QAAA;AAAA,sBAAAE,mBAAA,oBAAAF,QAAA;AAAA,0BAAAF,2BAAA,SAAAA,0BAAAC,cAAA;AAAA,2BAAAA,eAAAG,mBAAAD;kBAAA,GAAAF,WAAA;gBAAA;AAAA,yBAAAF,wBAAAjI,KAAAmI,aAAA;AAAA,sBAAA,CAAAA,eAAAnI,OAAAA,IAAAC,YAAA;AAAA,2BAAAD;kBAAA;AAAA,sBAAAA,QAAA,QAAAG,QAAAH,GAAA,MAAA,YAAA,OAAAA,QAAA,YAAA;AAAA,2BAAA,EAAAE,SAAAF,IAAA;kBAAA;AAAA,sBAAAuI,QAAAL,yBAAAC,WAAA;AAAA,sBAAAI,SAAAA,MAAAC,IAAAxI,GAAA,GAAA;AAAA,2BAAAuI,MAAAE,IAAAzI,GAAA;kBAAA;AAAA,sBAAA0I,SAAA,CAAA;AAAA,sBAAAC,wBAAAtH,OAAAC,kBAAAD,OAAAuH;AAAA,2BAAApH,OAAAxB,KAAA;AAAA,wBAAAwB,QAAA,aAAAH,OAAAd,UAAAsI,eAAAxG,KAAArC,KAAAwB,GAAA,GAAA;AAAA,0BAAAsH,OAAAH,wBAAAtH,OAAAuH,yBAAA5I,KAAAwB,GAAA,IAAA;AAAA,0BAAAsH,SAAAA,KAAAL,OAAAK,KAAAC,MAAA;AAAA1H,+BAAAC,eAAAoH,QAAAlH,KAAAsH,IAAA;sBAAA,OAAA;AAAAJ,+BAAAlH,GAAA,IAAAxB,IAAAwB,GAAA;sBAAA;oBAAA;kBAAA;AAAAkH,yBAAAxI,UAAAF;AAAA,sBAAAuI,OAAA;AAAAA,0BAAAQ,IAAA/I,KAAA0I,MAAA;kBAAA;AAAA,yBAAAA;gBAAA;AAAA,yBAAA7I,uBAAAG,KAAA;AAAA,yBAAAA,OAAAA,IAAAC,aAAAD,MAAA,EAAAE,SAAAF,IAAA;gBAAA;AAAA,yBAAAQ,gBAAAC,UAAAC,aAAA;AAAA,sBAAA,EAAAD,oBAAAC,cAAA;AAAA,0BAAA,IAAAC,UAAA,mCAAA;kBAAA;gBAAA;AAAA,yBAAAC,kBAAAC,QAAAC,OAAA;AAAA,2BAAAC,IAAA,GAAAA,IAAAD,MAAAE,QAAAD,KAAA;AAAA,wBAAAE,aAAAH,MAAAC,CAAA;AAAAE,+BAAAC,aAAAD,WAAAC,cAAA;AAAAD,+BAAAE,eAAA;AAAA,wBAAA,WAAAF;AAAAA,iCAAAG,WAAA;AAAAC,2BAAAC,eAAAT,QAAAU,eAAAN,WAAAO,GAAA,GAAAP,UAAA;kBAAA;gBAAA;AAAA,yBAAAQ,aAAAf,aAAAgB,YAAAC,aAAA;AAAA,sBAAAD;AAAAd,sCAAAF,YAAAH,WAAAmB,UAAA;AAAA,sBAAAC;AAAAf,sCAAAF,aAAAiB,WAAA;AAAAN,yBAAAC,eAAAZ,aAAA,aAAA,EAAAU,UAAA,MAAA,CAAA;AAAA,yBAAAV;gBAAA;AAAA,yBAAAa,eAAAK,KAAA;AAAA,sBAAAJ,MAAAK,aAAAD,KAAA,QAAA;AAAA,yBAAAzB,QAAAqB,GAAA,MAAA,WAAAA,MAAAM,OAAAN,GAAA;gBAAA;AAAA,yBAAAK,aAAAE,OAAAC,MAAA;AAAA,sBAAA7B,QAAA4B,KAAA,MAAA,YAAAA,UAAA;AAAA,2BAAAA;AAAA,sBAAAE,OAAAF,MAAA3B,OAAA8B,WAAA;AAAA,sBAAAD,SAAAE,QAAA;AAAA,wBAAAC,MAAAH,KAAAI,KAAAN,OAAAC,QAAA,SAAA;AAAA,wBAAA7B,QAAAiC,GAAA,MAAA;AAAA,6BAAAA;AAAA,0BAAA,IAAAzB,UAAA,8CAAA;kBAAA;AAAA,0BAAAqB,SAAA,WAAAF,SAAAQ,QAAAP,KAAA;gBAAA;AAAA,yBAAAiH,UAAAC,UAAAC,YAAA;AAAA,sBAAA,OAAAA,eAAA,cAAAA,eAAA,MAAA;AAAA,0BAAA,IAAAvI,UAAA,oDAAA;kBAAA;AAAAsI,2BAAA1I,YAAAc,OAAA8H,OAAAD,cAAAA,WAAA3I,WAAA,EAAAD,aAAA,EAAA6C,OAAA8F,UAAA7H,UAAA,MAAAD,cAAA,KAAA,EAAA,CAAA;AAAAE,yBAAAC,eAAA2H,UAAA,aAAA,EAAA7H,UAAA,MAAA,CAAA;AAAA,sBAAA8H;AAAAE,oCAAAH,UAAAC,UAAA;gBAAA;AAAA,yBAAAE,gBAAAC,GAAAC,GAAA;AAAAF,oCAAA/H,OAAAkI,iBAAAlI,OAAAkI,eAAAC,KAAA,IAAA,SAAAJ,iBAAAC,IAAAC,IAAA;AAAAD,oBAAAA,GAAAI,YAAAH;AAAA,2BAAAD;kBAAA;AAAA,yBAAAD,gBAAAC,GAAAC,CAAA;gBAAA;AAAA,yBAAAI,aAAAC,SAAA;AAAA,sBAAAC,4BAAAC,0BAAA;AAAA,yBAAA,SAAAC,uBAAA;AAAA,wBAAAC,QAAAC,gBAAAL,OAAA,GAAAM;AAAA,wBAAAL,2BAAA;AAAA,0BAAAM,YAAAF,gBAAA,IAAA,EAAA1J;AAAA2J,+BAAAE,QAAAC,UAAAL,OAAAM,WAAAH,SAAA;oBAAA,OAAA;AAAAD,+BAAAF,MAAAO,MAAA,MAAAD,SAAA;oBAAA;AAAA,2BAAAE,2BAAA,MAAAN,MAAA;kBAAA;gBAAA;AAAA,yBAAAM,2BAAAC,OAAAnI,MAAA;AAAA,sBAAAA,SAAAlC,QAAAkC,IAAA,MAAA,YAAA,OAAAA,SAAA,aAAA;AAAA,2BAAAA;kBAAA,WAAAA,SAAA,QAAA;AAAA,0BAAA,IAAA1B,UAAA,0DAAA;kBAAA;AAAA,yBAAA8J,uBAAAD,KAAA;gBAAA;AAAA,yBAAAC,uBAAAD,OAAA;AAAA,sBAAAA,UAAA,QAAA;AAAA,0BAAA,IAAAE,eAAA,2DAAA;kBAAA;AAAA,yBAAAF;gBAAA;AAAA,yBAAAX,4BAAA;AAAA,sBAAA,OAAAM,YAAA,eAAA,CAAAA,QAAAC;AAAA,2BAAA;AAAA,sBAAAD,QAAAC,UAAAO;AAAA,2BAAA;AAAA,sBAAA,OAAAC,UAAA;AAAA,2BAAA;AAAA,sBAAA;AAAAC,4BAAAtK,UAAAuK,QAAAzI,KAAA8H,QAAAC,UAAAS,SAAA,CAAA,GAAA,WAAA;oBAAA,CAAA,CAAA;AAAA,2BAAA;kBAAA,SAAAE,GAAA;AAAA,2BAAA;kBAAA;gBAAA;AAAA,yBAAAf,gBAAAX,GAAA;AAAAW,oCAAA3I,OAAAkI,iBAAAlI,OAAA2J,eAAAxB,KAAA,IAAA,SAAAQ,iBAAAX,IAAA;AAAA,2BAAAA,GAAAI,aAAApI,OAAA2J,eAAA3B,EAAA;kBAAA;AAAA,yBAAAW,gBAAAX,CAAA;gBAAA;AAE/C,oBAOqByH,cAAW,SAAAC,SAAA;AAAA/H,4BAAA8H,cAAAC,OAAA;AAAA,sBAAA5F,SAAAzB,aAAAoH,YAAA;AAK5B,2BAAAA,aAAY1F,WAAWC,QAAQ;AAAA,wBAAA5D;AAAAjH,oCAAA,MAAAsQ,YAAA;AAC3BrJ,4BAAA0D,OAAA9I,KAAA,MAAM+I,WAAWC,MAAM;AAKvB5D,0BAAKuJ,iBAAiB3F,OAAO2F;AAK7BvJ,0BAAKwJ,wBAAwBzK,KAAKC,MAC9B4E,OAAO2F,iBAAiB3F,OAAOE,UAAU;AAS7C9D,0BAAKzD,oBAAoBqH,OAAOhH,aAAagH,OAAO/G;AAKpDmD,0BAAKP,YAAY,MAAMmE,OAAOE;AAO9B9D,0BAAKyJ,WAAW,CAAA;AAKhBzJ,0BAAK0J,eAAe;AAOpB1J,0BAAK2J,aAAa7O,SAAAA;AAOlBkF,0BAAKvE,0BAA0BmI,OAAOgG;AAQtC5J,0BAAK6J,UAAU,IAAI9K,KAAK+K,KAAKlG,OAAOE,aAAa,CAAC;AAOlD9D,0BAAK+J,YAAYnG,OAAOmG,aAAa;AAOrC/J,0BAAKvC,WAAWmG,OAAOnG;AAAS,2BAAAuC;kBACpC;AAEAhG,+BAAAqP,cAAA,CAAA;oBAAAtP,KAAA;oBAAA2B,OAGA,SAAAsO,OAAO;AACH,2BAAK7F,cAAa;AAClB,2BAAK8F,eAAc;oBACvB;;;;;kBAEA,GAAA;oBAAAlQ,KAAA;oBAAA2B,OAIA,SAAAuO,iBAAiB;AACb,2BAAKP,eAAenJ,KAAKsD,gBACrB,KAAKG,QAAQI,YAAYC,SAASC,cAAc,MAAM,CAAC,GACvD,KAAKV,OAAOnG,QAAQ;AAExB,2BAAKnB,MAAM,KAAKoN,cAAc;wBAC1BlF,UAAU;wBACV0F,QAAQ;wBACR7D,MAAM;wBACN8D,KAAK;wBACLtD,QAAQ;wBACRuD,UAAU;wBACVlO,OAAO;wBACPqI,SAAS;wBACT8F,WAAW;wBACXC,kBAAkB;wBAClBC,eAAe;sBACnB,CAAC;AAED,2BAAKC,UAAS;AACd,2BAAKxB,aAAY;oBACrB;;;;kBAEA,GAAA;oBAAAjP,KAAA;oBAAA2B,OAGA,SAAAsN,eAAe;AACX,2BAAK1M,MAAM,KAAKoN,cAAc;wBAC1Be,kBAAkB,KAAK7G,OAAO8G,cAAc;wBAC5CC,kBAAkB,KAAK/G,OAAOgH;sBAClC,CAAC;oBACL;;;;kBAEA,GAAA;oBAAA7Q,KAAA;oBAAA2B,OAGA,SAAA0M,aAAa;AAAA,0BAAA9B,SAAA;AACT,0BAAMrK,aAAa8C,KAAKC,MAAM,KAAK9C,QAAQ,KAAK0H,OAAOE,UAAU;AACjE,0BAAM+G,mBAAmB9L,KAAK+K,KAC1B7N,cAAc,KAAKuN,wBAAwB,KAAKK,QAAQ;AAI5D,6BAAO,KAAKJ,SAASlQ,SAASsR,kBAAkB;AAC5C,6BAAKL,UAAS;sBAClB;AAGA,6BAAO,KAAKf,SAASlQ,SAASsR,kBAAkB;AAC5C,6BAAKC,aAAY;sBACrB;AAEA,0BAAIC,cAAc,KAAKxB,iBAAiB,KAAKM;AAC7C,0BAAMmB,aAAa,KAAKvB,SAASlQ,SAAS;AAC1C,2BAAKkQ,SAASpM,QAAQ,SAAC4N,OAAO3R,GAAM;AAChC,4BAAIA,KAAK0R,YAAY;AACjBD,wCAAczE,OAAKpK,QAAQoK,OAAKiD,iBAAiByB;wBACrD;AACA1E,+BAAKvK,iBAAiBkP,OAAOF,aAAazE,OAAKnK,MAAM;AAErD8O,8BAAMzO,UAAS;sBACnB,CAAC;oBACL;;;;;kBAEA,GAAA;oBAAAzC,KAAA;oBAAA2B,OAIA,SAAA8O,YAAY;AACR,0BAAMS,QAAQ,IAAI,KAAKtB,WAAU;AACjCsB,4BAAMxP,0BAA0B,KAAKA;AACrCwP,4BAAM1O,oBAAoB,KAAKA;AAC/B0O,4BAAMxL,YAAY,KAAKA;AACvB,0BAAMyL,aAAa,KAAK1B,wBAAwB,KAAKC,SAASlQ;AAG9D,0BAAIwB,OAAOwF,KAAKsD,gBACZ,KAAKG,QAAQI,YAAYC,SAASC,cAAc,QAAQ,CAAC,GACzD,KAAKV,OAAOnG,QAAQ;AAExB,2BAAKnB,MAAMvB,MAAM;wBACbyJ,UAAU;wBACV0F,QAAQ;wBACR7D,MAAM6E,aAAa;wBACnBf,KAAK;wBACLtD,QAAQ;wBACR1K,QAAQ;wBACRoO,eAAe;sBACnB,CAAC;AACDU,4BAAMtP,SAASZ,IAAI;AAGnB,0BAAI,KAAKwB,mBAAmB;AACxB,4BAAItB,WAAWsF,KAAKsD,gBAChB,KAAK6F,aAAatF,YAAYC,SAASC,cAAc,QAAQ,CAAC,GAC9D,KAAKV,OAAOnG,QAAQ;AAExB,6BAAKnB,MAAMrB,UAAU;0BACjBuJ,UAAU;0BACV6B,MAAM6E,aAAa;0BACnBf,KAAK;0BACLtD,QAAQ;0BACR1K,QAAQ;wBACZ,CAAC;AACD8O,8BAAMnP,aAAab,QAAQ;sBAC/B;AAEA,2BAAKwO,SAAS0B,KAAKF,KAAK;oBAC5B;;;;;kBAEA,GAAA;oBAAAlR,KAAA;oBAAA2B,OAIA,SAAAoP,eAAe;AACX,0BAAIM,YAAY,KAAK3B,SAAS,KAAKA,SAASlQ,SAAS,CAAC;AAGtD6R,gCAAUrQ,KAAKsQ,cAActC,YAAYqC,UAAUrQ,KAAK+N,UAAU;AAGlE,0BAAI,KAAKvM,mBAAmB;AACxB6O,kCAAUnQ,SAASoQ,cAActC,YAAYqC,UAAUnQ,SAAS6N,UAAU;sBAC9E;AAGA,0BAAIsC,WAAW;AACXA,kCAAUzL,QAAO;AACjByL,oCAAY;sBAChB;AAEA,2BAAK3B,SAAS6B,IAAG;oBACrB;;;;;;;;kBAEA,GAAA;oBAAAvR,KAAA;oBAAA2B,OAOA,SAAAK,iBAAiBkP,OAAO/O,OAAOC,QAAQ;AACnC,0BAAMH,eAAe+C,KAAKC,MAAM9C,QAAQ,KAAK0H,OAAOE,UAAU;AAC9D,0BAAM7H,aAAa8C,KAAKC,MAAM,KAAK9C,QAAQ,KAAK0H,OAAOE,UAAU;AAGjEmH,4BAAMlP,iBAAiBC,cAAcC,YAAYC,OAAOC,MAAM;AAG9D,2BAAKG,MAAM,KAAKoN,cAAc;wBAAEnF,SAAS;sBAAQ,CAAC;oBACtD;;;;kBAEA,GAAA;oBAAAxK,KAAA;oBAAA2B,OAGA,SAAAc,YAAY;AAAA,0BAAA+O,SAAA;AACRhL,2BAAKiL,MAAM,WAAM;AACbD,+BAAK9B,SAASpM,QAAQ,SAAA4N,OAAK;AAAA,iCAAIA,MAAMzO,UAAS;wBAAE,CAAA;sBACpD,CAAC,EAAC;oBACN;;;;;;;;;;;;;;kBAEA,GAAA;oBAAAzC,KAAA;oBAAA2B,OAaA,SAAAyL,SAAS1I,OAAOwK,cAAc9N,OAAOC,KAAK;AAAA,0BAAAqQ,SAAA;AACtC,6BAAO,KAAKC,YACRjN,OACAwK,cACA9N,OACAC,KACA,SAAAuQ,MAA6E;AAAA,4BAA1EjN,SAAMiN,KAANjN,QAAQkN,aAAUD,KAAVC,YAAYzP,SAAMwP,KAANxP,QAAQyC,UAAO+M,KAAP/M,SAASD,QAAKgN,KAALhN,OAAOF,SAAKkN,KAALlN,OAAqBoN,KAAEF,KAAhB1C;AAGlD,4BAAI9N,UAAUT,QAAW;AACrB;wBACJ;AAEA,4BAAMoR,iBAAiBF,aAAa,IAAI;AACxC,4BAAMrS,SAASkF,OAAMlF,SAASuS;AAC9B,4BAAMC,MAAMN,OAAK7H,OAAOsD,WAAWuE,OAAK7H,OAAOE;AAC/C,4BAAMkI,MACFP,OAAK7H,OAAOqI,WAAW,OACjBlN,KAAKiJ,IAAIyD,OAAK7H,OAAOE,YAAY,CAAC,EAAEiI,MAAM,EAAE,IAC5ChN,KAAKiJ,IACHyD,OAAK7H,OAAOE,YACZ2H,OAAK7H,OAAOqI,SAASR,OAAK7H,OAAOE,UAAU;AAEvD,4BAAMoI,OAAOH,MAAMC;AAEnB,4BAAM5M,QAAQ7F,SAASkS,OAAKvP;AAC5B,4BAAM4C,QAAQ3D;AACd,4BAAM8D,OAAO7D;AACb,4BAAI+Q,YAAYrN;AAChB,6BAAKqN,WAAWA,YAAYlN,MAAMkN,aAAaD,MAAM;AAGjD,8BAAI3M,OAAO;AACX,8BAAI6M,iBAAiBrN,KAAKsN,MAAMF,YAAY/M,KAAK,IAAI0M;AACrD,8BAAMQ,eAAevN,KAAKsN,OAAOF,YAAYD,QAAQ9M,KAAK,IAAI0M;AAC9D,6BAAG;AACC,gCAAMS,UAAUxN,KAAKyN,IAAI/N,OAAM2N,cAAc,CAAC;AAC9C,gCAAIG,UAAUhN,MAAM;AAChBA,qCAAOgN;4BACX;AACAH,8CAAkBN;0BACtB,SAASM,iBAAiBE;AAG1B,8BAAI9M,IAAIT,KAAKC,MAAOO,OAAOb,SAAUC,KAAK;AAI1C,8BAAI8M,OAAK7H,OAAO6I,cAAc;AAC1BjN,gCAAIT,KAAKiJ,IAAIxI,GAAGiM,OAAK7H,OAAO6I,YAAY;0BAC5C;AAEAhB,iCAAKxN,SACDkO,YAAYV,OAAKhM,WACjBd,QAAQa,IAAIZ,SACZmN,MAAMN,OAAKhM,WACXD,IAAI,GACJiM,OAAK1B,WACL8B,EAAE;wBAEV;sBACJ,CAAC;oBAET;;;;;;;;;;;;;;kBAEA,GAAA;oBAAA9R,KAAA;oBAAA2B,OAaA,SAAA0L,SAAS3I,OAAOwK,cAAc9N,OAAOC,KAAK;AAAA,0BAAAsR,SAAA;AACtC,6BAAO,KAAKhB,YACRjN,OACAwK,cACA9N,OACAC,KACA,SAAAuR,OAAyE;AAAA,4BAAtEjO,SAAMiO,MAANjO,QAAQkN,aAAUe,MAAVf,YAAYzP,SAAMwQ,MAANxQ,QAAQyC,UAAO+N,MAAP/N,SAASD,QAAKgO,MAALhO,OAAOF,SAAKkO,MAALlO,OAAOwK,gBAAY0D,MAAZ1D;AAClD,4BAAI,CAAC2C,YAAY;AACb,8BAAMgB,iBAAiB,CAAA;AACvB,8BAAMC,MAAMpO,OAAMlF;AAClB,8BAAID,IAAI;AACR,+BAAKA,GAAGA,IAAIuT,KAAKvT,KAAK;AAClBsT,2CAAe,IAAItT,CAAC,IAAImF,OAAMnF,CAAC;AAC/BsT,2CAAe,IAAItT,IAAI,CAAC,IAAI,CAACmF,OAAMnF,CAAC;0BACxC;AACAmF,0BAAAA,SAAQmO;wBACZ;AAIA,4BAAIzR,UAAUT,QAAW;AACrBgS,iCAAKI,SAASrO,QAAOC,QAAQC,OAAOC,SAASzD,OAAOC,KAAK6N,aAAY;wBACzE;AAGAyD,+BAAKzO,SACD,GACAU,QAAQC,UAAU8N,OAAKjN,WACvBiN,OAAKxQ,OACLwQ,OAAKjN,WACLiN,OAAK3C,WACLd,aAAY;sBAEpB,CAAC;oBAET;;;;;;;;;;;;;;kBAEA,GAAA;oBAAAlP,KAAA;oBAAA2B,OAaA,SAAAoR,SAASrO,OAAOC,QAAQC,OAAOC,SAASzD,OAAOC,KAAK6N,cAAc;AAAA,0BAAA8D,SAAA;AAC9D,0BAAAC,QAAqC,KAAKpJ,OAAOqJ,qBAAqBC,cAAcjE,YAAY,KAAK,CAAC,GAA9FrM,YAASoQ,MAATpQ,WAAWC,gBAAamQ,MAAbnQ;AACnB,2BAAK4M,SAASpM,QAAQ,SAAC4N,OAAO3R,GAAM;AAChCyT,+BAAKpQ,cAAcsO,OAAOrO,WAAWC,aAAa;AAClDkQ,+BAAKvP,sBAAsByN,OAAO8B,OAAKnJ,OAAOnG,QAAQ;AACtDwN,8BAAMzM,UAAUC,OAAOC,QAAQC,OAAOC,SAASzD,OAAOC,GAAG;sBAC7D,CAAC;oBACL;;;;;;;;;;;kBAEA,GAAA;oBAAArB,KAAA;oBAAA2B,OAUA,SAAAuC,SAASL,GAAGC,GAAG3B,OAAOC,QAAQ2B,QAAQmL,cAAc;AAChD,0BAAMkE,cAAcpO,KAAKsN,MAAMzO,IAAI,KAAK2L,cAAc;AACtD,0BAAM6D,YAAYrO,KAAKkJ,IACnBlJ,KAAK+K,MAAMlM,IAAI1B,SAAS,KAAKqN,cAAc,IAAI,GAC/C,KAAKE,SAASlQ,MAAM;AAExB,0BAAID,IAAI6T;AACR,2BAAK7T,GAAGA,IAAI8T,WAAW9T,KAAK;AACxB,4BAAM2R,QAAQ,KAAKxB,SAASnQ,CAAC;AAC7B,4BAAM4R,aAAa5R,IAAI,KAAKiQ;AAE5B,4BAAM8D,eAAe;0BACjBC,IAAIvO,KAAKiJ,IAAIpK,GAAGtE,IAAI,KAAKiQ,cAAc;0BACvCgE,IAAI1P;0BACJ2P,IAAIzO,KAAKkJ,IACLrK,IAAI1B,OACJ5C,IAAI,KAAKiQ,iBAAiB0B,MAAMlQ,KAAKmB,KAAK;0BAE9CuR,IAAI5P,IAAI1B;wBACZ;AAEA,4BAAIkR,aAAaC,KAAKD,aAAaG,IAAI;AACnC,8BAAAE,QAAqC,KAAK9J,OAAOqJ,qBAAqBC,cAAcjE,YAAY,KAAK,CAAC,GAA9FrM,YAAS8Q,MAAT9Q,WAAWC,gBAAa6Q,MAAb7Q;AACnB,+BAAKF,cAAcsO,OAAOrO,WAAWC,aAAa;AAClD,+BAAKW,sBAAsByN,OAAO,KAAKrH,OAAOnG,QAAQ;AAEtDwN,gCAAMtN,UACF0P,aAAaC,KAAKpC,YAClBmC,aAAaE,IACbF,aAAaG,KAAKH,aAAaC,IAC/BD,aAAaI,KAAKJ,aAAaE,IAC/BzP,MAAM;wBAEd;sBACJ;oBACJ;;;;;;;kBAEA,GAAA;oBAAA/D,KAAA;oBAAA2B,OAMA,SAAAiS,YAAY1E,cAAc;AACtB,6BAAO,KAAKrF,OAAOgK,iBAAiB,KAAKhK,OAAOqJ,qBAAqBY,eAAeC,SAAS7E,YAAY;oBAC7G;;;;;;;;;;;;;;;;;;kBAEA,GAAA;oBAAAlP,KAAA;oBAAA2B,OAiBA,SAAAgQ,YAAYjN,OAAOwK,cAAc9N,OAAOC,KAAK2S,IAAIC,WAAWC,eAAe;AAAA,0BAAAC,SAAA;AACvE,6BAAO3N,KAAKiL,MAAM,WAAM;AAEpB,4BAAI/M,MAAM,CAAC,aAAa0P,OAAO;AAC3B,8BAAMC,WAAW3P;AAEjB,8BAAIyP,OAAKtK,OAAOgK,eAAe;AAC3B,gCAAMS,mBAAmBD,SAASE,OAAO,SAACC,GAAGjV,GAAC;AAAA,qCAAK,CAAC4U,OAAKP,YAAYrU,CAAC;4BAAC,CAAA;AACvE,gCAAI,CAAC4U,OAAKtK,OAAOqJ,qBAAqBuB,SAAS;AAC3CN,qCAAK7F,UACDtJ,KAAKiJ,IAAIqG,iBAAiB9U,QAAQ,CAAC,IAC/B2U,OAAKtK,OAAOzH,SACZ+R,OAAKtK,OAAOE,UAAU;4BAElC;AAEA,gCAAI2K;AACJ,gCAAIP,OAAKtK,OAAOqJ,wBAAwBiB,OAAKtK,OAAOqJ,qBAAqByB,uBAAuB;AAE5FD,8CAAgBlO,KAAKyH,IAAIoG,SAASO,IAAK,SAAAC,cAAY;AAAA,uCAAIrO,KAAKsO,OAAOD,YAAY;8BAAC,CAAA,CAAE;4BACtF;AAGA,mCAAOR,SAAS/Q,QAAQ,SAACuR,cAActV,GAAC;AAAA,qCACpC4U,OAAKxC,YAAYkD,cAActV,GAAG6B,OAAOC,KAAK2S,IAAIM,iBAAiBS,QAAQF,YAAY,GAAGH,aAAa;4BAAC,CAAA;0BAEhH;AACAhQ,kCAAQ2P,SAAS,CAAC;wBACtB;AAGA,4BAAIF,OAAKP,YAAY1E,YAAY,GAAG;AAChC;wBACJ;AAKA,4BAAIvK,SAAS,IAAIwP,OAAKtK,OAAOmL;AAC7B,4BAAIb,OAAKtK,OAAOoL,WAAW;AACvBtQ,mCAASuP,kBAAkBvT,SAAY6F,KAAKsO,OAAOpQ,KAAK,IAAIwP;wBAChE;AAIA,4BAAMrC,aAAa,CAAA,EAAGqD,KAAKrU,KAAK6D,OAAO,SAAAyQ,KAAG;AAAA,iCAAIA,MAAM;wBAAC,CAAA;AACrD,4BAAM/S,SAAS+R,OAAKtK,OAAOzH,SAAS+R,OAAKtK,OAAOE;AAChD,4BAAMnF,QAAQxC,SAAS;AAEvB,4BAAIyC,UAAUzC,SAAS6R,aAAa;AAGpC,4BAAIE,OAAKtK,OAAOqJ,wBAAwBiB,OAAKtK,OAAOqJ,qBAAqBuB,SAAS;AAC9E5P,oCAAU;wBACd;AAEA,+BAAOmP,GAAG;0BACNrP;0BACAkN;0BACAzP;0BACAyC;0BACAD;0BACAF;0BACAwK;wBACJ,CAAC;sBACL,CAAC,EAAC;oBACN;;;;;;;;kBAEA,GAAA;oBAAAlP,KAAA;oBAAA2B,OAOA,SAAAiB,cAAcsO,OAAqF;AAAA,0BAA9ErO,YAASgG,UAAArJ,SAAA,KAAAqJ,UAAA,CAAA,MAAAlI,SAAAkI,UAAA,CAAA,IAAG,KAAKgB,OAAOhH;AAAS,0BAAEC,gBAAa+F,UAAArJ,SAAA,KAAAqJ,UAAA,CAAA,MAAAlI,SAAAkI,UAAA,CAAA,IAAG,KAAKgB,OAAO/G;AAChFoO,4BAAMtO,cAAcC,WAAWC,aAAa;oBAChD;;;;;;;kBAEA,GAAA;oBAAA9C,KAAA;oBAAA2B,OAMA,SAAA8B,sBAAsByN,OAAyB;AAAA,0BAAlBxN,WAAQmF,UAAArJ,SAAA,KAAAqJ,UAAA,CAAA,MAAAlI,SAAAkI,UAAA,CAAA,IAAG;AACpCqI,4BAAMzN,sBAAsBC,QAAQ;oBACxC;;;;;;;;;;;;;;;kBAEA,GAAA;oBAAA1D,KAAA;oBAAA2B,OAcA,SAAAkE,SAASC,QAAQC,SAASC,MAAM;AAC5B,0BAAIA,SAAS,QAAQ;AACjB,+BAAOE,QAAQkP,IACX,KAAK1F,SAASkF,IAAI,SAAA1D,OAAS;AACvB,iCAAOA,MAAMrL,SAASC,QAAQC,SAASC,IAAI;wBAC/C,CAAC,CAAC;sBAEV,WAAWA,SAAS,WAAW;AAC3B,4BAAIqP,SAAS,KAAK3F,SAASkF,IAAI,SAAA1D,OAAK;AAAA,iCAChCA,MAAMrL,SAASC,QAAQC,SAASC,IAAI;wBAAC,CAAA;AAEzC,+BAAOqP,OAAO7V,SAAS,IAAI6V,SAASA,OAAO,CAAC;sBAChD;oBACJ;;;;;;kBAEA,GAAA;oBAAArV,KAAA;oBAAA2B,OAKA,SAAAiN,eAAenE,UAAU;AACrB,2BAAKlI,MAAM,KAAKoN,cAAc;wBAAExN,OAAOsI,WAAW;sBAAK,CAAC;oBAC5D;kBAAC,CAAA,CAAA;AAAA,yBAAA6E;gBAAA,EA5lBoC7F,QAAAA,OAAM;AAAAnD,gBAAAA,SAAAA,SAAAA,IAAAgJ;AAAA/I,gBAAAA,QAAAD,UAAAA,SAAA5H;;;;;;;;;;;;;;;;;;;;;;;ACX/C,oBAAA4W,gBAAAjX,uBAAAC;;kBAAA;gBAAA,CAAA;AAA0C,yBAAAD,uBAAAG,KAAA;AAAA,yBAAAA,OAAAA,IAAAC,aAAAD,MAAA,EAAAE,SAAAF,IAAA;gBAAA;AAAA,yBAAAQ,gBAAAC,UAAAC,aAAA;AAAA,sBAAA,EAAAD,oBAAAC,cAAA;AAAA,0BAAA,IAAAC,UAAA,mCAAA;kBAAA;gBAAA;AAAA,yBAAAC,kBAAAC,QAAAC,OAAA;AAAA,2BAAAC,IAAA,GAAAA,IAAAD,MAAAE,QAAAD,KAAA;AAAA,wBAAAE,aAAAH,MAAAC,CAAA;AAAAE,+BAAAC,aAAAD,WAAAC,cAAA;AAAAD,+BAAAE,eAAA;AAAA,wBAAA,WAAAF;AAAAA,iCAAAG,WAAA;AAAAC,2BAAAC,eAAAT,QAAAU,eAAAN,WAAAO,GAAA,GAAAP,UAAA;kBAAA;gBAAA;AAAA,yBAAAQ,aAAAf,aAAAgB,YAAAC,aAAA;AAAA,sBAAAD;AAAAd,sCAAAF,YAAAH,WAAAmB,UAAA;AAAA,sBAAAC;AAAAf,sCAAAF,aAAAiB,WAAA;AAAAN,yBAAAC,eAAAZ,aAAA,aAAA,EAAAU,UAAA,MAAA,CAAA;AAAA,yBAAAV;gBAAA;AAAA,yBAAAa,eAAAK,KAAA;AAAA,sBAAAJ,MAAAK,aAAAD,KAAA,QAAA;AAAA,yBAAAzB,QAAAqB,GAAA,MAAA,WAAAA,MAAAM,OAAAN,GAAA;gBAAA;AAAA,yBAAAK,aAAAE,OAAAC,MAAA;AAAA,sBAAA7B,QAAA4B,KAAA,MAAA,YAAAA,UAAA;AAAA,2BAAAA;AAAA,sBAAAE,OAAAF,MAAA3B,OAAA8B,WAAA;AAAA,sBAAAD,SAAAE,QAAA;AAAA,wBAAAC,MAAAH,KAAAI,KAAAN,OAAAC,QAAA,SAAA;AAAA,wBAAA7B,QAAAiC,GAAA,MAAA;AAAA,6BAAAA;AAAA,0BAAA,IAAAzB,UAAA,8CAAA;kBAAA;AAAA,0BAAAqB,SAAA,WAAAF,SAAAQ,QAAAP,KAAA;gBAAA;AAAA,yBAAAgV,OAAA;AAAA,sBAAA,OAAA5M,YAAA,eAAAA,QAAA1B,KAAA;AAAAsO,2BAAA5M,QAAA1B,IAAAe,KAAA;kBAAA,OAAA;AAAAuN,2BAAA,SAAAA,MAAAlW,QAAAmW,UAAAC,UAAA;AAAA,0BAAAC,OAAAC,eAAAtW,QAAAmW,QAAA;AAAA,0BAAA,CAAAE;AAAA;AAAA,0BAAApO,OAAAzH,OAAAuH,yBAAAsO,MAAAF,QAAA;AAAA,0BAAAlO,KAAAL,KAAA;AAAA,+BAAAK,KAAAL,IAAApG,KAAAgI,UAAArJ,SAAA,IAAAH,SAAAoW,QAAA;sBAAA;AAAA,6BAAAnO,KAAA3F;oBAAA;kBAAA;AAAA,yBAAA4T,KAAAzM,MAAA,MAAAD,SAAA;gBAAA;AAAA,yBAAA8M,eAAAC,QAAAJ,UAAA;AAAA,yBAAA,CAAA3V,OAAAd,UAAAsI,eAAAxG,KAAA+U,QAAAJ,QAAA,GAAA;AAAAI,6BAAApN,gBAAAoN,MAAA;AAAA,wBAAAA,WAAA;AAAA;kBAAA;AAAA,yBAAAA;gBAAA;AAAA,yBAAApO,UAAAC,UAAAC,YAAA;AAAA,sBAAA,OAAAA,eAAA,cAAAA,eAAA,MAAA;AAAA,0BAAA,IAAAvI,UAAA,oDAAA;kBAAA;AAAAsI,2BAAA1I,YAAAc,OAAA8H,OAAAD,cAAAA,WAAA3I,WAAA,EAAAD,aAAA,EAAA6C,OAAA8F,UAAA7H,UAAA,MAAAD,cAAA,KAAA,EAAA,CAAA;AAAAE,yBAAAC,eAAA2H,UAAA,aAAA,EAAA7H,UAAA,MAAA,CAAA;AAAA,sBAAA8H;AAAAE,oCAAAH,UAAAC,UAAA;gBAAA;AAAA,yBAAAE,gBAAAC,GAAAC,GAAA;AAAAF,oCAAA/H,OAAAkI,iBAAAlI,OAAAkI,eAAAC,KAAA,IAAA,SAAAJ,iBAAAC,IAAAC,IAAA;AAAAD,oBAAAA,GAAAI,YAAAH;AAAA,2BAAAD;kBAAA;AAAA,yBAAAD,gBAAAC,GAAAC,CAAA;gBAAA;AAAA,yBAAAI,aAAAC,SAAA;AAAA,sBAAAC,4BAAAC,0BAAA;AAAA,yBAAA,SAAAC,uBAAA;AAAA,wBAAAC,QAAAC,gBAAAL,OAAA,GAAAM;AAAA,wBAAAL,2BAAA;AAAA,0BAAAM,YAAAF,gBAAA,IAAA,EAAA1J;AAAA2J,+BAAAE,QAAAC,UAAAL,OAAAM,WAAAH,SAAA;oBAAA,OAAA;AAAAD,+BAAAF,MAAAO,MAAA,MAAAD,SAAA;oBAAA;AAAA,2BAAAE,2BAAA,MAAAN,MAAA;kBAAA;gBAAA;AAAA,yBAAAM,2BAAAC,OAAAnI,MAAA;AAAA,sBAAAA,SAAAlC,QAAAkC,IAAA,MAAA,YAAA,OAAAA,SAAA,aAAA;AAAA,2BAAAA;kBAAA,WAAAA,SAAA,QAAA;AAAA,0BAAA,IAAA1B,UAAA,0DAAA;kBAAA;AAAA,yBAAA8J,uBAAAD,KAAA;gBAAA;AAAA,yBAAAC,uBAAAD,OAAA;AAAA,sBAAAA,UAAA,QAAA;AAAA,0BAAA,IAAAE,eAAA,2DAAA;kBAAA;AAAA,yBAAAF;gBAAA;AAAA,yBAAAX,4BAAA;AAAA,sBAAA,OAAAM,YAAA,eAAA,CAAAA,QAAAC;AAAA,2BAAA;AAAA,sBAAAD,QAAAC,UAAAO;AAAA,2BAAA;AAAA,sBAAA,OAAAC,UAAA;AAAA,2BAAA;AAAA,sBAAA;AAAAC,4BAAAtK,UAAAuK,QAAAzI,KAAA8H,QAAAC,UAAAS,SAAA,CAAA,GAAA,WAAA;oBAAA,CAAA,CAAA;AAAA,2BAAA;kBAAA,SAAAE,GAAA;AAAA,2BAAA;kBAAA;gBAAA;AAAA,yBAAAf,gBAAAX,GAAA;AAAAW,oCAAA3I,OAAAkI,iBAAAlI,OAAA2J,eAAAxB,KAAA,IAAA,SAAAQ,iBAAAX,IAAA;AAAA,2BAAAA,GAAAI,aAAApI,OAAA2J,eAAA3B,EAAA;kBAAA;AAAA,yBAAAW,gBAAAX,CAAA;gBAAA;AAE1C,oBASqBgO,uBAAoB,SAAAC,eAAA;AAAAtO,4BAAAqO,uBAAAC,aAAA;AAAA,sBAAAnM,SAAAzB,aAAA2N,qBAAA;AAMrC,2BAAAA,sBAAYhM,QAAQ;AAAA,wBAAA5D;AAAAjH,oCAAA,MAAA6W,qBAAA;AAChB5P,4BAAA0D,OAAA9I,KAAA,MAAMgJ,MAAM;AAEZ5D,0BAAK4D,SAASA;AAEd5D,0BAAK8P,qBAAqB;AAAK,2BAAA9P;kBACnC;AAEAhG,+BAAA4V,uBAAA,CAAA;oBAAA7V,KAAA;oBAAA2B,OAGA,SAAAsO,OAAO;AACH,2BAAK+F,gBAAgB,KAAKnM,OAAOoM,SAAS;AAC1C,2BAAKC,YAAW;AAChB,2BAAKC,iBAAgB;AACrB,2BAAKC,iBAAgB;AACrB,2BAAKC,mBAAkB;oBAC3B;;;;;;;;;;kBACA,GAAA;oBAAArW,KAAA;oBAAA2B,OASA,SAAA2U,MAAMC,OAAO7R,OAAO8R,SAAS;AACzBjB,2BAAA/M,gBAAAqN,sBAAA9W,SAAA,GAAA,SAAA,IAAA,EAAA8B,KAAA,MAAY0V,OAAO7R,OAAO8R,OAAO;AACjC,2BAAKC,yBAAyBF,KAAK;oBACvC;;;;;;;kBAEA,GAAA;oBAAAvW,KAAA;oBAAA2B,OAMA,SAAA8U,yBAAyBC,cAAc;AACnC,2BAAKX,qBAAqB,KAAKY,GAAGF,yBAC9BC,YAAY;AAEhB,2BAAKX,mBAAmBa,QAAQ,KAAKC,QAAQ;oBACjD;kBAAC,GAAA;oBAAA7W,KAAA;oBAAA2B,OAED,SAAAmV,KAAK1V,OAAOC,KAAK;AACb,2BAAK0V,mBAAkB;AACvB,6BAAAxB,KAAA/M,gBAAAqN,sBAAA9W,SAAA,GAAA,QAAA,IAAA,EAAA8B,KAAA,MAAkBO,OAAOC,GAAG;oBAChC;;;;;kBAEA,GAAA;oBAAArB,KAAA;oBAAA2B,OAIA,SAAAiE,UAAU;AACN2P,2BAAA/M,gBAAAqN,sBAAA9W,SAAA,GAAA,WAAA,IAAA,EAAA8B,KAAA,IAAA;AAEA,2BAAKmW,gBAAe;oBACxB;kBAAC,CAAA,CAAA;AAAA,yBAAAnB;gBAAA,EAhE6CoB,cAAAA,OAAY;AAAA3Q,gBAAAA,SAAAA,SAAAA,IAAAuP;AAAAtP,gBAAAA,QAAAD,UAAAA,SAAA5H;;;;;;;;;;;;;;;;;;;;;;;ACX9D,oBAAAwY,YAAA7Y,uBAAAC;;kBAAA;gBAAA,CAAA;AACA,oBAAAkI,OAAAC,wBAAAnI;;kBAAA;gBAAA,CAAA;AAA+B,yBAAAoI,yBAAAC,aAAA;AAAA,sBAAA,OAAAC,YAAA;AAAA,2BAAA;AAAA,sBAAAC,oBAAA,oBAAAD,QAAA;AAAA,sBAAAE,mBAAA,oBAAAF,QAAA;AAAA,0BAAAF,2BAAA,SAAAA,0BAAAC,cAAA;AAAA,2BAAAA,eAAAG,mBAAAD;kBAAA,GAAAF,WAAA;gBAAA;AAAA,yBAAAF,wBAAAjI,KAAAmI,aAAA;AAAA,sBAAA,CAAAA,eAAAnI,OAAAA,IAAAC,YAAA;AAAA,2BAAAD;kBAAA;AAAA,sBAAAA,QAAA,QAAAG,QAAAH,GAAA,MAAA,YAAA,OAAAA,QAAA,YAAA;AAAA,2BAAA,EAAAE,SAAAF,IAAA;kBAAA;AAAA,sBAAAuI,QAAAL,yBAAAC,WAAA;AAAA,sBAAAI,SAAAA,MAAAC,IAAAxI,GAAA,GAAA;AAAA,2BAAAuI,MAAAE,IAAAzI,GAAA;kBAAA;AAAA,sBAAA0I,SAAA,CAAA;AAAA,sBAAAC,wBAAAtH,OAAAC,kBAAAD,OAAAuH;AAAA,2BAAApH,OAAAxB,KAAA;AAAA,wBAAAwB,QAAA,aAAAH,OAAAd,UAAAsI,eAAAxG,KAAArC,KAAAwB,GAAA,GAAA;AAAA,0BAAAsH,OAAAH,wBAAAtH,OAAAuH,yBAAA5I,KAAAwB,GAAA,IAAA;AAAA,0BAAAsH,SAAAA,KAAAL,OAAAK,KAAAC,MAAA;AAAA1H,+BAAAC,eAAAoH,QAAAlH,KAAAsH,IAAA;sBAAA,OAAA;AAAAJ,+BAAAlH,GAAA,IAAAxB,IAAAwB,GAAA;sBAAA;oBAAA;kBAAA;AAAAkH,yBAAAxI,UAAAF;AAAA,sBAAAuI,OAAA;AAAAA,0BAAAQ,IAAA/I,KAAA0I,MAAA;kBAAA;AAAA,yBAAAA;gBAAA;AAAA,yBAAA7I,uBAAAG,KAAA;AAAA,yBAAAA,OAAAA,IAAAC,aAAAD,MAAA,EAAAE,SAAAF,IAAA;gBAAA;AAAA,yBAAAQ,gBAAAC,UAAAC,aAAA;AAAA,sBAAA,EAAAD,oBAAAC,cAAA;AAAA,0BAAA,IAAAC,UAAA,mCAAA;kBAAA;gBAAA;AAAA,yBAAAC,kBAAAC,QAAAC,OAAA;AAAA,2BAAAC,IAAA,GAAAA,IAAAD,MAAAE,QAAAD,KAAA;AAAA,wBAAAE,aAAAH,MAAAC,CAAA;AAAAE,+BAAAC,aAAAD,WAAAC,cAAA;AAAAD,+BAAAE,eAAA;AAAA,wBAAA,WAAAF;AAAAA,iCAAAG,WAAA;AAAAC,2BAAAC,eAAAT,QAAAU,eAAAN,WAAAO,GAAA,GAAAP,UAAA;kBAAA;gBAAA;AAAA,yBAAAQ,aAAAf,aAAAgB,YAAAC,aAAA;AAAA,sBAAAD;AAAAd,sCAAAF,YAAAH,WAAAmB,UAAA;AAAA,sBAAAC;AAAAf,sCAAAF,aAAAiB,WAAA;AAAAN,yBAAAC,eAAAZ,aAAA,aAAA,EAAAU,UAAA,MAAA,CAAA;AAAA,yBAAAV;gBAAA;AAAA,yBAAAa,eAAAK,KAAA;AAAA,sBAAAJ,MAAAK,aAAAD,KAAA,QAAA;AAAA,yBAAAzB,QAAAqB,GAAA,MAAA,WAAAA,MAAAM,OAAAN,GAAA;gBAAA;AAAA,yBAAAK,aAAAE,OAAAC,MAAA;AAAA,sBAAA7B,QAAA4B,KAAA,MAAA,YAAAA,UAAA;AAAA,2BAAAA;AAAA,sBAAAE,OAAAF,MAAA3B,OAAA8B,WAAA;AAAA,sBAAAD,SAAAE,QAAA;AAAA,wBAAAC,MAAAH,KAAAI,KAAAN,OAAAC,QAAA,SAAA;AAAA,wBAAA7B,QAAAiC,GAAA,MAAA;AAAA,6BAAAA;AAAA,0BAAA,IAAAzB,UAAA,8CAAA;kBAAA;AAAA,0BAAAqB,SAAA,WAAAF,SAAAQ,QAAAP,KAAA;gBAAA;AAAA,yBAAAgV,OAAA;AAAA,sBAAA,OAAA5M,YAAA,eAAAA,QAAA1B,KAAA;AAAAsO,2BAAA5M,QAAA1B,IAAAe,KAAA;kBAAA,OAAA;AAAAuN,2BAAA,SAAAA,MAAAlW,QAAAmW,UAAAC,UAAA;AAAA,0BAAAC,OAAAC,eAAAtW,QAAAmW,QAAA;AAAA,0BAAA,CAAAE;AAAA;AAAA,0BAAApO,OAAAzH,OAAAuH,yBAAAsO,MAAAF,QAAA;AAAA,0BAAAlO,KAAAL,KAAA;AAAA,+BAAAK,KAAAL,IAAApG,KAAAgI,UAAArJ,SAAA,IAAAH,SAAAoW,QAAA;sBAAA;AAAA,6BAAAnO,KAAA3F;oBAAA;kBAAA;AAAA,yBAAA4T,KAAAzM,MAAA,MAAAD,SAAA;gBAAA;AAAA,yBAAA8M,eAAAC,QAAAJ,UAAA;AAAA,yBAAA,CAAA3V,OAAAd,UAAAsI,eAAAxG,KAAA+U,QAAAJ,QAAA,GAAA;AAAAI,6BAAApN,gBAAAoN,MAAA;AAAA,wBAAAA,WAAA;AAAA;kBAAA;AAAA,yBAAAA;gBAAA;AAAA,yBAAApO,UAAAC,UAAAC,YAAA;AAAA,sBAAA,OAAAA,eAAA,cAAAA,eAAA,MAAA;AAAA,0BAAA,IAAAvI,UAAA,oDAAA;kBAAA;AAAAsI,2BAAA1I,YAAAc,OAAA8H,OAAAD,cAAAA,WAAA3I,WAAA,EAAAD,aAAA,EAAA6C,OAAA8F,UAAA7H,UAAA,MAAAD,cAAA,KAAA,EAAA,CAAA;AAAAE,yBAAAC,eAAA2H,UAAA,aAAA,EAAA7H,UAAA,MAAA,CAAA;AAAA,sBAAA8H;AAAAE,oCAAAH,UAAAC,UAAA;gBAAA;AAAA,yBAAAE,gBAAAC,GAAAC,GAAA;AAAAF,oCAAA/H,OAAAkI,iBAAAlI,OAAAkI,eAAAC,KAAA,IAAA,SAAAJ,iBAAAC,IAAAC,IAAA;AAAAD,oBAAAA,GAAAI,YAAAH;AAAA,2BAAAD;kBAAA;AAAA,yBAAAD,gBAAAC,GAAAC,CAAA;gBAAA;AAAA,yBAAAI,aAAAC,SAAA;AAAA,sBAAAC,4BAAAC,0BAAA;AAAA,yBAAA,SAAAC,uBAAA;AAAA,wBAAAC,QAAAC,gBAAAL,OAAA,GAAAM;AAAA,wBAAAL,2BAAA;AAAA,0BAAAM,YAAAF,gBAAA,IAAA,EAAA1J;AAAA2J,+BAAAE,QAAAC,UAAAL,OAAAM,WAAAH,SAAA;oBAAA,OAAA;AAAAD,+BAAAF,MAAAO,MAAA,MAAAD,SAAA;oBAAA;AAAA,2BAAAE,2BAAA,MAAAN,MAAA;kBAAA;gBAAA;AAAA,yBAAAM,2BAAAC,OAAAnI,MAAA;AAAA,sBAAAA,SAAAlC,QAAAkC,IAAA,MAAA,YAAA,OAAAA,SAAA,aAAA;AAAA,2BAAAA;kBAAA,WAAAA,SAAA,QAAA;AAAA,0BAAA,IAAA1B,UAAA,0DAAA;kBAAA;AAAA,yBAAA8J,uBAAAD,KAAA;gBAAA;AAAA,yBAAAC,uBAAAD,OAAA;AAAA,sBAAAA,UAAA,QAAA;AAAA,0BAAA,IAAAE,eAAA,2DAAA;kBAAA;AAAA,yBAAAF;gBAAA;AAAA,yBAAAX,4BAAA;AAAA,sBAAA,OAAAM,YAAA,eAAA,CAAAA,QAAAC;AAAA,2BAAA;AAAA,sBAAAD,QAAAC,UAAAO;AAAA,2BAAA;AAAA,sBAAA,OAAAC,UAAA;AAAA,2BAAA;AAAA,sBAAA;AAAAC,4BAAAtK,UAAAuK,QAAAzI,KAAA8H,QAAAC,UAAAS,SAAA,CAAA,GAAA,WAAA;oBAAA,CAAA,CAAA;AAAA,2BAAA;kBAAA,SAAAE,GAAA;AAAA,2BAAA;kBAAA;gBAAA;AAAA,yBAAAf,gBAAAX,GAAA;AAAAW,oCAAA3I,OAAAkI,iBAAAlI,OAAA2J,eAAAxB,KAAA,IAAA,SAAAQ,iBAAAX,IAAA;AAAA,2BAAAA,GAAAI,aAAApI,OAAA2J,eAAA3B,EAAA;kBAAA;AAAA,yBAAAW,gBAAAX,CAAA;gBAAA;AAE/B,oBAGqBoP,eAAY,SAAAE,WAAA;AAAA3P,4BAAAyP,eAAAE,SAAA;AAAA,sBAAAxN,SAAAzB,aAAA+O,aAAA;AAM7B,2BAAAA,cAAYpN,QAAQ;AAAA,wBAAA5D;AAAAjH,oCAAA,MAAAiY,aAAA;AAChBhR,4BAAA0D,OAAA9I,KAAA,MAAMgJ,MAAM;AAEZ5D,0BAAK4D,SAASA;AAOd5D,0BAAKsQ,QAAQ;sBACTa,aAAa;sBACbC,UAAU;sBACVC,QAAQ;sBACRC,cAAc;sBACdT,MAAI,SAAAA,OAAG;sBAAC;sBACRU,OAAK,SAAAA,QAAG;sBAAC;sBACTC,QAAQ;oBACZ;AAGAxR,0BAAKyR,YAAY7N,OAAO6N,UAAUjW,YAAW;AAE7CwE,0BAAK0R,kBAAkB9N,OAAO8N;AAE9B1R,0BAAKvB,QAAQ;AAEbuB,0BAAKsR,eAAe;AAEpBtR,0BAAKwR,SAAS;AAEdxR,0BAAK2R,UAAU;AAEf3R,0BAAK4R,SAAS;AAEd5R,0BAAK6R,YAAY;AAEjB7R,0BAAK8R,iBAAiB,CAAC;AAAE,2BAAA9R;kBAC7B;AAEAhG,+BAAAgX,eAAA,CAAA;oBAAAjX,KAAA;oBAAA2B,OAGA,SAAAsO,OAAO;AACH,2BAAK+F,gBAAgB,KAAKnM,OAAOoM,SAAS;AAC1C,2BAAKC,YAAW;oBACpB;;;;kBAEA,GAAA;oBAAAlW,KAAA;oBAAA2B,OAGA,SAAAqW,uBAAuB;AAAA,0BAAAzL,SAAA;AACnB,2BAAKwL,eAAeE,QAAQ,WAAM;AAC9B1L,+BAAKS,UAAU,SAAS,6BAA6B;sBACzD;AACA,2BAAK+K,eAAeG,UAAU,WAAM;AAChC3L,+BAAKS,UAAU,SAAS;sBAC5B;AACA,2BAAK+K,eAAeI,UAAU,WAAM;AAChC5L,+BAAKS,UAAU,SAAS;sBAC5B;AACA,2BAAK+K,eAAeK,QAAQ,WAAM;AAC9B7L,+BAAKS,UAAU,QAAQ;sBAC3B;AAGA,2BAAK+K,eAAejB,OAAO,WAAM;AAC7BvK,+BAAKS,UAAU,MAAM;sBACzB;AACA,2BAAK+K,eAAeP,QAAQ,WAAM;AAC9BjL,+BAAKS,UAAU,OAAO;sBAC1B;AACA,2BAAK+K,eAAeM,SAAS,SAAAC,OAAS;AAClC/L,+BAAKS,UAAU,MAAM;sBACzB;AACA,2BAAK+K,eAAeQ,eAAe,SAAAD,OAAS;AACxC/L,+BAAKqL,UAAUrL,OAAKgK,MAAMiC;AAC1B,4BAAIjM,OAAKqL,SAAS;AACdrL,iCAAKkL,SAAS;wBAClB,OAAO;AACHlL,iCAAKkL,SAASlL,OAAKgK,MAAMkB;wBAC7B;AACAlL,+BAAKS,UAAU,QAAQ;sBAC3B;AAGAnN,6BAAO4Y,KAAK,KAAKV,cAAc,EAAEzU,QAAQ,SAAAhC,IAAM;AAC3CiL,+BAAKgK,MAAMmC,oBAAoBpX,IAAIiL,OAAKwL,eAAezW,EAAE,CAAC;AAC1DiL,+BAAKgK,MAAM/J,iBAAiBlL,IAAIiL,OAAKwL,eAAezW,EAAE,CAAC;sBAC3D,CAAC;oBACL;;;;kBAEA,GAAA;oBAAAtB,KAAA;oBAAA2B,OAGA,SAAAuU,cAAc;AAAA,0BAAA1E,SAAA;AACV,0BAAMmH,iBAAiB,SAAjBA,kBAAuB;AACzB,4BAAInH,OAAKoH,SAAQ,GAAI;AACjB;wBACJ;AACApH,+BAAKxE,UAAU,gBAAgBwE,OAAKqH,eAAc,CAAE;AAGpDrS,6BAAKiL,MAAMkH,eAAc,EAAC;sBAC9B;AAEA,2BAAKG,GAAG,QAAQH,cAAc;AAI9B,2BAAKG,GAAG,SAAS,WAAM;AACnBtH,+BAAKxE,UAAU,gBAAgBwE,OAAKqH,eAAc,CAAE;sBACxD,CAAC;oBACL;;;;;;;;;;;;kBAEA,GAAA;oBAAA7Y,KAAA;oBAAA2B,OAWA,SAAAoX,KAAKC,KAAKpP,WAAWlF,OAAO8R,SAAS;AACjC,0BAAMD,QAAQjM,SAASC,cAAc,KAAKmN,SAAS;AACnDnB,4BAAM0C,WAAW,KAAKpP,OAAOqP;AAC7B3C,4BAAM4C,WAAW,KAAKtP,OAAOsP,YAAY;AACzC5C,4BAAMC,UAAUA,WAAW,OAAO,SAASA;AAC3CD,4BAAM6C,MAAMJ;AACZzC,4BAAMhU,MAAMJ,QAAQ;AAEpB,0BAAMkX,YAAYzP,UAAU0P,cAAc,KAAK5B,SAAS;AACxD,0BAAI2B,WAAW;AACXzP,kCAAUoF,YAAYqK,SAAS;sBACnC;AACAzP,gCAAUS,YAAYkM,KAAK;AAE3B,2BAAKD,MAAMC,OAAO7R,OAAO8R,OAAO;oBACpC;;;;;;;kBAEA,GAAA;oBAAAxW,KAAA;oBAAA2B,OAMA,SAAA4X,QAAQC,KAAK9U,OAAO;AAChB8U,0BAAIP,WAAW,KAAKpP,OAAOqP;AAC3BM,0BAAIL,WAAW,KAAKtP,OAAOsP,YAAY;AAEvC,2BAAK7C,MAAMkD,KAAK9U,OAAO8U,IAAIhD,OAAO;oBACtC;;;;;;;;;;;;kBAEA,GAAA;oBAAAxW,KAAA;oBAAA2B,OAWA,SAAA2U,MAAMC,OAAO7R,OAAO8R,SAAS;AAEzB,0BACI,EAAED,iBAAiBkD,qBACnB,OAAOlD,MAAM/J,qBAAqB,aACpC;AACE,8BAAM,IAAIkN,MAAM,8CAA8C;sBAClE;AAOA,0BAAI,OAAOnD,MAAMwC,QAAQ,cAAc,EAAErU,SAAS8R,WAAW,SAAS;AAIlED,8BAAMwC,KAAI;sBACd;AAEA,2BAAKxC,QAAQA;AACb,2BAAKyB,qBAAoB;AACzB,2BAAKtT,QAAQA;AACb,2BAAKoT,YAAY;AACjB,2BAAKD,SAAS;AACd,2BAAKD,UAAUrB,MAAMiC;AACrB,2BAAKxC,gBAAgB,KAAKuB,YAAY;AACtC,2BAAKoC,UAAU,KAAKlC,MAAM;oBAC9B;;;;;;kBAEA,GAAA;oBAAAzX,KAAA;oBAAA2B,OAKA,SAAAiX,WAAW;AACP,6BAAO,CAAC,KAAKrC,SAAS,KAAKA,MAAMe;oBACrC;;;;;;kBAEA,GAAA;oBAAAtX,KAAA;oBAAA2B,OAKA,SAAAiY,cAAc;AACV,0BAAI,KAAKC,kBAAkB;AACvB,+BAAO,KAAKA;sBAChB;AACA,0BAAIxC,YAAY,KAAKQ,UAAU,KAAKtB,OAAOc;AAC3C,0BAAIA,YAAYyC,UAAU;AAEtBzC,mCAAW,KAAKd,MAAMwD,SAAS1Y,IAAI,CAAC;sBACxC;AACA,6BAAOgW;oBACX;;;;;;;kBAEA,GAAA;oBAAArX,KAAA;oBAAA2B,OAMA,SAAAkX,iBAAiB;AACb,6BAAO,KAAKtC,SAAS,KAAKA,MAAMa;oBACpC;;;;;;kBAEA,GAAA;oBAAApX,KAAA;oBAAA2B,OAKA,SAAAqY,oBAAoB;AAChB,6BAAO,KAAKnB,eAAc,IAAK,KAAKe,YAAW,KAAM;oBACzD;;;;;;kBAEA,GAAA;oBAAA5Z,KAAA;oBAAA2B,OAKA,SAAAsY,kBAAkB;AACd,6BAAO,KAAK1C,gBAAgB,KAAKhB,MAAMgB;oBAC3C;;;;;;kBAEA,GAAA;oBAAAvX,KAAA;oBAAA2B,OAKA,SAAAqU,gBAAgBrU,OAAO;AACnB,2BAAK4V,eAAe5V,SAAS;AAC7B,2BAAK4U,MAAMgB,eAAe,KAAKA;oBACnC;;;;;;kBAEA,GAAA;oBAAAvX,KAAA;oBAAA2B,OAKA,SAAAuY,OAAO9Y,OAAO;AACV,0BAAIA,SAAS,QAAQ,CAAC+Y,MAAM/Y,KAAK,GAAG;AAChC,6BAAKmV,MAAMa,cAAchW;sBAC7B;AACA,2BAAKgZ,aAAY;oBACrB;;;;;;;;;;kBAEA,GAAA;oBAAApa,KAAA;oBAAA2B,OASA,SAAAmV,KAAK1V,OAAOC,KAAK;AACb,2BAAK6Y,OAAO9Y,KAAK;AACjB,0BAAMiZ,UAAU,KAAK9D,MAAMO,KAAI;AAC/BzV,6BAAO,KAAKiZ,WAAWjZ,GAAG;AAE1B,6BAAOgZ;oBACX;;;;;;;kBAEA,GAAA;oBAAAra,KAAA;oBAAA2B,OAMA,SAAA6V,QAAQ;AACJ,0BAAI6C;AAEJ,0BAAI,KAAK9D,OAAO;AACZ8D,kCAAU,KAAK9D,MAAMiB,MAAK;sBAC9B;AACA,2BAAK4C,aAAY;AAEjB,6BAAOC;oBACX;;;;;;kBAEA,GAAA;oBAAAra,KAAA;oBAAA2B,OAKA,SAAA2Y,WAAWjZ,KAAK;AAAA,0BAAAqQ,SAAA;AACZ,2BAAK0I,aAAY;AAEjB,2BAAKG,aAAa,SAAAC,MAAQ;AACtB,4BAAIA,QAAQnZ,KAAK;AACbqQ,iCAAK8F,MAAK;AACV9F,iCAAKwI,OAAO7Y,GAAG;wBACnB;sBACJ;AACA,2BAAKyX,GAAG,gBAAgB,KAAKyB,UAAU;oBAC3C;;kBAEA,GAAA;oBAAAva,KAAA;oBAAA2B,OACA,SAAAyY,eAAe;AACX,0BAAI,KAAKG,YAAY;AACjB,6BAAKE,GAAG,gBAAgB,KAAKF,UAAU;AACvC,6BAAKA,aAAa;sBACtB;oBACJ;;;;;;;;;;;kBAEA,GAAA;oBAAAva,KAAA;oBAAA2B,OAUA,SAAA+Y,SAASlb,QAAQuF,OAAOG,MAAM;AAC1B,0BAAI,KAAK2S,QAAQ;AACb,+BAAAtC,KAAA/M,gBAAAyO,cAAAlY,SAAA,GAAA,YAAA,IAAA,EAAA8B,KAAA,MAAsBrB,QAAQuF,OAAOG,IAAI;sBAC7C;AACA,6BAAO,KAAKR,SAAS,CAAA;oBACzB;;;;;;;;kBAEA,GAAA;oBAAA1E,KAAA;oBAAA2B,OAOA,SAAAgZ,UAAUC,UAAU;AAChB,0BAAIA,UAAU;AACV,4BAAI,CAAC,KAAKrE,MAAMoE,WAAW;AACvB,iCAAOzU,QAAQ2U,OACX,IAAInB,MAAM,4CAA4C,CAAC;wBAE/D;AACA,+BAAO,KAAKnD,MAAMoE,UAAUC,QAAQ;sBACxC;AAEA,6BAAO1U,QAAQ2U,OAAO,IAAInB,MAAM,uBAAuBkB,QAAQ,CAAC;oBACpE;;;;;;kBAEA,GAAA;oBAAA5a,KAAA;oBAAA2B,OAKA,SAAAmZ,YAAY;AACR,6BAAO,KAAKrD;oBAChB;;;;;;kBAEA,GAAA;oBAAAzX,KAAA;oBAAA2B,OAKA,SAAAgY,UAAUhY,OAAO;AACb,2BAAK8V,SAAS9V;AAEd,0BAAI,KAAK4U,MAAMkB,WAAW,KAAKA,QAAQ;AACnC,6BAAKlB,MAAMkB,SAAS,KAAKA;sBAC7B;oBACJ;;;;;;;kBAEA,GAAA;oBAAAzX,KAAA;oBAAA2B,OAMA,SAAAoZ,QAAQvC,OAAO;AAGX,2BAAKZ,UAAU,KAAKrB,MAAMiC,QAAQA;oBACtC;;;;;kBAEA,GAAA;oBAAAxY,KAAA;oBAAA2B,OAIA,SAAAiE,UAAU;AAAA,0BAAA+M,SAAA;AACN,2BAAK6E,MAAK;AACV,2BAAK3I,MAAK;AACV,2BAAKmM,YAAY;AAGjBnb,6BAAO4Y,KAAK,KAAKV,cAAc,EAAEzU,QAAQ,SAAAhC,IAAM;AAC3C,4BAAIqR,OAAK4D,OAAO;AACZ5D,iCAAK4D,MAAMmC,oBAAoBpX,IAAIqR,OAAKoF,eAAezW,EAAE,CAAC;wBAC9D;sBACJ,CAAC;AAED,0BACI,KAAKuI,OAAOoR,+BACZ,KAAK1E,SACL,KAAKA,MAAMzH,YACb;AACE,6BAAKyH,MAAMzH,WAAWE,YAAY,KAAKuH,KAAK;sBAChD;AAEA,2BAAKA,QAAQ;oBACjB;kBAAC,CAAA,CAAA;AAAA,yBAAAU;gBAAA,EAnbqCiE,UAAAA,OAAQ;AAAA5U,gBAAAA,SAAAA,SAAAA,IAAA2Q;AAAA1Q,gBAAAA,QAAAD,UAAAA,SAAA5H;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNlD,oBAKqByc,YAAS,WAAA;AAI1B,2BAAAA,aAAc;AAAAnc,oCAAA,MAAAmc,UAAA;AACV,yBAAKC,eAAc;kBACvB;AAEAnb,+BAAAkb,YAAA,CAAA;oBAAAnb,KAAA;oBAAA2B,OAGA,SAAAyZ,iBAAiB;AAOb,2BAAKC,kBAAkB,CAAA;AAMvB,2BAAKC,kBAAkB;oBAC3B;;;;;;;;;kBAEA,GAAA;oBAAAtb,KAAA;oBAAA2B,OAQA,SAAA4Z,oBAAoB/b,QAAQ4B,OAAOC,KAAK;AACpC,0BAAI7B,UAAU,KAAK8b,iBAAiB;AAChC,6BAAKF,eAAc;AACnB,6BAAKE,kBAAkB9b;sBAC3B;AAGA,0BAAIgc,iBAAiB,CAAA;AACrB,0BAAIjc,IAAI;AAER,6BACIA,IAAI,KAAK8b,gBAAgB7b,UACzB,KAAK6b,gBAAgB9b,CAAC,IAAI6B,OAC5B;AACE7B;sBACJ;AAKA,0BAAIA,IAAI,KAAK,GAAG;AACZic,uCAAepK,KAAKhQ,KAAK;sBAC7B;AACA,6BACI7B,IAAI,KAAK8b,gBAAgB7b,UACzB,KAAK6b,gBAAgB9b,CAAC,KAAK8B,KAC7B;AACEma,uCAAepK,KAAK,KAAKiK,gBAAgB9b,CAAC,CAAC;AAC3CA;sBACJ;AAEA,0BAAIA,IAAI,KAAK,GAAG;AACZic,uCAAepK,KAAK/P,GAAG;sBAC3B;AAGAma,uCAAiBA,eAAejH,OAAO,SAACkH,MAAMjN,KAAKkN,KAAQ;AACvD,4BAAIlN,OAAO,GAAG;AACV,iCAAOiN,QAAQC,IAAIlN,MAAM,CAAC;wBAC9B,WAAWA,OAAOkN,IAAIlc,SAAS,GAAG;AAC9B,iCAAOic,QAAQC,IAAIlN,MAAM,CAAC;wBAC9B;AACA,+BAAOiN,QAAQC,IAAIlN,MAAM,CAAC,KAAKiN,QAAQC,IAAIlN,MAAM,CAAC;sBACtD,CAAC;AAKD,2BAAK6M,kBAAkB,KAAKA,gBAAgBM,OAAOH,cAAc;AACjE,2BAAKH,kBAAkB,KAAKA,gBACvBO,KAAK,SAACC,GAAGC,GAAC;AAAA,+BAAKD,IAAIC;sBAAC,CAAA,EACpBvH,OAAO,SAACkH,MAAMjN,KAAKkN,KAAQ;AACxB,4BAAIlN,OAAO,GAAG;AACV,iCAAOiN,QAAQC,IAAIlN,MAAM,CAAC;wBAC9B,WAAWA,OAAOkN,IAAIlc,SAAS,GAAG;AAC9B,iCAAOic,QAAQC,IAAIlN,MAAM,CAAC;wBAC9B;AACA,+BAAOiN,QAAQC,IAAIlN,MAAM,CAAC,KAAKiN,QAAQC,IAAIlN,MAAM,CAAC;sBACtD,CAAC;AAIL,0BAAMuN,qBAAqB,CAAA;AAC3B,2BAAKxc,IAAI,GAAGA,IAAIic,eAAehc,QAAQD,KAAK,GAAG;AAC3Cwc,2CAAmB3K,KAAK,CAACoK,eAAejc,CAAC,GAAGic,eAAejc,IAAI,CAAC,CAAC,CAAC;sBACtE;AAEA,6BAAOwc;oBACX;;;;;;kBAEA,GAAA;oBAAA/b,KAAA;oBAAA2B,OAKA,SAAAqa,iBAAiB;AACb,0BAAMC,sBAAsB,CAAA;AAC5B,0BAAI1c;AACJ,2BAAKA,IAAI,GAAGA,IAAI,KAAK8b,gBAAgB7b,QAAQD,KAAK,GAAG;AACjD0c,4CAAoB7K,KAAK,CACrB,KAAKiK,gBAAgB9b,CAAC,GACtB,KAAK8b,gBAAgB9b,IAAI,CAAC,CAAC,CAC9B;sBACL;AACA,6BAAO0c;oBACX;kBAAC,CAAA,CAAA;AAAA,yBAAAd;gBAAA,EAAA;AAAA7U,gBAAAA,SAAAA,SAAAA,IAAA6U;AAAA5U,gBAAAA,QAAAD,UAAAA,SAAA5H;;;;;;;;;;;;;;;AC7HL,oBAAAwd,OAAA7d,uBAAAC;;kBAAA;gBAAA,CAAA;AACA,oBAAA6d,OAAA9d,uBAAAC;;kBAAA;gBAAA,CAAA;AAA4B,yBAAAD,uBAAAG,KAAA;AAAA,yBAAAA,OAAAA,IAAAC,aAAAD,MAAA,EAAAE,SAAAF,IAAA;gBAAA;AAUb,yBAASsW,OAAOsH,QAAQ;AACnC,sBAAMnO,OAAM,GAAAoO,KAAAA,SAAQD,MAAM;AAC1B,sBAAMlO,OAAM,GAAAoO,KAAAA,SAAQF,MAAM;AAC1B,yBAAO,CAAClO,MAAMD,MAAM,CAACC,MAAMD;gBAC/B;AAAC1H,gBAAAA,QAAAD,UAAAA,SAAA5H;;;;;;;;;;;;;;;ACPc,yBAASwN,MAAMiJ,KAAKjH,KAAKD,KAAK;AACzC,yBAAOjJ,KAAKkJ,IAAIlJ,KAAKiJ,IAAIC,KAAKiH,GAAG,GAAGlH,GAAG;gBAC3C;AAAC1H,gBAAAA,QAAAD,UAAAA,SAAA5H;;;;;;;;;;;;;;;ACND,oBAAA6d,YAAAle,uBAAAC;;kBAAA;gBAAA,CAAA;AAAkC,yBAAAD,uBAAAG,KAAA;AAAA,yBAAAA,OAAAA,IAAAC,aAAAD,MAAA,EAAAE,SAAAF,IAAA;gBAAA;AAAA,yBAAAG,QAAAH,KAAA;AAAA;AAAA,yBAAAG,UAAA,cAAA,OAAAC,UAAA,YAAA,OAAAA,OAAAC,WAAA,SAAAL,MAAA;AAAA,2BAAA,OAAAA;kBAAA,IAAA,SAAAA,MAAA;AAAA,2BAAAA,QAAA,cAAA,OAAAI,UAAAJ,KAAAM,gBAAAF,UAAAJ,SAAAI,OAAAG,YAAA,WAAA,OAAAP;kBAAA,GAAAG,QAAAH,GAAA;gBAAA;AAAA,yBAAAQ,gBAAAC,UAAAC,aAAA;AAAA,sBAAA,EAAAD,oBAAAC,cAAA;AAAA,0BAAA,IAAAC,UAAA,mCAAA;kBAAA;gBAAA;AAAA,yBAAAC,kBAAAC,QAAAC,OAAA;AAAA,2BAAAC,IAAA,GAAAA,IAAAD,MAAAE,QAAAD,KAAA;AAAA,wBAAAE,aAAAH,MAAAC,CAAA;AAAAE,+BAAAC,aAAAD,WAAAC,cAAA;AAAAD,+BAAAE,eAAA;AAAA,wBAAA,WAAAF;AAAAA,iCAAAG,WAAA;AAAAC,2BAAAC,eAAAT,QAAAU,eAAAN,WAAAO,GAAA,GAAAP,UAAA;kBAAA;gBAAA;AAAA,yBAAAQ,aAAAf,aAAAgB,YAAAC,aAAA;AAAA,sBAAAD;AAAAd,sCAAAF,YAAAH,WAAAmB,UAAA;AAAA,sBAAAC;AAAAf,sCAAAF,aAAAiB,WAAA;AAAAN,yBAAAC,eAAAZ,aAAA,aAAA,EAAAU,UAAA,MAAA,CAAA;AAAA,yBAAAV;gBAAA;AAAA,yBAAAa,eAAAK,KAAA;AAAA,sBAAAJ,MAAAK,aAAAD,KAAA,QAAA;AAAA,yBAAAzB,QAAAqB,GAAA,MAAA,WAAAA,MAAAM,OAAAN,GAAA;gBAAA;AAAA,yBAAAK,aAAAE,OAAAC,MAAA;AAAA,sBAAA7B,QAAA4B,KAAA,MAAA,YAAAA,UAAA;AAAA,2BAAAA;AAAA,sBAAAE,OAAAF,MAAA3B,OAAA8B,WAAA;AAAA,sBAAAD,SAAAE,QAAA;AAAA,wBAAAC,MAAAH,KAAAI,KAAAN,OAAAC,QAAA,SAAA;AAAA,wBAAA7B,QAAAiC,GAAA,MAAA;AAAA,6BAAAA;AAAA,0BAAA,IAAAzB,UAAA,8CAAA;kBAAA;AAAA,0BAAAqB,SAAA,WAAAF,SAAAQ,QAAAP,KAAA;gBAAA;AAAA,oBAE5Bic,kBAAe,WAAA;AAQjB,2BAAAA,iBAAYvd,UAAUwd,eAAeC,UAAU;AAAA1d,oCAAA,MAAAwd,gBAAA;AAC3C,yBAAKvd,WAAWA;AAChB,yBAAKA,SAAS0d,UAAUD,SAASE,KAAKC,UAAS;AAE/C,yBAAKC,QAAQC,SAASN,eAAe,EAAE;AACvC,yBAAKO,SAAS;kBAClB;AAEA/c,+BAAAuc,kBAAA,CAAA;oBAAAxc,KAAA;oBAAA2B,OAOA,SAAAP,MAAM6b,YAAY;AAAA,0BAAAhX,QAAA;AACd,0BAAMiX,OAAO,SAAPA,QAAa;AAGfjX,8BAAKhH,SAAS0d,QACTO,KAAI,EACJC,KAAK,SAAAvL,MAAqB;AAAA,8BAAlBwL,OAAIxL,KAAJwL,MAAMzb,QAAKiQ,KAALjQ;AAIX,8BAAIyb,MAAM;AAEN,gCAAInX,MAAK6W,UAAU,GAAG;AAClB7W,oCAAKhH,SAASoe,WAAWxc,KAAKoF,MAAKhH,UAAU;gCACzC+d,QAAQ/W,MAAK+W;gCACbF,OAAO7W,MAAK6W;gCACZQ,kBAAkB;8BACtB,CAAC;4BACL;AAEAL,uCAAWM,MAAK;AAChB;0BACJ;AAEAtX,gCAAK+W,UAAUrb,MAAM6b;AACrBvX,gCAAKhH,SAASoe,WAAWxc,KAAKoF,MAAKhH,UAAU;4BACzC+d,QAAQ/W,MAAK+W;4BACbF,OAAO7W,MAAK6W;4BACZQ,kBAAkB,EAAErX,MAAK6W,UAAU;0BACvC,CAAC;AAEDG,qCAAWQ,QAAQ9b,KAAK;AACxBub,0BAAAA,MAAI;wBACR,CAAC,EACAQ,MAAM,SAAAzF,OAAS;AACZgF,qCAAWhF,MAAMA,KAAK;wBAC1B,CAAC;sBACT;AAEAiF,2BAAI;oBACR;kBAAC,CAAA,CAAA;AAAA,yBAAAV;gBAAA,EAAA;AA4CU,yBAASmB,UAAUC,SAAS;AACvC,sBAAI,CAACA,SAAS;AACV,0BAAM,IAAIlE,MAAM,uBAAuB;kBAC3C,WAAW,CAACkE,QAAQ5E,KAAK;AACrB,0BAAM,IAAIU,MAAM,mBAAmB;kBACvC;AACA,sBAAMza,WAAW,IAAIkQ,UAAAA,QAAQ;AAC7B,sBAAM0O,eAAe,IAAIC,QAAO;AAChC,sBAAMC,eAAe,IAAIC,QAAQJ,QAAQ5E,GAAG;AAG5C/Z,2BAASge,aAAa,IAAIgB,gBAAe;AAGzC,sBAAIL,WAAWA,QAAQM,gBAAgB;AAEnCN,4BAAQM,eAAe5a,QAAQ,SAAA6a,QAAU;AACrCN,mCAAaO,OAAOD,OAAOne,KAAKme,OAAOxc,KAAK;oBAChD,CAAC;kBACL;AAGA,sBAAM0c,eAAeT,QAAQS,gBAAgB;AAC7C,sBAAMC,eAAe;oBACjBC,QAAQX,QAAQW,UAAU;oBAC1BC,SAASX;oBACTY,MAAMb,QAAQa,QAAQ;oBACtBC,aAAad,QAAQc,eAAe;oBACpC3X,OAAO6W,QAAQ7W,SAAS;oBACxB4X,UAAUf,QAAQe,YAAY;oBAC9BC,UAAUhB,QAAQgB,YAAY;oBAC9BC,QAAQ5f,SAASge,WAAW4B;kBAChC;AAEAC,wBAAMf,cAAcO,YAAY,EAC3BnB,KAAK,SAAAT,UAAY;AAEdzd,6BAASyd,WAAWA;AAEpB,wBAAIqC,oBAAoB;AACxB,wBAAI,CAACrC,SAASE,MAAM;AAGhBmC,0CAAoB;oBACxB;AAGA,wBAAMtC,gBAAgBC,SAAS8B,QAAQvX,IAAI,gBAAgB;AAC3D,wBAAIwV,kBAAkB,MAAM;AAIxBsC,0CAAoB;oBACxB;AAEA,wBAAI,CAACA,mBAAmB;AAEpB,6BAAOrC;oBACX;AAGAzd,6BAASoe,aAAa,SAAA9T,GAAK;AACvBtK,+BAAS+N,UAAU,YAAYzD,CAAC;oBACpC;AAEA,2BAAO,IAAIyV,SACP,IAAIC,eACA,IAAIzC,gBAAgBvd,UAAUwd,eAAeC,QAAQ,CAAC,GAE1D4B,YAAY;kBAEpB,CAAC,EACAnB,KAAK,SAAAT,UAAY;AACd,wBAAIwC;AACJ,wBAAIxC,SAASyC,IAAI;AACb,8BAAQd,cAAY;wBAChB,KAAK;AACD,iCAAO3B,SAAS0C,YAAW;wBAE/B,KAAK;AACD,iCAAO1C,SAAS2C,KAAI;wBAExB,KAAK;AACD,iCAAO3C,SAAS4C,KAAI;wBAExB,KAAK;AACD,iCAAO5C,SAAS6C,KAAI;wBAExB;AACIL,mCAAS,2BAA2Bb;AACpC;sBAAM;oBAElB;AACA,wBAAI,CAACa,QAAQ;AACTA,+BAAS,wBAAwBxC,SAAS8C;oBAC9C;AACA,0BAAM,IAAI9F,MAAMwF,MAAM;kBAC1B,CAAC,EACA/B,KAAK,SAAAT,UAAY;AACdzd,6BAAS+N,UAAU,WAAW0P,QAAQ;kBAC1C,CAAC,EACAgB,MAAM,SAAAzF,OAAS;AACZhZ,6BAAS+N,UAAU,SAASiL,KAAK;kBACrC,CAAC;AAGLhZ,2BAAS8e,eAAeA;AACxB,yBAAO9e;gBACX;AAACsH,gBAAAA,QAAAD,UAAAA,SAAA5H;;;;;;;;;;;;;;;AC7ND,oBAAA+gB,yBAAAphB,uBAAAC;;kBAAA;gBAAA,CAAA;AAA0D,yBAAAD,uBAAAG,KAAA;AAAA,yBAAAA,OAAAA,IAAAC,aAAAD,MAAA,EAAAE,SAAAF,IAAA;gBAAA;AAU3C,yBAASiT,MAAMiO,MAAM;AAChC,yBAAO,WAAA;AAAA,6BAAAC,OAAA9W,UAAArJ,QAAIogB,OAAI,IAAAxL,MAAAuL,IAAA,GAAAE,OAAA,GAAAA,OAAAF,MAAAE,QAAA;AAAJD,2BAAIC,IAAA,IAAAhX,UAAAgX,IAAA;oBAAA;AAAA,4BAAK,GAAAC,uBAAAA,SAAkB,WAAA;AAAA,6BAAMJ,KAAI5W,MAAA,QAAI8W,IAAI;oBAAC,CAAA;kBAAC;gBAC9D;AAACrZ,gBAAAA,QAAAD,UAAAA,SAAA5H;;;;;;;;;;;;;;;ACDc,yBAAS6C,MAAMwe,QAAQ;AAClC,sBAAIA,WAAWpf,QAAW;AACtBof,6BAAS;kBACb;AACA,yBACIA,SACA/a,KAAKgb,OAAM,EACNC,SAAS,EAAE,EACXC,UAAU,CAAC;gBAExB;AAAC3Z,gBAAAA,QAAAD,UAAAA,SAAA5H;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrBD,oBAAAH,SAAAF,uBAAAC;;kBAAA;gBAAA,CAAA;AACA,oBAAA4d,OAAA7d,uBAAAC;;kBAAA;gBAAA,CAAA;AACA,oBAAA6d,OAAA9d,uBAAAC;;kBAAA;gBAAA,CAAA;AACA,oBAAA6hB,UAAA9hB,uBAAAC;;kBAAA;gBAAA,CAAA;AACA,oBAAAie,YAAAle,uBAAAC;;kBAAA;gBAAA,CAAA;AACA,oBAAAF,SAAAC,uBAAAC;;kBAAA;gBAAA,CAAA;AACA,oBAAAmhB,yBAAAphB,uBAAAC;;kBAAA;gBAAA,CAAA;AACA,oBAAA8hB,SAAA/hB,uBAAAC;;kBAAA;gBAAA,CAAA;AACA,oBAAA+hB,YAAAhiB,uBAAAC;;kBAAA;gBAAA,CAAA;AACA,oBAAAgiB,gBAAAjiB,uBAAAC;;kBAAA;gBAAA,CAAA;AACA,oBAAAiiB,SAAAliB,uBAAAC;;kBAAA;gBAAA,CAAA;AACA,oBAAAkiB,SAAAniB,uBAAAC;;kBAAA;gBAAA,CAAA;AACA,oBAAAmiB,eAAApiB,uBAAAC;;kBAAA;gBAAA,CAAA;AACA,oBAAAoiB,eAAAriB,uBAAAC;;kBAAA;gBAAA,CAAA;AAA8D,yBAAAD,uBAAAG,KAAA;AAAA,yBAAAA,OAAAA,IAAAC,aAAAD,MAAA,EAAAE,SAAAF,IAAA;gBAAA;;;;;;;;;;;;;;;ACN/C,yBAASyP,IAAImO,QAAQ;AAChC,sBAAIuE,UAAU;AACd9gB,yBAAO4Y,KAAK2D,MAAM,EAAE9Y,QAAQ,SAAA/D,GAAK;AAC7B,wBAAI6c,OAAO7c,CAAC,IAAIohB,SAAS;AACrBA,gCAAUvE,OAAO7c,CAAC;oBACtB;kBACJ,CAAC;AACD,yBAAOohB;gBACX;AAACpa,gBAAAA,QAAAD,UAAAA,SAAA5H;;;;;;;;;;;;;;;ACRc,yBAASwP,IAAIkO,QAAQ;AAChC,sBAAIwE,WAAW9f,OAAOgZ,QAAQ;AAC9Bja,yBAAO4Y,KAAK2D,MAAM,EAAE9Y,QAAQ,SAAA/D,GAAK;AAC7B,wBAAI6c,OAAO7c,CAAC,IAAIqhB,UAAU;AACtBA,iCAAWxE,OAAO7c,CAAC;oBACvB;kBACJ,CAAC;AACD,yBAAOqhB;gBACX;AAACra,gBAAAA,QAAAD,UAAAA,SAAA5H;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRD,oBAGqByQ,WAAQ,WAAA;AAIzB,2BAAAA,YAAc;AAAAnQ,oCAAA,MAAAmQ,SAAA;AAMV,yBAAK0R,0BAA0B,CAAA;AAC/B,yBAAKC,WAAW;kBACpB;AACA7gB,+BAAAkP,WAAA,CAAA;oBAAAnP,KAAA;oBAAA2B,OAOA,SAAAmX,GAAGR,OAAOtE,IAAI;AAAA,0BAAA/N,QAAA;AACV,0BAAI,CAAC,KAAK6a,UAAU;AAChB,6BAAKA,WAAW,CAAC;sBACrB;AAEA,0BAAIA,WAAW,KAAKA,SAASxI,KAAK;AAClC,0BAAI,CAACwI,UAAU;AACXA,mCAAW,KAAKA,SAASxI,KAAK,IAAI,CAAA;sBACtC;AACAwI,+BAAS1P,KAAK4C,EAAE;AAGhB,6BAAO;wBACHxS,MAAM8W;wBACNyI,UAAU/M;wBACVyG,IAAI,SAAAA,GAAClR,GAAGyK,KAAE;AAAA,iCAAK/N,MAAKwU,GAAGlR,GAAGyK,GAAE;wBAAC;sBACjC;oBACJ;;;;;;;;kBAEA,GAAA;oBAAAhU,KAAA;oBAAA2B,OAOA,SAAA8Y,GAAGnC,OAAOtE,IAAI;AACV,0BAAI,CAAC,KAAK8M,UAAU;AAChB;sBACJ;AAEA,0BAAMA,WAAW,KAAKA,SAASxI,KAAK;AACpC,0BAAI/Y;AACJ,0BAAIuhB,UAAU;AACV,4BAAI9M,IAAI;AACJ,+BAAKzU,IAAIuhB,SAASthB,SAAS,GAAGD,KAAK,GAAGA,KAAK;AACvC,gCAAIuhB,SAASvhB,CAAC,KAAKyU,IAAI;AACnB8M,uCAASE,OAAOzhB,GAAG,CAAC;4BACxB;0BACJ;wBACJ,OAAO;AACHuhB,mCAASthB,SAAS;wBACtB;sBACJ;oBACJ;;;;kBAEA,GAAA;oBAAAQ,KAAA;oBAAA2B,OAGA,SAAAkN,QAAQ;AACJ,2BAAKiS,WAAW;oBACpB;;;;;;;;;kBAEA,GAAA;oBAAA9gB,KAAA;oBAAA2B,OAQA,SAAAsf,KAAK3I,OAAO4I,SAAS;AAAA,0BAAA3U,SAAA;AACjB,0BAAMyH,KAAK,SAALA,MAAkB;AAAA,iCAAA2L,OAAA9W,UAAArJ,QAATogB,OAAI,IAAAxL,MAAAuL,IAAA,GAAAE,OAAA,GAAAA,OAAAF,MAAAE,QAAA;AAAJD,+BAAIC,IAAA,IAAAhX,UAAAgX,IAAA;wBAAA;AAEfqB,gCAAQpY,MAAMyD,QAAMqT,IAAI;AAExBuB,mCAAW,WAAM;AACb5U,iCAAKkO,GAAGnC,OAAOtE,GAAE;wBACrB,GAAG,CAAC;sBACR;AACA,6BAAO,KAAK8E,GAAGR,OAAOtE,EAAE;oBAC5B;;;;;;;;;;;kBAEA,GAAA;oBAAAhU,KAAA;oBAAA2B,OAUA,SAAAyf,0BAA0BC,YAAY;AAClC,2BAAKR,0BAA0BQ;oBACnC;;;;;kBAEA,GAAA;oBAAArhB,KAAA;oBAAA2B,OAKA,SAAA2f,yBAAyBhJ,OAAO;AAC5B,6BAAO,KAAKuI,2BAA2B,KAAKA,wBAAwB9M,SAASuE,KAAK;oBACtF;;;;;;;kBAEA,GAAA;oBAAAtY,KAAA;oBAAA2B,OAMA,SAAAqL,UAAUsL,OAAgB;AAAA,+BAAAiJ,QAAA1Y,UAAArJ,QAANogB,OAAI,IAAAxL,MAAAmN,QAAA,IAAAA,QAAA,IAAA,CAAA,GAAAC,QAAA,GAAAA,QAAAD,OAAAC,SAAA;AAAJ5B,6BAAI4B,QAAA,CAAA,IAAA3Y,UAAA2Y,KAAA;sBAAA;AACpB,0BAAI,CAAC,KAAKV,YAAY,KAAKQ,yBAAyBhJ,KAAK,GAAG;AACxD;sBACJ;AAEA,0BAAMwI,WAAW,KAAKA,SAASxI,KAAK;AACpCwI,kCACIA,SAASxd,QAAQ,SAAA0Q,IAAM;AACnBA,2BAAElL,MAAA,QAAI8W,IAAI;sBACd,CAAC;oBACT;kBAAC,CAAA,CAAA;AAAA,yBAAAzQ;gBAAA,EAAA;AAAA7I,gBAAAA,SAAAA,SAAAA,IAAA6I;AAAA5I,gBAAAA,QAAAD,UAAAA,SAAA5H;;;;;;;;;;;;;;;AC9IL,oBAAM+iB,kBAAkB;kBACpBtf,OAAO;kBACPC,QAAQ;kBAER4I,WAAW;kBACXE,WAAW;kBAEX0C,aAAa;kBACbhB,cAAc;kBAEdrB,SAAS;kBACTsB,SAAS;kBAETZ,aAAa;kBACbD,YAAY;kBAEZ3J,YAAY;kBACZqf,WAAW;kBACX/U,cAAc;kBACdgV,aAAa;kBAEbrV,MAAM;kBACND,OAAO;kBACP+D,KAAK;kBACLtD,QAAQ;kBAERyD,kBAAkB;kBAClBG,kBAAkB;kBAClBE,kBAAkB;gBACtB;AASA,yBAASgR,QAAQC,MAAMne,UAAU;AAC7B,sBAAI7D,OAAOd,UAAUsI,eAAexG,KAAK4gB,iBAAiBI,IAAI,GAAG;AAC7D,2BAAOne,WAAW+d,gBAAgBI,IAAI,IAAIA;kBAC9C,OAAO;AACH,2BAAOA;kBACX;gBACJ;AAEA,oBAAMC,UAAUljB,OAAO,SAAS;AAgBjB,yBAASkL,gBAAgBzK,QAAQqE,UAAU;AACtD,sBAAIrE,OAAOyiB,OAAO,GAAG;AACjB,2BAAOziB;kBACX,OAAO;AACH,2BAAO,IAAI+J,MACP/J,QAAQ;sBACJ4H,KAAK,SAAAA,IAASzI,KAAKqjB,MAAMpM,UAAU;AAC/B,4BAAIoM,SAASC,SAAS;AAClB,iCAAO;wBACX,WAAWD,SAAS,cAAc;AAC9B,iCAAOrjB;wBACX,WAAWqjB,SAAS,SAAS;AACzB,iCAAO/X,gBAAgBtL,IAAI+D,OAAOmB,QAAQ;wBAC9C,WAAWme,SAAS,UAAU;AAC1B,iCAAO/X,gBAAgBtL,IAAImE,QAAQe,QAAQ;wBAC/C,WAAWme,SAAS,yBAAyB;AACzC,iCAAO,WAAkB;AACrB,mCAAO/X,gBAAgBtL,IAAIkN,sBAAqB5C,MAAzBtK,KAAGqK,SAAA,GAAiCnF,QAAQ;0BACvE;wBACJ,WAAWme,SAAS,cAAc;AAC9B,iCAAO,WAAkB;AACrB,mCAAO/X,gBAAgBtL,IAAIsD,WAAUgH,MAAdtK,KAAGqK,SAAA,GAAsBnF,QAAQ;0BAC5D;wBACJ,OAAO;AACH,8BAAI/B,QAAQnD,IAAIojB,QAAQC,MAAMne,QAAQ,CAAC;AACvC,iCAAO,OAAO/B,SAAS,aAAaA,MAAMqG,KAAKxJ,GAAG,IAAImD;wBAC1D;sBACJ;sBACA4F,KAAK,SAAAA,IAAS/I,KAAKqjB,MAAMlgB,OAAO;AAC5BnD,4BAAIojB,QAAQC,MAAMne,QAAQ,CAAC,IAAI/B;AAC/B,+BAAO;sBACX;oBACJ,CAAC;kBAET;gBACJ;AAAC4E,gBAAAA,QAAAD,UAAAA,SAAA5H;;;;;;;;;;;;;;;AC3FD,yBAASqjB,oBAAoBzJ,OAAO;AAChCA,wBAAM0J,gBAAe;AACrB1X,2BAASsS,KAAKlE,oBAAoB,SAASqJ,qBAAqB,IAAI;gBACxE;AAOe,yBAASE,aAAa7F,QAAQ;AACzC9R,2BAASsS,KAAKpQ,iBAAiB,SAASuV,qBAAqB,IAAI;gBACrE;AAACxb,gBAAAA,QAAAD,UAAAA,SAAA5H;;;;;;;;;;;;;;;ACjBD,oBAAAwjB,YAOIC,OAAOC,yBACPD,OAAOE,+BACPF,OAAOG,4BACPH,OAAOI,0BACPJ,OAAOK,2BACN,SAACzB,UAAUlf,SAAO;AAAA,yBAAKsf,WAAWJ,UAAU,MAAO,EAAE;gBAAC,GACzD/Y,KAAKma,MAAM;AAAC7b,gBAAAA,SAAAA,SAAAA,IAAA4b;AAAA3b,gBAAAA,QAAAD,UAAAA,SAAA5H;;;;;;;;;;;;;;;ACHC,yBAAS+jB,oBAAoB;AAExC,sBAAMC,WAAW,IAAIC,aAAY;AACjC,sBAAMC,WAAWF,SAASG,mBAAkB;AAC5CD,2BAAS/K,SAAS6K,SAASI,aAAa,GAAG,GAAG,KAAK;AACnDF,2BAAShM,QAAQ8L,SAASK,WAAW;AACrCH,2BAASxhB,MAAK;AAMd,sBAAM4hB,YAAY;AAGlB,sBAAIC,MAAM3Y,SAASC,cAAc,KAAK;AACtC0Y,sBAAIC,YAAY;AAEhB,sBAAIC,kBAAkBF,IAAIG,SAAS3H,KAAK,CAAC;AACzC0H,kCAAgB/J,MAAM4J;AACtBG,kCAAgB3M,UAAU;AAC1B2M,kCAAgBnd,OAAO;AACvBmd,kCAAgBE,wBAAwB;AAGxCF,kCAAgBrM,KAAI;AAGpBqM,kCAAgBG,OAAM;AACtBL,sBAAIK,OAAM;gBACd;AAAC/c,gBAAAA,QAAAD,UAAAA,SAAA5H;;;;;;;;;;;;;;;ACjCc,yBAAS6D,MAAM2H,IAAIC,QAAQ;AACtCtK,yBAAO4Y,KAAKtO,MAAM,EAAE7G,QAAQ,SAAAue,MAAQ;AAChC,wBAAI3X,GAAG3H,MAAMsf,IAAI,MAAM1X,OAAO0X,IAAI,GAAG;AACjC3X,yBAAG3H,MAAMsf,IAAI,IAAI1X,OAAO0X,IAAI;oBAChC;kBACJ,CAAC;AACD,yBAAO3X;gBACX;AAAC3D,gBAAAA,QAAAD,UAAAA,SAAA5H;;;;;;;;;;;;;;;ACfD,oBAAA8H,OAAAC,wBAAAnI;;kBAAA;gBAAA,CAAA;AACA,oBAAA8Q,UAAA/Q,uBAAAC;;kBAAA;gBAAA,CAAA;AACA,oBAAA4Y,YAAA7Y,uBAAAC;;kBAAA;gBAAA,CAAA;AACA,oBAAAgX,gBAAAjX,uBAAAC;;kBAAA;gBAAA,CAAA;AACA,oBAAAilB,aAAAllB,uBAAAC;;kBAAA;gBAAA,CAAA;AACA,oBAAAklB,wBAAAnlB,uBAAAC;;kBAAA;gBAAA,CAAA;AAA2D,yBAAAD,uBAAAG,KAAA;AAAA,yBAAAA,OAAAA,IAAAC,aAAAD,MAAA,EAAAE,SAAAF,IAAA;gBAAA;AAAA,yBAAAkI,yBAAAC,aAAA;AAAA,sBAAA,OAAAC,YAAA;AAAA,2BAAA;AAAA,sBAAAC,oBAAA,oBAAAD,QAAA;AAAA,sBAAAE,mBAAA,oBAAAF,QAAA;AAAA,0BAAAF,2BAAA,SAAAA,0BAAAC,cAAA;AAAA,2BAAAA,eAAAG,mBAAAD;kBAAA,GAAAF,WAAA;gBAAA;AAAA,yBAAAF,wBAAAjI,KAAAmI,aAAA;AAAA,sBAAA,CAAAA,eAAAnI,OAAAA,IAAAC,YAAA;AAAA,2BAAAD;kBAAA;AAAA,sBAAAA,QAAA,QAAAG,QAAAH,GAAA,MAAA,YAAA,OAAAA,QAAA,YAAA;AAAA,2BAAA,EAAAE,SAAAF,IAAA;kBAAA;AAAA,sBAAAuI,QAAAL,yBAAAC,WAAA;AAAA,sBAAAI,SAAAA,MAAAC,IAAAxI,GAAA,GAAA;AAAA,2BAAAuI,MAAAE,IAAAzI,GAAA;kBAAA;AAAA,sBAAA0I,SAAA,CAAA;AAAA,sBAAAC,wBAAAtH,OAAAC,kBAAAD,OAAAuH;AAAA,2BAAApH,OAAAxB,KAAA;AAAA,wBAAAwB,QAAA,aAAAH,OAAAd,UAAAsI,eAAAxG,KAAArC,KAAAwB,GAAA,GAAA;AAAA,0BAAAsH,OAAAH,wBAAAtH,OAAAuH,yBAAA5I,KAAAwB,GAAA,IAAA;AAAA,0BAAAsH,SAAAA,KAAAL,OAAAK,KAAAC,MAAA;AAAA1H,+BAAAC,eAAAoH,QAAAlH,KAAAsH,IAAA;sBAAA,OAAA;AAAAJ,+BAAAlH,GAAA,IAAAxB,IAAAwB,GAAA;sBAAA;oBAAA;kBAAA;AAAAkH,yBAAAxI,UAAAF;AAAA,sBAAAuI,OAAA;AAAAA,0BAAAQ,IAAA/I,KAAA0I,MAAA;kBAAA;AAAA,yBAAAA;gBAAA;AAAA,yBAAAM,UAAAC,UAAAC,YAAA;AAAA,sBAAA,OAAAA,eAAA,cAAAA,eAAA,MAAA;AAAA,0BAAA,IAAAvI,UAAA,oDAAA;kBAAA;AAAAsI,2BAAA1I,YAAAc,OAAA8H,OAAAD,cAAAA,WAAA3I,WAAA,EAAAD,aAAA,EAAA6C,OAAA8F,UAAA7H,UAAA,MAAAD,cAAA,KAAA,EAAA,CAAA;AAAAE,yBAAAC,eAAA2H,UAAA,aAAA,EAAA7H,UAAA,MAAA,CAAA;AAAA,sBAAA8H;AAAAE,oCAAAH,UAAAC,UAAA;gBAAA;AAAA,yBAAAE,gBAAAC,GAAAC,GAAA;AAAAF,oCAAA/H,OAAAkI,iBAAAlI,OAAAkI,eAAAC,KAAA,IAAA,SAAAJ,iBAAAC,IAAAC,IAAA;AAAAD,oBAAAA,GAAAI,YAAAH;AAAA,2BAAAD;kBAAA;AAAA,yBAAAD,gBAAAC,GAAAC,CAAA;gBAAA;AAAA,yBAAAI,aAAAC,SAAA;AAAA,sBAAAC,4BAAAC,0BAAA;AAAA,yBAAA,SAAAC,uBAAA;AAAA,wBAAAC,QAAAC,gBAAAL,OAAA,GAAAM;AAAA,wBAAAL,2BAAA;AAAA,0BAAAM,YAAAF,gBAAA,IAAA,EAAA1J;AAAA2J,+BAAAE,QAAAC,UAAAL,OAAAM,WAAAH,SAAA;oBAAA,OAAA;AAAAD,+BAAAF,MAAAO,MAAA,MAAAD,SAAA;oBAAA;AAAA,2BAAAE,2BAAA,MAAAN,MAAA;kBAAA;gBAAA;AAAA,yBAAAM,2BAAAC,OAAAnI,MAAA;AAAA,sBAAAA,SAAAlC,QAAAkC,IAAA,MAAA,YAAA,OAAAA,SAAA,aAAA;AAAA,2BAAAA;kBAAA,WAAAA,SAAA,QAAA;AAAA,0BAAA,IAAA1B,UAAA,0DAAA;kBAAA;AAAA,yBAAA8J,uBAAAD,KAAA;gBAAA;AAAA,yBAAAC,uBAAAD,OAAA;AAAA,sBAAAA,UAAA,QAAA;AAAA,0BAAA,IAAAE,eAAA,2DAAA;kBAAA;AAAA,yBAAAF;gBAAA;AAAA,yBAAAX,4BAAA;AAAA,sBAAA,OAAAM,YAAA,eAAA,CAAAA,QAAAC;AAAA,2BAAA;AAAA,sBAAAD,QAAAC,UAAAO;AAAA,2BAAA;AAAA,sBAAA,OAAAC,UAAA;AAAA,2BAAA;AAAA,sBAAA;AAAAC,4BAAAtK,UAAAuK,QAAAzI,KAAA8H,QAAAC,UAAAS,SAAA,CAAA,GAAA,WAAA;oBAAA,CAAA,CAAA;AAAA,2BAAA;kBAAA,SAAAE,GAAA;AAAA,2BAAA;kBAAA;gBAAA;AAAA,yBAAAf,gBAAAX,GAAA;AAAAW,oCAAA3I,OAAAkI,iBAAAlI,OAAA2J,eAAAxB,KAAA,IAAA,SAAAQ,iBAAAX,IAAA;AAAA,2BAAAA,GAAAI,aAAApI,OAAA2J,eAAA3B,EAAA;kBAAA;AAAA,yBAAAW,gBAAAX,CAAA;gBAAA;AAAA,yBAAA4b,gBAAAjlB,KAAAwB,KAAA2B,OAAA;AAAA3B,wBAAAD,eAAAC,GAAA;AAAA,sBAAAA,OAAAxB,KAAA;AAAAqB,2BAAAC,eAAAtB,KAAAwB,KAAA,EAAA2B,OAAAjC,YAAA,MAAAC,cAAA,MAAAC,UAAA,KAAA,CAAA;kBAAA,OAAA;AAAApB,wBAAAwB,GAAA,IAAA2B;kBAAA;AAAA,yBAAAnD;gBAAA;AAAA,yBAAAG,QAAAH,KAAA;AAAA;AAAA,yBAAAG,UAAA,cAAA,OAAAC,UAAA,YAAA,OAAAA,OAAAC,WAAA,SAAAL,MAAA;AAAA,2BAAA,OAAAA;kBAAA,IAAA,SAAAA,MAAA;AAAA,2BAAAA,QAAA,cAAA,OAAAI,UAAAJ,KAAAM,gBAAAF,UAAAJ,SAAAI,OAAAG,YAAA,WAAA,OAAAP;kBAAA,GAAAG,QAAAH,GAAA;gBAAA;AAAA,yBAAAQ,gBAAAC,UAAAC,aAAA;AAAA,sBAAA,EAAAD,oBAAAC,cAAA;AAAA,0BAAA,IAAAC,UAAA,mCAAA;kBAAA;gBAAA;AAAA,yBAAAC,kBAAAC,QAAAC,OAAA;AAAA,2BAAAC,IAAA,GAAAA,IAAAD,MAAAE,QAAAD,KAAA;AAAA,wBAAAE,aAAAH,MAAAC,CAAA;AAAAE,+BAAAC,aAAAD,WAAAC,cAAA;AAAAD,+BAAAE,eAAA;AAAA,wBAAA,WAAAF;AAAAA,iCAAAG,WAAA;AAAAC,2BAAAC,eAAAT,QAAAU,eAAAN,WAAAO,GAAA,GAAAP,UAAA;kBAAA;gBAAA;AAAA,yBAAAQ,aAAAf,aAAAgB,YAAAC,aAAA;AAAA,sBAAAD;AAAAd,sCAAAF,YAAAH,WAAAmB,UAAA;AAAA,sBAAAC;AAAAf,sCAAAF,aAAAiB,WAAA;AAAAN,yBAAAC,eAAAZ,aAAA,aAAA,EAAAU,UAAA,MAAA,CAAA;AAAA,yBAAAV;gBAAA;AAAA,yBAAAa,eAAAK,KAAA;AAAA,sBAAAJ,MAAAK,aAAAD,KAAA,QAAA;AAAA,yBAAAzB,QAAAqB,GAAA,MAAA,WAAAA,MAAAM,OAAAN,GAAA;gBAAA;AAAA,yBAAAK,aAAAE,OAAAC,MAAA;AAAA,sBAAA7B,QAAA4B,KAAA,MAAA,YAAAA,UAAA;AAAA,2BAAAA;AAAA,sBAAAE,OAAAF,MAAA3B,OAAA8B,WAAA;AAAA,sBAAAD,SAAAE,QAAA;AAAA,wBAAAC,MAAAH,KAAAI,KAAAN,OAAAC,QAAA,SAAA;AAAA,wBAAA7B,QAAAiC,GAAA,MAAA;AAAA,6BAAAA;AAAA,0BAAA,IAAAzB,UAAA,8CAAA;kBAAA;AAAA,0BAAAqB,SAAA,WAAAF,SAAAQ,QAAAP,KAAA;gBAAA;AAgL3D,oBASMmjB,cAAW,WAAA;AAkBb,2BAAAA,aAAY7Z,QAAQ8Z,IAAI;AAAA3kB,oCAAA,MAAA0kB,YAAA;kBAAC;AACzBzjB,+BAAAyjB,cAAA,CAAA;oBAAA1jB,KAAA;oBAAA2B;;;;;;;;;;;sBARA,SAAAgG,OAAOkC,QAAQ;sBAAC;;kBAAC,GAAA;oBAAA7J,KAAA;oBAAA2B,OAcjB,SAAAsO,OAAO;oBAAC;;;;;;;kBACR,GAAA;oBAAAjQ,KAAA;oBAAA2B,OAMA,SAAAiE,UAAU;oBAAC;kBAAC,CAAA,CAAA;AAAA,yBAAA8d;gBAAA,EAAA;AAGhB,oBAqBqBE,cAAU,SAAAla,gBAAA;AAAAlC,4BAAAoc,aAAAla,cAAA;AAAA,sBAAAC,SAAAzB,aAAA0b,WAAA;AA0H3B,2BAAAA,YAAY/Z,QAAQ;AAAA,wBAAA5D;AAAAjH,oCAAA,MAAA4kB,WAAA;AAChB3d,4BAAA0D,OAAA9I,KAAA,IAAA;AA1HJ4iB,oCAAAxa,uBAAAhD,KAAA,GAAA,iBACgB;sBACZ4d,cAAc;sBACdC,sBAAsB;sBACtB7N,WAAW;sBACXxH,YAAY;sBACZT,gBAAgB;sBAChBW,uBAAuB;sBACvBoV,SAAS;sBACTC,iBAAiB;sBACjBhP,WAAW;sBACXhF,WAAW;sBACXkC,QAAQ;sBACRQ,cAAc;sBACd9I,WAAW;sBACXiH,aAAa;sBACbF,aAAa;sBACbsT,eAAe;sBACfpU,0BAA0B;;;;wBAItBqU,gBAAgB;sBACpB;sBACA7M,UAAU;sBACVzM,YAAY;sBACZuZ,aAAa;sBACb/hB,QAAQ;sBACR6I,eAAe;sBACfF,YAAY;sBACZ0X,mBAAmB;sBACnB1V,UAAU;sBACVqX,eAAe;sBACf5U,gBAAgB;sBAChB6U,gBAAgB;sBAChBnL,eAAe;sBACfxB,WAAW;sBACX4M,aAAa;sBACbrP,WAAW;sBACXsP,eAAe;sBACfxa,YACIoY,OAAOqC,oBAAoBC,OAAOC,aAAaD,OAAOE;sBAC1DC,SAAS,CAAA;sBACT9hB,eAAe;sBACfmY,6BAA6B;sBAC7B4J,UAAUvV,QAAAA;sBACVwV,YAAY;sBACZ1Y,KAAK;sBACLvB,cAAc;sBACdka,YAAY;sBACZlR,eAAe;sBACfX,sBAAsB;wBAClBuB,SAAS;wBACTtB,eAAe,CAAC;wBAChBW,gBAAgB,CAAA;wBAChBa,uBAAuB;wBACvBqQ,oBAAoB;sBACxB;sBACAthB,UAAU;sBACVb,WAAW;sBACXoiB,KAAK,CAAC;oBACV,CAAC;AAEDxB,oCAAAxa,uBAAAhD,KAAA,GAAA,YACW;sBACPgR,cAAAA,cAAAA;sBACAiE,UAAAA,UAAAA;sBACArF,sBAAAA,sBAAAA;oBACJ,CAAC;AAwBD4N,oCAAAxa,uBAAAhD,KAAA,GAAA,QASOO,IAAI;AA0BPP,0BAAK4D,SAAShK,OAAOqlB,OAAO,CAAC,GAAGjf,MAAKkf,eAAetb,MAAM;AAC1D5D,0BAAK4D,OAAOqJ,uBAAuBrT,OAAOqlB,OACtC,CAAC,GACDjf,MAAKkf,cAAcjS,sBACnBrJ,OAAOqJ,oBAAoB;AAG/BjN,0BAAK2D,YACD,YAAY,OAAOC,OAAOD,YACpBU,SAASgP,cAAcrT,MAAK4D,OAAOD,SAAS,IAC5C3D,MAAK4D,OAAOD;AAEtB,wBAAI,CAAC3D,MAAK2D,WAAW;AACjB,4BAAM,IAAI8P,MAAM,6BAA6B;oBACjD;AAEA,wBAAIzT,MAAK4D,OAAOwa,kBAAkB,MAAM;AAEpCpe,4BAAKoe,iBAAiBpe,MAAK2D;oBAC/B,WAAW,OAAO3D,MAAK4D,OAAOwa,kBAAkB,UAAU;AAEtDpe,4BAAKoe,iBAAiB/Z,SAASgP,cAC3BrT,MAAK4D,OAAOwa,cAAc;oBAElC,OAAO;AAEHpe,4BAAKoe,iBAAiBpe,MAAK4D,OAAOwa;oBACtC;AAEA,wBAAI,CAACpe,MAAKoe,gBAAgB;AACtB,4BAAM,IAAI3K,MAAM,mCAAmC;oBACvD;AAEA,wBAAIzT,MAAK4D,OAAO2F,kBAAkB,GAAG;AACjC,4BAAM,IAAIkK,MAAM,uCAAuC;oBAC3D,WAAWzT,MAAK4D,OAAO2F,iBAAiB,KAAK,GAAG;AAC5C,4BAAM,IAAIkK,MAAM,uCAAuC;oBAC3D;AAEA,wBAAIzT,MAAK4D,OAAOuC,QAAQ,MAAM;AAC1B,0BAAInG,MAAK4D,OAAOnG,aAAa,MAAM;AAC/B8C,6BAAKjE,MAAM0D,MAAK2D,WAAW;0BAAEwb,WAAW;wBAAkB,CAAC;sBAC/D,OAAO;AACH5e,6BAAKjE,MAAM0D,MAAK2D,WAAW;0BAAEwb,WAAW;wBAAkB,CAAC;sBAC/D;oBACJ;AAEA,wBAAInf,MAAK4D,OAAOma,iBAAiB;AAC7B/d,4BAAKof,mBAAmBpf,MAAK4D,OAAOma,eAAe;oBACvD;AAOA/d,0BAAKqf,cAAc;AAMnBrf,0BAAK2R,UAAU;AAOf3R,0BAAKsf,YAAY,CAAA;AAMjBtf,0BAAKuf,iBAAiB;AAEtBvf,0BAAKwf,cAAc;AAEnBxf,0BAAKyf,SAAS;AAEdzf,0BAAK8d,UAAU;AAEf9d,0BAAK0f,YAAY;AAGjB,wBAAI,OAAO1f,MAAK4D,OAAOgb,aAAa,YAAY;AAC5C,4BAAM,IAAInL,MAAM,+BAA+B;oBACnD;AAIAzT,0BAAKwD,SAASxD,MAAK4D,OAAOgb;AAK1B,wBAAI5e,MAAK4D,OAAOka,WAAW,gBAAgB;AACvC9d,4BAAK4D,OAAOka,UAAU;oBAC1B;AAEA,yBACK9d,MAAK4D,OAAOka,WAAW,cACpB9d,MAAK4D,OAAOka,YAAY,2BAC5B,CAAC7I,UAAAA,QAASnc,UAAU6mB,iBAAiB/kB,KAAK,IAAI,GAChD;AACEoF,4BAAK4D,OAAOka,UAAU;oBAC1B;AACA9d,0BAAK4f,UAAU5f,MAAK6f,SAAS7f,MAAK4D,OAAOka,OAAO;AAKhD9d,0BAAK8f,wBAAwB,CAAC;AAE9B9f,0BAAK+f,cAAc;AAQnB/f,0BAAKggB,UAAU;AAKf,wBAAIC,YAAY;AAChBjgB,0BAAKkgB,YAAY3f,KAAK4f,SAClB,WAAM;AACF,0BACIngB,MAAKyf,OAAOzb,WACZic,aAAajgB,MAAKyf,OAAOzb,QAAQ2D,eACjC,CAAC3H,MAAK4D,OAAOgB,cACf;AACEqb,oCAAYjgB,MAAKyf,OAAOzb,QAAQ2D;AAChC,4BAAIsY,WAAW;AAEXjgB,gCAAKyf,OAAO1Y,UAAU,QAAQ;wBAClC;sBACJ;oBACJ,GACA,OAAO/G,MAAK4D,OAAOib,eAAe,WAC5B7e,MAAK4D,OAAOib,aACZ,GAAG;AAGb,2BAAA/b,2BAAA9C,OAAAgD,uBAAAhD,KAAA,CAAA;kBACJ;AAEAhG,+BAAA2jB,aAAA,CAAA;oBAAA5jB,KAAA;oBAAA2B,OAQA,SAAAsO,OAAO;AACH,2BAAKoW,gBAAgB,KAAKxc,OAAO+a,OAAO;AACxC,2BAAK0B,aAAY;AACjB,2BAAKC,cAAa;AAClB,2BAAKC,gBAAe;AACpB,6BAAO;oBACX;;;;;;;;;kBAEA,GAAA;oBAAAxmB,KAAA;oBAAA2B,OAQA,SAAA0kB,gBAAgBzB,SAAS;AAAA,0BAAArY,SAAA;AAErBqY,8BAAQthB,QAAQ,SAAAmjB,QAAM;AAAA,+BAAIla,OAAKma,UAAUD,MAAM;sBAAC,CAAA;AAGhD7B,8BAAQthB,QAAQ,SAAAmjB,QAAU;AAGtB,4BAAI,CAACA,OAAOE,WAAW;AACnBpa,iCAAKqa,WAAWH,OAAOjlB,IAAI;wBAC/B;sBACJ,CAAC;AACD,2BAAKwL,UAAU,sBAAsB4X,OAAO;AAC5C,6BAAO;oBACX;;;;;;;kBAEA,GAAA;oBAAA5kB,KAAA;oBAAA2B,OAMA,SAAAklB,mBAAmB;AACf,6BAAO,KAAKd;oBAChB;;;;;;;;;kBAEA,GAAA;oBAAA/lB,KAAA;oBAAA2B,OAQA,SAAA+kB,UAAUD,QAAQ;AAAA,0BAAAjV,SAAA;AACd,0BAAI,CAACiV,OAAOjlB,MAAM;AACd,8BAAM,IAAIkY,MAAM,8BAA8B;sBAClD;AACA,0BAAI,CAAC+M,OAAOxnB,UAAU;AAClB,8BAAM,IAAIya,MAAK,UAAAiC,OACD8K,OAAOjlB,MAAI,sCAAA,CAAA;sBAE7B;AAGA,0BAAIilB,OAAOtmB,aAAa;AACpBN,+BAAO4Y,KAAKgO,OAAOtmB,WAAW,EAAEmD,QAAQ,SAAAwjB,kBAAoB;AAKxDtV,iCAAKsV,gBAAgB,IAAIL,OAAOtmB,YAAY2mB,gBAAgB;wBAChE,CAAC;sBACL;AAEA,0BAAMC,WAAWN,OAAOxnB;AAGxB,0BAAM+nB,wBAAwBnnB,OAAOonB,oBACjCzgB,KAAK2I,SAASpQ,SAAS;AAE3BioB,4CAAsB1jB,QAAQ,SAAAtD,KAAO;AACjC+mB,iCAAShoB,UAAUiB,GAAG,IAAIwG,KAAK2I,SAASpQ,UAAUiB,GAAG;sBACzD,CAAC;AAOD,2BAAKymB,OAAOjlB,IAAI,IAAI,IAAIulB,SAASN,OAAO5c,UAAU,CAAC,GAAG,IAAI;AAC1D,2BAAKmD,UAAU,gBAAgByZ,OAAOjlB,IAAI;AAC1C,6BAAO;oBACX;;;;;;;;;kBAEA,GAAA;oBAAAxB,KAAA;oBAAA2B,OAQA,SAAAilB,WAAWplB,MAAM;AACb,0BAAI,CAAC,KAAKA,IAAI,GAAG;AACb,8BAAM,IAAIkY,MAAK,UAAAiC,OAAWna,MAAI,0BAAA,CAAA;sBAClC;AACA,0BAAI,KAAKukB,sBAAsBvkB,IAAI,GAAG;AAElC,6BAAK0lB,cAAc1lB,IAAI;sBAC3B;AACA,2BAAKA,IAAI,EAAEyO,KAAI;AACf,2BAAK8V,sBAAsBvkB,IAAI,IAAI;AACnC,2BAAKwL,UAAU,sBAAsBxL,IAAI;AACzC,6BAAO;oBACX;;;;;;;;;kBAEA,GAAA;oBAAAxB,KAAA;oBAAA2B,OAQA,SAAAulB,cAAc1lB,MAAM;AAChB,0BAAI,CAAC,KAAKA,IAAI,GAAG;AACb,8BAAM,IAAIkY,MAAK,UAAAiC,OACDna,MAAI,kDAAA,CAAA;sBAEtB;AACA,0BAAI,CAAC,KAAKukB,sBAAsBvkB,IAAI,GAAG;AACnC,8BAAM,IAAIkY,MAAK,UAAAiC,OACDna,MAAI,yCAAA,CAAA;sBAEtB;AACA,0BAAI,OAAO,KAAKA,IAAI,EAAEoE,YAAY,YAAY;AAC1C,8BAAM,IAAI8T,MAAK,UAAAiC,OAAWna,MAAI,oCAAA,CAAA;sBAClC;AAEA,2BAAKA,IAAI,EAAEoE,QAAO;AAClB,6BAAO,KAAKmgB,sBAAsBvkB,IAAI;AACtC,2BAAKwL,UAAU,oBAAoBxL,IAAI;AACvC,6BAAO;oBACX;;;;;;;kBAEA,GAAA;oBAAAxB,KAAA;oBAAA2B,OAMA,SAAAwlB,oBAAoB;AAAA,0BAAAzV,SAAA;AAChB7R,6BAAO4Y,KAAK,KAAKsN,qBAAqB,EAAEziB,QAAQ,SAAA9B,MAAI;AAAA,+BAChDkQ,OAAKwV,cAAc1lB,IAAI;sBAAC,CAAA;oBAEhC;;;;;;;kBAEA,GAAA;oBAAAxB,KAAA;oBAAA2B,OAMA,SAAA2kB,eAAe;AAAA,0BAAA3T,SAAA;AACX,2BAAK+S,SAAS,IAAI,KAAKjc,OAAO,KAAKG,WAAW,KAAKC,MAAM;AACzD,2BAAK6b,OAAOzV,KAAI;AAChB,2BAAKjD,UAAU,kBAAkB,KAAK0Y,MAAM;AAE5C,0BAAI,KAAK7b,OAAOib,eAAe,OAAO;AAClC3C,+BAAO3V,iBAAiB,UAAU,KAAK2Z,WAAW,IAAI;AACtDhE,+BAAO3V,iBAAiB,qBAAqB,KAAK2Z,WAAW,IAAI;sBACrE;AAEA,2BAAKT,OAAO5M,GAAG,UAAU,WAAM;AAC3BnG,+BAAKyU,WAAU;AACfzU,+BAAK+S,OAAOxkB,SAASyR,OAAKoR,QAAQ/J,kBAAiB,CAAE;sBACzD,CAAC;AAGD,2BAAK0L,OAAO5M,GAAG,SAAS,SAACvP,GAAGrI,UAAa;AACrCigB,mCAAW,WAAA;AAAA,iCAAMxO,OAAKuH,OAAOhZ,QAAQ;wBAAC,GAAE,CAAC;sBAC7C,CAAC;AAGD,2BAAKwkB,OAAO5M,GAAG,UAAU,SAAAvP,GAAK;AAC1B,4BAAIoJ,OAAK9I,OAAO0a,eAAe;AAC3B5R,iCAAKyU,WAAU;wBACnB;AACAzU,+BAAK3F,UAAU,UAAUzD,CAAC;sBAC9B,CAAC;AAGD,2BAAKmc,OAAO5M,GAAG,YAAY,SAACvP,GAAGrI,UAAa;AACxCyR,+BAAK3F,UAAU,YAAYzD,GAAGrI,QAAQ;sBAC1C,CAAC;oBAEL;;;;;;;kBAEA,GAAA;oBAAAlB,KAAA;oBAAA2B,OAMA,SAAA4kB,gBAAgB;AAAA,0BAAAvT,SAAA;AACZ,0BAAI,KAAK+Q,SAAS;AACd,6BAAKA,QAAQne,QAAO;sBACxB;AAEA,2BAAKme,UAAU,IAAI,KAAK8B,QAAQ,KAAKhc,MAAM;AAC3C,2BAAKka,QAAQ9T,KAAI;AACjB,2BAAKjD,UAAU,mBAAmB,KAAK+W,OAAO;AAE9C,2BAAKA,QAAQjL,GAAG,UAAU,WAAM;AAC5B9F,+BAAK0S,OAAOxkB,SAAS8R,OAAK+Q,QAAQ/J,kBAAiB,CAAE;AACrDhH,+BAAKhG,UAAU,QAAQ;sBAC3B,CAAC;AACD,2BAAK+W,QAAQjL,GAAG,QAAQ,WAAA;AAAA,+BAAM9F,OAAKhG,UAAU,MAAM;sBAAC,CAAA;AACpD,2BAAK+W,QAAQjL,GAAG,SAAS,WAAA;AAAA,+BAAM9F,OAAKhG,UAAU,OAAO;sBAAC,CAAA;AAEtD,2BAAK+W,QAAQjL,GAAG,gBAAgB,SAAA0B,MAAQ;AACpCxH,+BAAK0S,OAAOxkB,SAAS8R,OAAK+Q,QAAQ/J,kBAAiB,CAAE;AACrDhH,+BAAKhG,UAAU,gBAAgBwN,IAAI;sBACvC,CAAC;AAGD,0BACI,KAAK3Q,OAAOka,YAAY,kBACxB,KAAKla,OAAOka,YAAY,wBAC1B;AACE,6BAAKA,QAAQjL,GAAG,QAAQ,WAAM;AAC1B9F,iCAAK0S,OAAOxkB,SAAS8R,OAAK+Q,QAAQ/J,kBAAiB,CAAE;wBACzD,CAAC;AAED,6BAAK+J,QAAQjL,GAAG,UAAU,WAAM;AAC5B,8BAAIuO,YAAYrU,OAAK8H,UAAS;AAC9B9H,iCAAKhG,UAAU,UAAUqa,SAAS;AAElC,8BAAIrU,OAAK+Q,QAAQnM,YAAY5E,OAAK4E,SAAS;AACvC5E,mCAAK4E,UAAU5E,OAAK+Q,QAAQnM;AAC5B5E,mCAAKhG,UAAU,QAAQgG,OAAK4E,OAAO;0BACvC;wBACJ,CAAC;sBACL;oBACJ;;;;;;kBAEA,GAAA;oBAAA5X,KAAA;oBAAA2B,OAKA,SAAA6kB,kBAAkB;AACd,0BAAI,KAAK3c,OAAO0a,eAAe;AAC3B,6BAAKoB,YAAY,IAAIxK,WAAAA,QAAS;sBAClC;oBACJ;;;;;;;kBAEA,GAAA;oBAAAnb,KAAA;oBAAA2B,OAMA,SAAAiY,cAAc;AACV,6BAAO,KAAKmK,QAAQnK,YAAW;oBACnC;;;;;;;kBAEA,GAAA;oBAAA5Z,KAAA;oBAAA2B,OAMA,SAAAkX,iBAAiB;AACb,6BAAO,KAAKkL,QAAQlL,eAAc;oBACtC;;;;;;;kBAEA,GAAA;oBAAA7Y,KAAA;oBAAA2B,OAMA,SAAA2lB,eAAeC,SAAS;AACpB,0BAAIA,WAAW,KAAK3N,YAAW,GAAI;AAC/B,6BAAKM,OAAO,CAAC;sBACjB,OAAO;AACH,6BAAKA,OAAOqN,UAAU,KAAK3N,YAAW,CAAE;sBAC5C;oBACJ;;;;;;;;;;;;;kBAEA,GAAA;oBAAA5Z,KAAA;oBAAA2B,OAYA,SAAAmV,KAAK1V,OAAOC,KAAK;AAAA,0BAAA8S,SAAA;AACb,0BAAI,KAAKtK,OAAO4Y,mBAAmB;AAE/Bjc,6BAAKic,kBAAiB;sBAC1B;AAEA,2BAAKzV,UAAU,eAAe,WAAA;AAAA,+BAAMmH,OAAK2C,KAAK1V,OAAOC,GAAG;sBAAC,CAAA;AACzD,6BAAO,KAAK0iB,QAAQjN,KAAK1V,OAAOC,GAAG;oBACvC;;;;;;;kBAEA,GAAA;oBAAArB,KAAA;oBAAA2B,OAMA,SAAA2Y,WAAW7P,UAAU;AACjB,2BAAKsZ,QAAQzJ,WAAW7P,QAAQ;oBACpC;;;;;;;kBAEA,GAAA;oBAAAzK,KAAA;oBAAA2B,OAMA,SAAA6V,QAAQ;AACJ,0BAAI,CAAC,KAAKuM,QAAQnL,SAAQ,GAAI;AAC1B,+BAAO,KAAKmL,QAAQvM,MAAK;sBAC7B;oBACJ;;;;;;;kBAEA,GAAA;oBAAAxX,KAAA;oBAAA2B,OAMA,SAAA6lB,YAAY;AACR,6BAAO,KAAKzD,QAAQnL,SAAQ,IAAK,KAAK9B,KAAI,IAAK,KAAKU,MAAK;oBAC7D;;;;;;;kBAEA,GAAA;oBAAAxX,KAAA;oBAAA2B,OAMA,SAAA8lB,YAAY;AACR,6BAAO,CAAC,KAAK1D,QAAQnL,SAAQ;oBACjC;;;;;;;;kBAEA,GAAA;oBAAA5Y,KAAA;oBAAA2B,OAOA,SAAA+lB,aAAaH,SAAS;AAClB,2BAAKI,KAAK,CAACJ,WAAW,CAAC,KAAK1d,OAAOkb,UAAU;oBACjD;;;;;;;;kBAEA,GAAA;oBAAA/kB,KAAA;oBAAA2B,OAOA,SAAAimB,YAAYL,SAAS;AACjB,2BAAKI,KAAKJ,WAAW,KAAK1d,OAAOkb,UAAU;oBAC/C;;;;;;;;;;kBAEA,GAAA;oBAAA/kB,KAAA;oBAAA2B,OASA,SAAAgmB,KAAK7Z,QAAQ;AACT,0BAAMuJ,WAAW,KAAKuC,YAAW,KAAM;AACvC,0BAAInP,WAAW,KAAKoO,eAAc,KAAM;AACxCpO,iCAAWzF,KAAKiJ,IAAI,GAAGjJ,KAAKkJ,IAAImJ,UAAU5M,YAAYqD,UAAU,EAAE,CAAC;AACnE,2BAAK+Z,cAAcpd,WAAW4M,QAAQ;oBAC1C;;;;;;;;;kBAEA,GAAA;oBAAArX,KAAA;oBAAA2B,OAQA,SAAAkmB,cAAc3mB,UAAU;AACpB,2BAAKgZ,OAAOhZ,QAAQ;AACpB,2BAAKwkB,OAAOnY,SAASrM,QAAQ;oBACjC;;;;;;;;;;;kBAEA,GAAA;oBAAAlB,KAAA;oBAAA2B,OAUA,SAAAuY,OAAOhZ,UAAU;AAAA,0BAAA4mB,SAAA;AAEb,0BACI,OAAO5mB,aAAa,YACpB,CAAC6mB,SAAS7mB,QAAQ,KAClBA,WAAW,KACXA,WAAW,GACb;AACE,8BAAM,IAAIwY,MACN,8EAA8E;sBAEtF;AACA,2BAAK1M,UAAU,eAAe,WAAA;AAAA,+BAAM8a,OAAK5N,OAAOhZ,QAAQ;sBAAC,CAAA;AAEzD,0BAAM8mB,oBAAoB,KAAKne,OAAOka,YAAY;AAClD,0BAAMzM,SAAS,KAAKyM,QAAQnL,SAAQ;AAEpC,0BAAIoP,qBAAqB,CAAC1Q,QAAQ;AAC9B,6BAAKyM,QAAQvM,MAAK;sBACtB;AAGA,0BAAMyQ,kBAAkB,KAAKpe,OAAOgB;AACpC,2BAAKhB,OAAOgB,eAAe;AAC3B,2BAAKkZ,QAAQ7J,OAAOhZ,WAAW,KAAK0Y,YAAW,CAAE;AACjD,2BAAK8L,OAAOxkB,SAASA,QAAQ;AAE7B,0BAAI8mB,qBAAqB,CAAC1Q,QAAQ;AAC9B,6BAAKyM,QAAQjN,KAAI;sBACrB;AAEA,2BAAKjN,OAAOgB,eAAeod;AAC3B,2BAAKjb,UAAU,QAAQ9L,QAAQ;oBACnC;;;;;;kBAEA,GAAA;oBAAAlB,KAAA;oBAAA2B,OAKA,SAAAumB,OAAO;AACH,2BAAK1Q,MAAK;AACV,2BAAK0C,OAAO,CAAC;AACb,2BAAKwL,OAAOxkB,SAAS,CAAC;oBAC1B;;;;;;;;;kBAEA,GAAA;oBAAAlB,KAAA;oBAAA2B,OAQA,SAAAgZ,UAAUC,UAAU;AAChB,6BAAO,KAAKmJ,QAAQpJ,UAAUC,QAAQ;oBAC1C;;;;;;;;kBAEA,GAAA;oBAAA5a,KAAA;oBAAA2B,OAOA,SAAAgY,UAAU0N,WAAW;AACjB,0BAAI,KAAKzP,YAAY,MAAM;AACvB,6BAAK0N,cAAc+B;AACnB;sBACJ;AACA,2BAAKtD,QAAQpK,UAAU0N,SAAS;AAChC,2BAAKra,UAAU,UAAUqa,SAAS;oBACtC;;;;;;;kBAEA,GAAA;oBAAArnB,KAAA;oBAAA2B,OAMA,SAAAmZ,YAAY;AACR,6BAAO,KAAKiJ,QAAQjJ,UAAS;oBACjC;;;;;;;;kBAEA,GAAA;oBAAA9a,KAAA;oBAAA2B,OAOA,SAAAqU,gBAAgBjI,MAAM;AAClB,2BAAKgW,QAAQ/N,gBAAgBjI,IAAI;oBACrC;;;;;;kBAEA,GAAA;oBAAA/N,KAAA;oBAAA2B,OAKA,SAAAsY,kBAAkB;AACd,6BAAO,KAAK8J,QAAQ9J,gBAAe;oBACvC;;;;;;;;;kBAEA,GAAA;oBAAAja,KAAA;oBAAA2B,OAQA,SAAAwmB,aAAa;AACT,2BAAKpN,QAAQ,CAAC,KAAKnD,OAAO;oBAC9B;;;;;;;;;;;;kBAEA,GAAA;oBAAA5X,KAAA;oBAAA2B,OAWA,SAAAoZ,QAAQqN,MAAM;AAEV,0BAAIA,SAAS,KAAKxQ,SAAS;AACvB,6BAAK5K,UAAU,QAAQ,KAAK4K,OAAO;AACnC;sBACJ;AAEA,0BAAI,KAAKmM,QAAQhJ,SAAS;AAGtB,6BAAKgJ,QAAQhJ,QAAQqN,IAAI;AACzB,6BAAKxQ,UAAUwQ;sBACnB,OAAO;AACH,4BAAIA,MAAM;AAGN,+BAAK9C,cAAc,KAAKvB,QAAQjJ,UAAS;AACzC,+BAAKiJ,QAAQpK,UAAU,CAAC;AACxB,+BAAK/B,UAAU;AACf,+BAAK5K,UAAU,UAAU,CAAC;wBAC9B,OAAO;AAGH,+BAAK+W,QAAQpK,UAAU,KAAK2L,WAAW;AACvC,+BAAK1N,UAAU;AACf,+BAAK5K,UAAU,UAAU,KAAKsY,WAAW;wBAC7C;sBACJ;AACA,2BAAKtY,UAAU,QAAQ,KAAK4K,OAAO;oBACvC;;;;;;;kBAEA,GAAA;oBAAA5X,KAAA;oBAAA2B,OAMA,SAAA0mB,UAAU;AACN,6BAAO,KAAKzQ;oBAChB;;;;;;;;kBAEA,GAAA;oBAAA5X,KAAA;oBAAA2B,OAOA,SAAA2mB,aAAa;AACT,6BAAO,KAAKvE,QAAQwE,WAAW,CAAA;oBACnC;;;;;;kBAEA,GAAA;oBAAAvoB,KAAA;oBAAA2B,OAKA,SAAA6mB,eAAe;AACX,2BAAK3e,OAAOgB,eAAe,CAAC,KAAKhB,OAAOgB;AACxC,2BAAKuc,WAAU;oBACnB;;;;;;kBAEA,GAAA;oBAAApnB,KAAA;oBAAA2B,OAKA,SAAA8mB,oBAAoB;AAChB,2BAAK5e,OAAOkD,WAAW,CAAC,KAAKlD,OAAOkD;oBACxC;;;;;;;kBAEA,GAAA;oBAAA/M,KAAA;oBAAA2B,OAMA,SAAA+mB,eAAgC;AAAA,0BAAnBC,aAAU9f,UAAArJ,SAAA,KAAAqJ,UAAA,CAAA,MAAAlI,SAAAkI,UAAA,CAAA,IAAG;AACtB,0BAAI,KAAKgB,OAAOqJ,qBAAqBC,cAAcwV,UAAU,GAAG;AAC5D,+BAAO,KAAK9e,OAAOqJ,qBAAqBC,cAAcwV,UAAU,EAAE9lB;sBACtE;AACA,6BAAO,KAAKgH,OAAOhH;oBACvB;;;;;;;;kBAEA,GAAA;oBAAA7C,KAAA;oBAAA2B,OAOA,SAAAinB,aAAa1lB,OAA0B;AAAA,0BAAnBylB,aAAU9f,UAAArJ,SAAA,KAAAqJ,UAAA,CAAA,MAAAlI,SAAAkI,UAAA,CAAA,IAAG;AAC7B,0BAAI,KAAKgB,OAAOqJ,qBAAqBC,cAAcwV,UAAU,GAAG;AAC5D,6BAAK9e,OAAOqJ,qBAAqBC,cAAcwV,UAAU,EAAE9lB,YAAYK;sBAC3E,OAAO;AACH,6BAAK2G,OAAOhH,YAAYK;sBAC5B;AACA,2BAAKkkB,WAAU;oBACnB;;;;;;;kBAEA,GAAA;oBAAApnB,KAAA;oBAAA2B,OAMA,SAAAknB,mBAAoC;AAAA,0BAAnBF,aAAU9f,UAAArJ,SAAA,KAAAqJ,UAAA,CAAA,MAAAlI,SAAAkI,UAAA,CAAA,IAAG;AAC1B,0BAAI,KAAKgB,OAAOqJ,qBAAqBC,cAAcwV,UAAU,GAAG;AAC5D,+BAAO,KAAK9e,OAAOqJ,qBAAqBC,cAAcwV,UAAU,EAAE7lB;sBACtE;AACA,6BAAO,KAAK+G,OAAO/G;oBACvB;;;;;;;;kBAEA,GAAA;oBAAA9C,KAAA;oBAAA2B,OAOA,SAAAmnB,iBAAiB5lB,OAAOylB,YAAY;AAChC,0BAAI,KAAK9e,OAAOqJ,qBAAqBC,cAAcwV,UAAU,GAAG;AAC5D,6BAAK9e,OAAOqJ,qBAAqBC,cAAcwV,UAAU,EAAE7lB,gBAAgBI;sBAC/E,OAAO;AACH,6BAAK2G,OAAO/G,gBAAgBI;sBAChC;AACA,2BAAKkkB,WAAU;oBACnB;;;;;;kBAEA,GAAA;oBAAApnB,KAAA;oBAAA2B,OAKA,SAAAonB,qBAAqB;AACjB,6BAAO,KAAKlf,OAAOma;oBACvB;;;;;;;kBAEA,GAAA;oBAAAhkB,KAAA;oBAAA2B,OAMA,SAAA0jB,mBAAmBniB,OAAO;AACtB,2BAAK2G,OAAOma,kBAAkB9gB;AAC9BsD,2BAAKjE,MAAM,KAAKqH,WAAW;wBAAEof,YAAY,KAAKnf,OAAOma;sBAAgB,CAAC;oBAC1E;;;;;;;kBAEA,GAAA;oBAAAhkB,KAAA;oBAAA2B,OAMA,SAAAsnB,iBAAiB;AACb,6BAAO,KAAKpf,OAAOgH;oBACvB;;;;;;;;kBAEA,GAAA;oBAAA7Q,KAAA;oBAAA2B,OAOA,SAAAunB,eAAehmB,OAAO;AAClB,2BAAK2G,OAAOgH,cAAc3N;AAC1B,2BAAKwiB,OAAOzW,aAAY;oBAC5B;;;;;;kBAEA,GAAA;oBAAAjP,KAAA;oBAAA2B,OAKA,SAAAwnB,YAAY;AACR,6BAAO,KAAKtf,OAAOzH;oBACvB;;;;;;;kBAEA,GAAA;oBAAApC,KAAA;oBAAA2B,OAMA,SAAA2M,UAAUlM,QAAQ;AACd,2BAAKyH,OAAOzH,SAASA;AACrB,2BAAKsjB,OAAOpX,UAAUlM,SAAS,KAAKyH,OAAOE,UAAU;AACrD,2BAAKqd,WAAU;oBACnB;;;;;;;;;;;;;;kBAEA,GAAA;oBAAApnB,KAAA;oBAAA2B,OAaA,SAAAynB,oBAAoBC,gBAAgB;AAChC,2BAAKxf,OAAOqJ,qBAAqBY,iBAAiBuV;AAClD,2BAAKjC,WAAU;oBACnB;;;;;;;kBAEA,GAAA;oBAAApnB,KAAA;oBAAA2B,OAMA,SAAAylB,aAAa;AACT,0BAAMzb,eAAe3G,KAAKC,MACtB,KAAK2U,YAAW,IACZ,KAAK/P,OAAOya,cACZ,KAAKza,OAAOE,UAAU;AAE9B,0BAAM6B,cAAc,KAAK8Z,OAAO7Z,SAAQ;AACxC,0BAAI1J,QAAQwJ;AAEZ,0BAAIvK,QAAQ;AACZ,0BAAIC,MAAM2D,KAAKiJ,IAAI7M,QAAQwK,aAAazJ,KAAK;AAE7C,0BACI,KAAK0H,OAAOe,eACX,CAAC,KAAKf,OAAOgB,gBAAgBc,eAAeC,cAC/C;AACEzJ,gCAAQyJ;AACRxK,gCAAQ;AACRC,8BAAMc;sBACV;AAEA,0BAAIuC;AACJ,0BAAI,KAAKmF,OAAO0a,eAAe;AAC3B,4BAAM+E,YAAY,KAAK3D,UAAUpK,oBAC7BpZ,OACAf,OACAC,GAAG;AAEP,4BAAI9B;AACJ,6BAAKA,IAAI,GAAGA,IAAI+pB,UAAU9pB,QAAQD,KAAK;AACnCmF,kCAAQ,KAAKqf,QAAQrJ,SACjBvY,OACAmnB,UAAU/pB,CAAC,EAAE,CAAC,GACd+pB,UAAU/pB,CAAC,EAAE,CAAC,CAAC;AAEnB,+BAAKmmB,OAAOzY,UACRvI,OACAvC,OACAmnB,UAAU/pB,CAAC,EAAE,CAAC,GACd+pB,UAAU/pB,CAAC,EAAE,CAAC,CAAC;wBAEvB;sBACJ,OAAO;AACHmF,gCAAQ,KAAKqf,QAAQrJ,SAASvY,OAAOf,OAAOC,GAAG;AAC/C,6BAAKqkB,OAAOzY,UAAUvI,OAAOvC,OAAOf,OAAOC,GAAG;sBAClD;AACA,2BAAK2L,UAAU,UAAUtI,OAAOvC,KAAK;oBACzC;;;;;;;;;;;kBAEA,GAAA;oBAAAnC,KAAA;oBAAA2B,OAUA,SAAA4nB,KAAKC,UAAU;AACX,0BAAI,CAACA,UAAU;AACX,6BAAK3f,OAAOya,cAAc,KAAKa,cAAcb;AAC7C,6BAAKza,OAAOgB,eAAe;sBAC/B,OAAO;AACH,6BAAKhB,OAAOya,cAAckF;AAC1B,6BAAK3f,OAAOgB,eAAe;sBAC/B;AAEA,2BAAKuc,WAAU;AACf,2BAAK1B,OAAOxkB,SAAS,KAAK6iB,QAAQ/J,kBAAiB,CAAE;AAErD,2BAAK0L,OAAOnY,SAAS,KAAKsL,eAAc,IAAK,KAAKe,YAAW,CAAE;AAC/D,2BAAK5M,UAAU,QAAQwc,QAAQ;oBACnC;;;;;;;kBAEA,GAAA;oBAAAxpB,KAAA;oBAAA2B,OAMA,SAAA8nB,gBAAgBhE,aAAa;AAAA,0BAAAiE,SAAA;AACzB,2BAAKC,kBAAkBlE,aAAa,SAAAmE,MAAQ;AACxC,4BAAI,CAACF,OAAK1D,aAAa;AACnB0D,iCAAKG,kBAAkBD,IAAI;wBAC/B;sBACJ,CAAC;oBACL;;;;;;;;kBAEA,GAAA;oBAAA5pB,KAAA;oBAAA2B,OAOA,SAAAkoB,kBAAkBhS,QAAQ;AACtB,2BAAKkM,QAAQhL,KAAKlB,MAAM;AACxB,2BAAKuP,WAAU;AACf,2BAAKnB,UAAU;AACf,2BAAKjZ,UAAU,OAAO;oBAC1B;;;;;;;kBAEA,GAAA;oBAAAhN,KAAA;oBAAA2B,OAMA,SAAAmoB,SAASxK,MAAM;AAAA,0BAAAyK,UAAA;AAEX,0BAAMC,SAAS,IAAIC,WAAU;AAC7BD,6BAAOxd,iBAAiB,YAAY,SAAAjD,GAAC;AAAA,+BAAIwgB,QAAK1M,WAAW9T,CAAC;sBAAC,CAAA;AAC3DygB,6BAAOxd,iBAAiB,QAAQ,SAAAjD,GAAC;AAAA,+BAC7BwgB,QAAKN,gBAAgBlgB,EAAElK,OAAOoJ,MAAM;sBAAC,CAAA;AAEzCuhB,6BAAOxd,iBAAiB,SAAS,WAAA;AAAA,+BAC7Bud,QAAK/c,UAAU,SAAS,oBAAoB;sBAAC,CAAA;AAEjDgd,6BAAOE,kBAAkB5K,IAAI;AAC7B,2BAAK6K,MAAK;oBACd;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBAEA,GAAA;oBAAAnqB,KAAA;oBAAA2B,OA2BA,SAAAoX,KAAKC,KAAKtU,OAAO8R,SAASa,UAAU;AAChC,0BAAI,CAAC2B,KAAK;AACN,8BAAM,IAAIU,MAAM,+BAA+B;sBACnD;AACA,2BAAKyQ,MAAK;AACV,0BAAI3T,SAAS;AAGT,4BAAM4T,uBAAuB;0BACzB,+CACI,CAAC,QAAQ,YAAY,MAAM,EAAErV,QAAQyB,OAAO,MAAM;0BACtD,0BAA0B,CAAC9R;0BAC3B,mEACI,CAAC,gBAAgB,sBAAsB,EAAEqQ,QACrC,KAAKlL,OAAOka,OAAO,MACjB;0BACV,6BAA6B,OAAO/K,QAAQ;wBAChD;AACA,4BAAMqR,gBAAgBxqB,OAAO4Y,KAAK2R,oBAAoB,EAAE7V,OACpD,SAAA+V,QAAM;AAAA,iCAAIF,qBAAqBE,MAAM;wBAAC,CAAA;AAE1C,4BAAID,cAAc7qB,QAAQ;AAEtB+qB,kCAAQC,KACJ,uEACIH,cAAcI,KAAK,OAAQ,CAAC;AAGpCjU,oCAAU;wBACd;sBACJ;AAIA,0BAAI,KAAK3M,OAAOka,YAAY,cAAc/K,eAAeS,kBAAkB;AACvET,8BAAMA,IAAII;sBACd;AAEA,8BAAQ,KAAKvP,OAAOka,SAAO;wBACvB,KAAK;AACD,iCAAO,KAAK2G,WAAW1R,KAAKtU,OAAO2S,QAAQ;wBAC/C,KAAK;wBACL,KAAK;AACD,iCAAO,KAAKsT,iBAAiB3R,KAAKtU,OAAO8R,SAASa,QAAQ;sBAAE;oBAExE;;;;;;;;;;;kBAEA,GAAA;oBAAArX,KAAA;oBAAA2B,OAUA,SAAA+oB,WAAW1R,KAAKtU,OAAO2S,UAAU;AAAA,0BAAAuT,UAAA;AAC7B,0BAAM7R,OAAO,SAAPA,MAAO8R,QAAU;AACnB,4BAAIA,QAAQ;AACRD,kCAAKrF,UAAUnU,KAAKwZ,QAAK3J,KAAK,SAAS4J,MAAM,CAAC;wBAClD;AACA,+BAAOD,QAAKE,eAAe9R,KAAK,SAAA4Q,MAAI;AAAA,iCAAIgB,QAAKnB,gBAAgBG,IAAI;wBAAC,CAAA;sBACtE;AAEA,0BAAIllB,OAAO;AACP,6BAAKqf,QAAQgH,SAASrmB,OAAO2S,QAAQ;AACrC,6BAAK+P,WAAU;AACf,6BAAKpa,UAAU,gBAAgB;AAC/B,6BAAKuY,UAAUnU,KAAK,KAAK6P,KAAK,eAAelI,IAAI,CAAC;sBACtD,OAAO;AACH,+BAAOA,KAAI;sBACf;oBACJ;;;;;;;;;;;;;;kBAEA,GAAA;oBAAA/Y,KAAA;oBAAA2B,OAaA,SAAAgpB,iBAAiBK,UAAUtmB,OAAO8R,SAASa,UAAU;AAAA,0BAAA4T,UAAA;AACjD,0BAAIjS,MAAMgS;AAEV,0BAAI,OAAOA,aAAa,UAAU;AAC9B,6BAAKjH,QAAQhL,KAAKC,KAAK,KAAKqL,gBAAgB3f,OAAO8R,OAAO;sBAC9D,OAAO;AACH,4BAAMgD,MAAMwR;AACZ,6BAAKjH,QAAQxK,QAAQC,KAAK9U,KAAK;AAI/BsU,8BAAMQ,IAAIJ;sBACd;AAEA,2BAAKmM,UAAUnU,KACX,KAAK2S,QAAQ9C,KAAK,WAAW,WAAM;AAE/B,4BAAI,CAACgK,QAAKlH,QAAQ/I,WAAW;AACzBiQ,kCAAK7D,WAAU;AACf6D,kCAAKhF,UAAU;AACfgF,kCAAKje,UAAU,OAAO;wBAC1B;sBACJ,CAAC,GACD,KAAK+W,QAAQ9C,KAAK,SAAS,SAAAiK,KAAG;AAAA,+BAAID,QAAKje,UAAU,SAASke,GAAG;sBAAC,CAAA,CAAC;AAInE,0BAAIxmB,OAAO;AACP,6BAAKqf,QAAQgH,SAASrmB,OAAO2S,QAAQ;AACrC,6BAAK+P,WAAU;AACf,6BAAKpa,UAAU,gBAAgB;sBACnC;AAKA,2BACK,CAACtI,SAAS,KAAKmF,OAAOsa,gBACvB,KAAKJ,QAAQ6B,iBAAgB,GAC/B;AACE,6BAAKkF,eAAe9R,KAAK,SAAAyM,aAAe;AACpCwF,kCAAKtB,kBAAkBlE,aAAa,SAAA5N,QAAU;AAC1CoT,oCAAKlH,QAAQlM,SAASA;AACtBoT,oCAAKlH,QAAQgH,SAAS,IAAI;AAC1BE,oCAAK7D,WAAU;AACf6D,oCAAKje,UAAU,gBAAgB;0BACnC,CAAC;wBACL,CAAC;sBACL;oBACJ;;;;;;;;kBAEA,GAAA;oBAAAhN,KAAA;oBAAA2B,OAOA,SAAAgoB,kBAAkBlE,aAAa1E,UAAU;AAAA,0BAAAoK,UAAA;AACrC,0BAAI,CAAC,KAAKnF,aAAa;AACnB,6BAAKP,cAAcA;AACnB,6BAAK1B,QAAQ4F,kBACTlE,aACA,SAAAmE,MAAQ;AAGJ,8BAAI,CAACuB,QAAKnF,eAAemF,QAAK1F,eAAeA,aAAa;AACtD1E,qCAAS6I,IAAI;AACbuB,oCAAK1F,cAAc;0BACvB;wBACJ,GACA,WAAA;AAAA,iCAAM0F,QAAKne,UAAU,SAAS,4BAA4B;wBAAC,CAAA;sBAEnE;oBACJ;;;;;;;;;kBAEA,GAAA;oBAAAhN,KAAA;oBAAA2B,OAQA,SAAAmpB,eAAe9R,KAAK+H,UAAU;AAAA,0BAAAqK,UAAA;AAC1B,0BAAIxN,UAAU/d,OAAOqlB,OACjB;wBACIlM;wBACAqF,cAAc;sBAClB,GACA,KAAKxU,OAAOob,GAAG;AAEnB,0BAAMoG,UAAU7kB,KAAKmX,UAAUC,OAAO;AAEtC,2BAAK4H,iBAAiB6F;AAEtB,2BAAK9F,UAAUnU,KACXia,QAAQvS,GAAG,YAAY,SAAAvP,GAAK;AACxB6hB,gCAAK/N,WAAW9T,CAAC;sBACrB,CAAC,GACD8hB,QAAQvS,GAAG,WAAW,SAAA8Q,MAAQ;AAC1B7I,iCAAS6I,IAAI;AACbwB,gCAAK5F,iBAAiB;sBAC1B,CAAC,GACD6F,QAAQvS,GAAG,SAAS,SAAAvP,GAAK;AACrB6hB,gCAAKpe,UAAU,SAASzD,CAAC;AACzB6hB,gCAAK5F,iBAAiB;sBAC1B,CAAC,CAAC;AAGN,6BAAO6F;oBACX;;;;;;;;kBAEA,GAAA;oBAAArrB,KAAA;oBAAA2B,OAOA,SAAA0b,WAAW9T,GAAG;AACV,0BAAI+hB;AACJ,0BAAI/hB,EAAE+T,kBAAkB;AACpBgO,0CAAkB/hB,EAAEyT,SAASzT,EAAEuT;sBACnC,OAAO;AAGHwO,0CAAkB/hB,EAAEyT,UAAUzT,EAAEyT,SAAS;sBAC7C;AACA,2BAAKhQ,UAAU,WAAWhI,KAAKC,MAAMqmB,kBAAkB,GAAG,GAAG/hB,EAAElK,MAAM;oBACzE;;;;;;;;;;;;;kBAEA,GAAA;oBAAAW,KAAA;oBAAA2B,OAYA,SAAA4pB,UAAU/rB,QAAQgsB,UAAUC,UAAUrqB,OAAOC,KAAK;AAC9C7B,+BAASA,UAAU;AACnB4B,8BAAQA,SAAS;AACjBoqB,iCAAWA,YAAY;AACvBC,iCAAWA,YAAY;AACvB,0BAAM/mB,QAAQ,KAAKqf,QAAQrJ,SAASlb,QAAQ4B,OAAOC,GAAG;AACtD,0BAAMqa,MAAM,CAAA,EAAG9G,IAAI/T,KACf6D,OACA,SAAAyQ,KAAG;AAAA,+BAAInQ,KAAKC,MAAMkQ,MAAMqW,QAAQ,IAAIA;sBAAQ,CAAA;AAGhD,6BAAO,IAAItlB,QAAQ,SAACC,SAAS0U,QAAW;AACpC,4BAAI,CAAC4Q,UAAS;AACV,8BAAMC,WAAW,IAAIC,KACjB,CAACC,KAAKC,UAAUnQ,GAAG,CAAC,GACpB;4BAAC1V,MAAM;0BAAgC,CAAC;AAE5C,8BAAM8lB,SAASC,IAAIC,gBAAgBN,QAAQ;AAC3CvJ,iCAAO8J,KAAKH,MAAM;AAClBC,8BAAIG,gBAAgBJ,MAAM;wBAC9B;AACA3lB,gCAAQuV,GAAG;sBACf,CAAC;oBACL;;;;;;;;;;;;;;;;;;;kBAEA,GAAA;oBAAA1b,KAAA;oBAAA2B,OAkBA,SAAAwqB,YAAYrmB,QAAQC,SAASC,MAAM;AAC/B,0BAAI,CAACF,QAAQ;AACTA,iCAAS;sBACb;AACA,0BAAI,CAACC,SAAS;AACVA,kCAAU;sBACd;AACA,0BAAI,CAACC,MAAM;AACPA,+BAAO;sBACX;AAEA,6BAAO,KAAK0f,OAAO7f,SAASC,QAAQC,SAASC,IAAI;oBACrD;;;;kBAEA,GAAA;oBAAAhG,KAAA;oBAAA2B,OAGA,SAAAyqB,aAAa;AACT,0BAAI,KAAK5G,kBAAkB,KAAKA,eAAevI,YAAY;AAIvD,4BAAI,KAAKuI,eAAe7I,SAAS;AAE7B,+BAAK6I,eAAe7I,QAAQ0P,OAAM,EAAG3O,MAAM,SAAAwN,KAAO;0BAAC,CAAC;wBACxD;AAEA,6BAAK1F,eAAevI,WAAWqP,MAAK;AACpC,6BAAK9G,iBAAiB;sBAC1B;oBACJ;;;;kBAEA,GAAA;oBAAAxlB,KAAA;oBAAA2B,OAGA,SAAA4qB,iBAAiB;AACb,2BAAKhH,UAAUjiB,QAAQ,SAAAiG,GAAC;AAAA,+BAAIA,EAAEkR,GAAE;sBAAE,CAAA;oBACtC;;;;kBAEA,GAAA;oBAAAza,KAAA;oBAAA2B,OAGA,SAAAwoB,QAAQ;AACJ,0BAAI,CAAC,KAAKpG,QAAQnL,SAAQ,GAAI;AAC1B,6BAAKsP,KAAI;AACT,6BAAKnE,QAAQyI,iBAAgB;sBACjC;AACA,2BAAKvG,UAAU;AACf,2BAAKmG,WAAU;AACf,2BAAKG,eAAc;AAGnB,2BAAK7G,OAAOxkB,SAAS,CAAC;AACtB,2BAAKwkB,OAAOxY,SAAS,CAAC;AACtB,2BAAKwY,OAAOzY,UAAU;wBAAEzN,QAAQ,KAAKkmB,OAAO7Z,SAAQ;sBAAG,GAAG,CAAC;oBAC/D;;;;;;kBAEA,GAAA;oBAAA7L,KAAA;oBAAA2B,OAKA,SAAAiE,UAAU;AACN,2BAAKuhB,kBAAiB;AACtB,2BAAKna,UAAU,SAAS;AACxB,2BAAKof,WAAU;AACf,2BAAKG,eAAc;AACnB,2BAAK1d,MAAK;AACV,0BAAI,KAAKhF,OAAOib,eAAe,OAAO;AAClC3C,+BAAOzJ,oBAAoB,UAAU,KAAKyN,WAAW,IAAI;AACzDhE,+BAAOzJ,oBACH,qBACA,KAAKyN,WACL,IAAI;sBAEZ;AACA,0BAAI,KAAKpC,SAAS;AACd,6BAAKA,QAAQne,QAAO;AAEpB,6BAAKme,UAAU;sBACnB;AACA,0BAAI,KAAK2B,QAAQ;AACb,6BAAKA,OAAO9f,QAAO;sBACvB;AACA,2BAAKogB,cAAc;AACnB,2BAAKC,UAAU;AACf,2BAAKR,cAAc;oBACvB;kBAAC,CAAA,GAAA,CAAA;oBAAAzlB,KAAA;oBAAA2B;;;;;;;;sBAr8CD,SAAAgG,OAAckC,QAAQ;AAClB,4BAAM4iB,aAAa,IAAI7I,YAAW/Z,MAAM;AACxC,+BAAO4iB,WAAWxc,KAAI;sBAC1B;;;;;;;;;;kBAEA,CAAA,CAAA;AAAA,yBAAA2T;gBAAA,EAnFoCpd,KAAK2I,QAAQ;AAAA7I,gBAAAA,SAAAA,SAAAA,IAAAsd;AAAAH,gCAAhCG,aAAU,WA2FV8I,OAAW;AAa5BjJ,gCAxGiBG,aAAU,QAgHbpd,IAAI;AAAAD,gBAAAA,QAAAD,UAAAA,SAAA5H;;;;;;;;;;;;;;;ACtWtB,oBAAA8H,OAAAC,wBAAAnI;;kBAAA;gBAAA,CAAA;AAA+B,yBAAAoI,yBAAAC,aAAA;AAAA,sBAAA,OAAAC,YAAA;AAAA,2BAAA;AAAA,sBAAAC,oBAAA,oBAAAD,QAAA;AAAA,sBAAAE,mBAAA,oBAAAF,QAAA;AAAA,0BAAAF,2BAAA,SAAAA,0BAAAC,cAAA;AAAA,2BAAAA,eAAAG,mBAAAD;kBAAA,GAAAF,WAAA;gBAAA;AAAA,yBAAAF,wBAAAjI,KAAAmI,aAAA;AAAA,sBAAA,CAAAA,eAAAnI,OAAAA,IAAAC,YAAA;AAAA,2BAAAD;kBAAA;AAAA,sBAAAA,QAAA,QAAAG,QAAAH,GAAA,MAAA,YAAA,OAAAA,QAAA,YAAA;AAAA,2BAAA,EAAAE,SAAAF,IAAA;kBAAA;AAAA,sBAAAuI,QAAAL,yBAAAC,WAAA;AAAA,sBAAAI,SAAAA,MAAAC,IAAAxI,GAAA,GAAA;AAAA,2BAAAuI,MAAAE,IAAAzI,GAAA;kBAAA;AAAA,sBAAA0I,SAAA,CAAA;AAAA,sBAAAC,wBAAAtH,OAAAC,kBAAAD,OAAAuH;AAAA,2BAAApH,OAAAxB,KAAA;AAAA,wBAAAwB,QAAA,aAAAH,OAAAd,UAAAsI,eAAAxG,KAAArC,KAAAwB,GAAA,GAAA;AAAA,0BAAAsH,OAAAH,wBAAAtH,OAAAuH,yBAAA5I,KAAAwB,GAAA,IAAA;AAAA,0BAAAsH,SAAAA,KAAAL,OAAAK,KAAAC,MAAA;AAAA1H,+BAAAC,eAAAoH,QAAAlH,KAAAsH,IAAA;sBAAA,OAAA;AAAAJ,+BAAAlH,GAAA,IAAAxB,IAAAwB,GAAA;sBAAA;oBAAA;kBAAA;AAAAkH,yBAAAxI,UAAAF;AAAA,sBAAAuI,OAAA;AAAAA,0BAAAQ,IAAA/I,KAAA0I,MAAA;kBAAA;AAAA,yBAAAA;gBAAA;AAAA,yBAAAvI,QAAAH,KAAA;AAAA;AAAA,yBAAAG,UAAA,cAAA,OAAAC,UAAA,YAAA,OAAAA,OAAAC,WAAA,SAAAL,MAAA;AAAA,2BAAA,OAAAA;kBAAA,IAAA,SAAAA,MAAA;AAAA,2BAAAA,QAAA,cAAA,OAAAI,UAAAJ,KAAAM,gBAAAF,UAAAJ,SAAAI,OAAAG,YAAA,WAAA,OAAAP;kBAAA,GAAAG,QAAAH,GAAA;gBAAA;AAAA,yBAAAQ,gBAAAC,UAAAC,aAAA;AAAA,sBAAA,EAAAD,oBAAAC,cAAA;AAAA,0BAAA,IAAAC,UAAA,mCAAA;kBAAA;gBAAA;AAAA,yBAAAC,kBAAAC,QAAAC,OAAA;AAAA,2BAAAC,IAAA,GAAAA,IAAAD,MAAAE,QAAAD,KAAA;AAAA,wBAAAE,aAAAH,MAAAC,CAAA;AAAAE,+BAAAC,aAAAD,WAAAC,cAAA;AAAAD,+BAAAE,eAAA;AAAA,wBAAA,WAAAF;AAAAA,iCAAAG,WAAA;AAAAC,2BAAAC,eAAAT,QAAAU,eAAAN,WAAAO,GAAA,GAAAP,UAAA;kBAAA;gBAAA;AAAA,yBAAAQ,aAAAf,aAAAgB,YAAAC,aAAA;AAAA,sBAAAD;AAAAd,sCAAAF,YAAAH,WAAAmB,UAAA;AAAA,sBAAAC;AAAAf,sCAAAF,aAAAiB,WAAA;AAAAN,yBAAAC,eAAAZ,aAAA,aAAA,EAAAU,UAAA,MAAA,CAAA;AAAA,yBAAAV;gBAAA;AAAA,yBAAAsI,UAAAC,UAAAC,YAAA;AAAA,sBAAA,OAAAA,eAAA,cAAAA,eAAA,MAAA;AAAA,0BAAA,IAAAvI,UAAA,oDAAA;kBAAA;AAAAsI,2BAAA1I,YAAAc,OAAA8H,OAAAD,cAAAA,WAAA3I,WAAA,EAAAD,aAAA,EAAA6C,OAAA8F,UAAA7H,UAAA,MAAAD,cAAA,KAAA,EAAA,CAAA;AAAAE,yBAAAC,eAAA2H,UAAA,aAAA,EAAA7H,UAAA,MAAA,CAAA;AAAA,sBAAA8H;AAAAE,oCAAAH,UAAAC,UAAA;gBAAA;AAAA,yBAAAE,gBAAAC,GAAAC,GAAA;AAAAF,oCAAA/H,OAAAkI,iBAAAlI,OAAAkI,eAAAC,KAAA,IAAA,SAAAJ,iBAAAC,IAAAC,IAAA;AAAAD,oBAAAA,GAAAI,YAAAH;AAAA,2BAAAD;kBAAA;AAAA,yBAAAD,gBAAAC,GAAAC,CAAA;gBAAA;AAAA,yBAAAI,aAAAC,SAAA;AAAA,sBAAAC,4BAAAC,0BAAA;AAAA,yBAAA,SAAAC,uBAAA;AAAA,wBAAAC,QAAAC,gBAAAL,OAAA,GAAAM;AAAA,wBAAAL,2BAAA;AAAA,0BAAAM,YAAAF,gBAAA,IAAA,EAAA1J;AAAA2J,+BAAAE,QAAAC,UAAAL,OAAAM,WAAAH,SAAA;oBAAA,OAAA;AAAAD,+BAAAF,MAAAO,MAAA,MAAAD,SAAA;oBAAA;AAAA,2BAAAE,2BAAA,MAAAN,MAAA;kBAAA;gBAAA;AAAA,yBAAAM,2BAAAC,OAAAnI,MAAA;AAAA,sBAAAA,SAAAlC,QAAAkC,IAAA,MAAA,YAAA,OAAAA,SAAA,aAAA;AAAA,2BAAAA;kBAAA,WAAAA,SAAA,QAAA;AAAA,0BAAA,IAAA1B,UAAA,0DAAA;kBAAA;AAAA,yBAAA8J,uBAAAD,KAAA;gBAAA;AAAA,yBAAAC,uBAAAD,OAAA;AAAA,sBAAAA,UAAA,QAAA;AAAA,0BAAA,IAAAE,eAAA,2DAAA;kBAAA;AAAA,yBAAAF;gBAAA;AAAA,yBAAAX,4BAAA;AAAA,sBAAA,OAAAM,YAAA,eAAA,CAAAA,QAAAC;AAAA,2BAAA;AAAA,sBAAAD,QAAAC,UAAAO;AAAA,2BAAA;AAAA,sBAAA,OAAAC,UAAA;AAAA,2BAAA;AAAA,sBAAA;AAAAC,4BAAAtK,UAAAuK,QAAAzI,KAAA8H,QAAAC,UAAAS,SAAA,CAAA,GAAA,WAAA;oBAAA,CAAA,CAAA;AAAA,2BAAA;kBAAA,SAAAE,GAAA;AAAA,2BAAA;kBAAA;gBAAA;AAAA,yBAAAf,gBAAAX,GAAA;AAAAW,oCAAA3I,OAAAkI,iBAAAlI,OAAA2J,eAAAxB,KAAA,IAAA,SAAAQ,iBAAAX,IAAA;AAAA,2BAAAA,GAAAI,aAAApI,OAAA2J,eAAA3B,EAAA;kBAAA;AAAA,yBAAAW,gBAAAX,CAAA;gBAAA;AAAA,yBAAA4b,gBAAAjlB,KAAAwB,KAAA2B,OAAA;AAAA3B,wBAAAD,eAAAC,GAAA;AAAA,sBAAAA,OAAAxB,KAAA;AAAAqB,2BAAAC,eAAAtB,KAAAwB,KAAA,EAAA2B,OAAAjC,YAAA,MAAAC,cAAA,MAAAC,UAAA,KAAA,CAAA;kBAAA,OAAA;AAAApB,wBAAAwB,GAAA,IAAA2B;kBAAA;AAAA,yBAAAnD;gBAAA;AAAA,yBAAAuB,eAAAK,KAAA;AAAA,sBAAAJ,MAAAK,aAAAD,KAAA,QAAA;AAAA,yBAAAzB,QAAAqB,GAAA,MAAA,WAAAA,MAAAM,OAAAN,GAAA;gBAAA;AAAA,yBAAAK,aAAAE,OAAAC,MAAA;AAAA,sBAAA7B,QAAA4B,KAAA,MAAA,YAAAA,UAAA;AAAA,2BAAAA;AAAA,sBAAAE,OAAAF,MAAA3B,OAAA8B,WAAA;AAAA,sBAAAD,SAAAE,QAAA;AAAA,wBAAAC,MAAAH,KAAAI,KAAAN,OAAAC,QAAA,SAAA;AAAA,wBAAA7B,QAAAiC,GAAA,MAAA;AAAA,6BAAAA;AAAA,0BAAA,IAAAzB,UAAA,8CAAA;kBAAA;AAAA,0BAAAqB,SAAA,WAAAF,SAAAQ,QAAAP,KAAA;gBAAA;AAG/B,oBAAMosB,UAAU;AAChB,oBAAMC,SAAS;AACf,oBAAMC,WAAW;AAEjB,oBAKqB3R,WAAQ,SAAAxR,gBAAA;AAAAlC,4BAAA0T,WAAAxR,cAAA;AAAA,sBAAAC,SAAAzB,aAAAgT,SAAA;AAmFzB,2BAAAA,UAAYrR,QAAQ;AAAA,wBAAAijB,kBAAAC;AAAA,wBAAA9mB;AAAAjH,oCAAA,MAAAkc,SAAA;AAChBjV,4BAAA0D,OAAA9I,KAAA,IAAA;AAnFJ4iB,oCAAAxa,uBAAAhD,KAAA,GAAA,gBACe,IAAI;AACnBwd,oCAAAxa,uBAAAhD,KAAA,GAAA,mBAAA6mB,mBAAA,CAAA,GAAArJ,gBAAAqJ,kBAEKH,SAAU;sBACP1c,MAAI,SAAAA,OAAG;AACH,6BAAK+c,kBAAiB;sBAC1B;sBACAhT,mBAAiB,SAAAA,oBAAG;AAChB,4BAAM3C,WAAW,KAAKuC,YAAW;AACjC,+BAAO,KAAKf,eAAc,IAAKxB,YAAY;sBAC/C;sBACAwB,gBAAc,SAAAA,iBAAG;AACb,+BAAO,KAAKoU,gBAAgB,KAAKC,cAAa;sBAClD;oBACJ,CAAC,GAAAzJ,gBAAAqJ,kBACAF,QAAS;sBACN3c,MAAI,SAAAA,OAAG;sBACP;sBACA+J,mBAAiB,SAAAA,oBAAG;AAChB,4BAAM3C,WAAW,KAAKuC,YAAW;AACjC,+BAAO,KAAKf,eAAc,IAAKxB,YAAY;sBAC/C;sBACAwB,gBAAc,SAAAA,iBAAG;AACb,+BAAO,KAAKoU;sBAChB;oBACJ,CAAC,GAAAxJ,gBAAAqJ,kBACAD,UAAW;sBACR5c,MAAI,SAAAA,OAAG;AACH,6BAAKjD,UAAU,QAAQ;sBAC3B;sBACAgN,mBAAiB,SAAAA,oBAAG;AAChB,+BAAO;sBACX;sBACAnB,gBAAc,SAAAA,iBAAG;AACb,+BAAO,KAAKe,YAAW;sBAC3B;oBACJ,CAAC,GAAAkT,iBAAA;AAgDD7mB,0BAAK4D,SAASA;AAEd5D,0BAAK0Q,KACD9M,OAAOga,iBACN5d,MAAK2f,iBAAgB,IAAK3f,MAAKknB,gBAAe,IAAK,CAAC;AAEzDlnB,0BAAKmnB,WAAWnnB,MAAK0Q,GAAGS;AAExBnR,0BAAKgnB,gBAAgB;AAErBhnB,0BAAKonB,iBAAiB;AAEtBpnB,0BAAKqnB,UAAMP,eAAA,CAAA,GAAAtJ,gBAAAsJ,cACNJ,SAAU9sB,OAAO8H,OAAO1B,MAAKsnB,eAAeZ,OAAO,CAAC,CAAC,GAAAlJ,gBAAAsJ,cACrDH,QAAS/sB,OAAO8H,OAAO1B,MAAKsnB,eAAeX,MAAM,CAAC,CAAC,GAAAnJ,gBAAAsJ,cACnDF,UAAWhtB,OAAO8H,OAAO1B,MAAKsnB,eAAeV,QAAQ,CAAC,CAAC,GAAAE;AAG5D9mB,0BAAK4R,SAAS;AAEd5R,0BAAKsiB,UAAU,CAAA;AAEftiB,0BAAKunB,WAAW;AAEhBvnB,0BAAKwnB,cAAc;AAEnBxnB,0BAAKynB,YAAY;AAEjBznB,0BAAKvB,QAAQ;AAEbuB,0BAAKsR,eAAe;AAEpBtR,0BAAK4Q,WAAW;AAEhB5Q,0BAAK0nB,aAAa;AAElB1nB,0BAAK2nB,SAAS;AAEd3nB,0BAAK4nB,aAAa,CAAA;AAElB5nB,0BAAK6nB,QAAQ;AAEb7nB,0BAAK4T,mBAAmBhQ,OAAOwN;AAE/BpR,0BAAK8nB,wBAAwB;AAE7B9nB,0BAAK+nB,mBAAmB;AAIxB/nB,0BAAK+U,YAAY;AAAM,2BAAA/U;kBAC3B;AAEAhG,+BAAAib,WAAA,CAAA;oBAAAlb,KAAA;oBAAA2B;;;;;;sBA7FA,SAAAikB,mBAAmB;AACf,+BAAO,CAAC,EAAEzD,OAAOQ,gBAAgBR,OAAO8L;sBAC5C;;;;;;;kBAEA,GAAA;oBAAAjuB,KAAA;oBAAA2B,OAKA,SAAAwrB,kBAAkB;AACd,0BAAI,CAAChL,OAAO+L,wBAAwB;AAChC/L,+BAAO+L,yBAAyB,KAAK/L,OAAOQ,gBACxCR,OAAO8L,oBAAkB;sBACjC;AACA,6BAAO9L,OAAO+L;oBAClB;;;;;;;;kBAEA,GAAA;oBAAAluB,KAAA;oBAAA2B,OAOA,SAAAwsB,uBAAuBC,YAAY;AAC/B,0BAAI,CAACjM,OAAOkM,+BAA+B;AACvClM,+BAAOkM,gCAAgC,KAAKlM,OAAOmM,uBAC/CnM,OAAOoM,2BAA2B,GAAG,GAAGH,UAAU;sBAC1D;AACA,6BAAOjM,OAAOkM;oBAClB;kBAAC,GAAA;oBAAAruB,KAAA;oBAAA2B,OAkED,SAAAsO,OAAO;AACH,2BAAKkG,iBAAgB;AACrB,2BAAKC,iBAAgB;AACrB,2BAAKC,mBAAkB;AAEvB,2BAAKmY,SAAS5B,MAAM;AACpB,2BAAK5W,gBAAgB,KAAKnM,OAAOoM,SAAS;AAC1C,2BAAKwY,UAAU,CAAC;oBACpB;;kBAEA,GAAA;oBAAAzuB,KAAA;oBAAA2B,OACA,SAAA+sB,oBAAoB;AAChB,0BAAI,KAAKnG,SAAS;AACd,6BAAKA,QAAQjlB,QAAQ,SAAAiR,QAAU;AAC3BA,oCAAUA,OAAOoa,WAAU;wBAC/B,CAAC;AACD,6BAAKpG,UAAU;AAEf,6BAAK1R,SAASD,QAAQ,KAAK4W,QAAQ;sBACvC;oBACJ;;;;;;kBAEA,GAAA;oBAAAxtB,KAAA;oBAAA2B,OAKA,SAAA6sB,SAASV,OAAO;AACZ,0BAAI,KAAKA,UAAU,KAAKR,OAAOQ,KAAK,GAAG;AACnC,6BAAKA,QAAQ,KAAKR,OAAOQ,KAAK;AAC9B,6BAAKA,MAAM7d,KAAKpP,KAAK,IAAI;sBAC7B;oBACJ;;;;;;kBAEA,GAAA;oBAAAb,KAAA;oBAAA2B,OAKA,SAAAitB,YAAsB;AAAA,+BAAAjP,OAAA9W,UAAArJ,QAAT+oB,UAAO,IAAAnU,MAAAuL,IAAA,GAAAE,OAAA,GAAAA,OAAAF,MAAAE,QAAA;AAAP0I,gCAAO1I,IAAA,IAAAhX,UAAAgX,IAAA;sBAAA;AAChB,2BAAKgP,WAAWtG,OAAO;oBAC3B;;;;;;;;;kBAEA,GAAA;oBAAAvoB,KAAA;oBAAA2B,OAQA,SAAAktB,WAAWtG,SAAS;AAEhB,2BAAKmG,kBAAiB;AAGtB,0BAAInG,WAAWA,QAAQ/oB,QAAQ;AAC3B,6BAAK+oB,UAAUA;AAGf,6BAAK1R,SAAS8X,WAAU;AAGxBpG,gCACKuG,OAAO,SAACC,MAAMC,MAAS;AACpBD,+BAAKnY,QAAQoY,IAAI;AACjB,iCAAOA;wBACX,GAAG,KAAKnY,QAAQ,EACfD,QAAQ,KAAK4W,QAAQ;sBAC9B;oBACJ;;kBACA,GAAA;oBAAAxtB,KAAA;oBAAA2B,OACA,SAAAyU,mBAAmB;AACf,0BAAI,KAAKvM,OAAOia,sBAAsB;AAClC,6BAAK6J,aAAa,KAAK9jB,OAAOia;AAC9B,6BAAK6J,WAAW/W,QAAQ,KAAKD,GAAGoM,WAAW;sBAC/C;oBACJ;;kBAEA,GAAA;oBAAA/iB,KAAA;oBAAA2B,OACA,SAAAqrB,oBAAoB;AAAA,0BAAAzgB,SAAA;AAChB,0BAAM0iB,OAAO,SAAPA,QAAa;AACf,4BAAMzU,OAAOjO,OAAKsM,eAAc;AAEhC,4BAAI2B,QAAQjO,OAAKqN,YAAW,KAAMrN,OAAKuhB,UAAUvhB,OAAK+gB,OAAOT,QAAQ,GAAG;AACpEtgB,iCAAKiiB,SAAS3B,QAAQ;AACtBtgB,iCAAKS,UAAU,OAAO;wBAC1B,WAAWwN,QAAQjO,OAAK8gB,kBAAkB9gB,OAAKuhB,UAAUvhB,OAAK+gB,OAAOV,MAAM,GAAG;AAC1ErgB,iCAAKiL,MAAK;wBACd,WAAWjL,OAAKuhB,UAAUvhB,OAAK+gB,OAAOX,OAAO,GAAG;AAC5CpgB,iCAAKS,UAAU,gBAAgBwN,IAAI;AACnChU,+BAAKiL,MAAMwd,KAAI,EAAC;wBACpB;sBACJ;AAEAA,2BAAI;oBACR;;kBAEA,GAAA;oBAAAjvB,KAAA;oBAAA2B,OACA,SAAA0U,qBAAqB;AACjB,2BAAKQ,WAAW,KAAKF,GAAGuY,eAAc;AACtC,2BAAKrY,SAASD,QAAQ,KAAK4W,QAAQ;oBACvC;;;;;kBAEA,GAAA;oBAAAxtB,KAAA;oBAAA2B,OAIA,SAAAwU,mBAAmB;AAEf,0BAAI,KAAKQ,GAAGwY,YAAY;AACpB,6BAAK3B,WAAW,KAAK7W,GAAGwY,WAAU;sBACtC,OAAO;AACH,6BAAK3B,WAAW,KAAK7W,GAAGyY,eAAc;sBAC1C;AAEA,2BAAK5B,SAAS5W,QAAQ,KAAKD,GAAGoM,WAAW;oBAC7C;;;;;;;;kBAEA,GAAA;oBAAA/iB,KAAA;oBAAA2B,OAOA,SAAAgZ,UAAUC,UAAU;AAChB,0BAAIA,UAAU;AAMV,4BAAI,CAAC,KAAKoT,kBAAkB;AACxB,+BAAKA,mBAAmB,IAAI7L,OAAOkN,MAAK;AAExC,+BAAKrB,iBAAiB7U,WAAW;wBACrC;AACA,4BAAI,CAAC,KAAK6U,iBAAiBrT,WAAW;AAClC,iCAAOzU,QAAQ2U,OACX,IAAInB,MAAM,4CAA4C,CAAC;wBAE/D;AACA,4BAAI,CAAC,KAAKqU,uBAAuB;AAC7B,+BAAKA,wBAAwB,KAAKpX,GAAG2Y,6BAA4B;wBACrE;AACA,6BAAK9B,SAASmB,WAAU;AACxB,6BAAKnB,SAAS5W,QAAQ,KAAKmX,qBAAqB;AAChD,6BAAKC,iBAAiBuB,YAAY,KAAKxB,sBAAsByB;AAE7D,+BAAO,KAAKxB,iBAAiBrT,UAAUC,QAAQ;sBACnD,OAAO;AACH,+BAAO1U,QAAQ2U,OAAO,IAAInB,MAAM,uBAAuBkB,QAAQ,CAAC;sBACpE;oBACJ;;;;;;kBAEA,GAAA;oBAAA5a,KAAA;oBAAA2B,OAKA,SAAAgY,UAAUhY,OAAO;AACb,2BAAK6rB,SAASiC,KAAKC,eAAe/tB,OAAO,KAAKgV,GAAGS,WAAW;oBAChE;;;;;;kBAEA,GAAA;oBAAApX,KAAA;oBAAA2B,OAKA,SAAAmZ,YAAY;AACR,6BAAO,KAAK0S,SAASiC,KAAK9tB;oBAC9B;;;;;;;;;kBAEA,GAAA;oBAAA3B,KAAA;oBAAA2B,OAQA,SAAAgoB,kBAAkBlE,aAAa1E,UAAU4O,SAAS;AAC9C,0BAAI,CAAC,KAAKjC,WAAW;AACjB,6BAAKA,YAAY,KAAKS,uBAClB,KAAKxX,MAAM,KAAKA,GAAGyX,aAAa,KAAKzX,GAAGyX,aAAa,KAAK;sBAElE;AACA,0BAAI,wBAAwBjM,QAAQ;AAGhC,6BAAKuL,UAAUkC,gBACXnK,aACA,SAAAmE,MAAI;AAAA,iCAAI7I,SAAS6I,IAAI;wBAAC,GACtB+F,OAAO;sBAEf,OAAO;AACH,6BAAKjC,UAAUkC,gBAAgBnK,WAAW,EAAEtI,KACxC,SAACyM,MAAI;AAAA,iCAAK7I,SAAS6I,IAAI;wBAAC,CAAA,EAC1BlM,MACE,SAACwN,KAAG;AAAA,iCAAKyE,QAAQzE,GAAG;wBAAC,CAAA;sBAE7B;oBACJ;;;;;;;kBAEA,GAAA;oBAAAlrB,KAAA;oBAAA2B,OAMA,SAAAopB,SAASrmB,OAAO2S,UAAU;AACtB,0BAAIA,YAAY,MAAM;AAClB,6BAAKwC,mBAAmBxC;sBAC5B;AACA,2BAAK3S,QAAQA;oBACjB;;;;;;kBAEA,GAAA;oBAAA1E,KAAA;oBAAA2B,OAKA,SAAA8sB,UAAUjvB,QAAQ;AAEd,0BAAI,KAAKiuB,eAAejuB,UAAU,IAAI,KAAKiuB,YAAYjuB,SAAS,IAAI,GAAG;AACnE;sBACJ;AAEA,2BAAKquB,aAAa,CAAA;AAClB,2BAAKJ,cAAc,CAAA;AAGnB,0BAAMpZ,WAAW,KAAKwD,SAAS,KAAKA,OAAOgY,mBAAmB;AAC9D,0BAAIrb;AACJ,2BAAKA,IAAI,GAAGA,IAAIH,UAAUG,KAAK;AAC3B,6BAAKqZ,WAAWrZ,CAAC,IAAI,CAAA;AACrB,6BAAKqZ,WAAWrZ,CAAC,EAAE,KAAKhV,SAAS,EAAE,IAAI;AACvC,6BAAKquB,WAAWrZ,CAAC,EAAE,KAAKhV,SAAS,KAAK,CAAC,IAAI;sBAC/C;AACA,2BAAKiuB,YAAY,KAAKjuB,SAAS,EAAE,IAAI;AACrC,2BAAKiuB,YAAY,KAAKjuB,SAAS,KAAK,CAAC,IAAI;oBAC7C;;;;;;;;;;kBAEA,GAAA;oBAAAQ,KAAA;oBAAA2B,OASA,SAAA+Y,SAASlb,QAAQuF,OAAOG,MAAM;AAC1B,0BAAI,KAAKR,OAAO;AACZ,+BAAO,KAAKA;sBAChB;AACA,0BAAI,CAAC,KAAKmT,QAAQ;AACd,+BAAO,CAAA;sBACX;AAEA9S,8BAAQA,SAAS;AACjBG,6BAAOA,QAAQ1F,SAAS;AAExB,2BAAKivB,UAAUjvB,MAAM;AAErB,0BAAI,CAAC,KAAKqY,QAAQ;AACd,+BAAO,KAAKhO,OAAOgK,gBACb,KAAKga,aACL,KAAKJ;sBACf;AASA,0BAAI,CAAC,KAAK5V,OAAOrY,QAAQ;AACrB,4BAAMswB,YAAY,KAAKhN,aAAa,GAAG,MAAM,KAAKsL,UAAU;AAC5D,6BAAKvW,SAASiY,UAAUjY;sBAC5B;AAEA,0BAAMkY,aAAa,KAAKlY,OAAOrY,SAASA;AACxC,0BAAMwwB,aAAa,CAAC,EAAED,aAAa,OAAO;AAC1C,0BAAM1b,WAAW,KAAKwD,OAAOgY;AAC7B,0BAAIrb;AAEJ,2BAAKA,IAAI,GAAGA,IAAIH,UAAUG,KAAK;AAC3B,4BAAM9P,QAAQ,KAAKmpB,WAAWrZ,CAAC;AAC/B,4BAAMyb,OAAO,KAAKpY,OAAOqY,eAAe1b,CAAC;AACzC,4BAAIjV,IAAC;AAEL,6BAAKA,IAAIwF,OAAOxF,KAAK2F,MAAM3F,KAAK;AAC5B,8BAAM6B,QAAQ,CAAC,EAAE7B,IAAIwwB;AACrB,8BAAM1uB,MAAM,CAAC,EAAED,QAAQ2uB;AAOvB,8BAAI7hB,MAAM+hB,KAAK7uB,KAAK;AACpB,8BAAI6M,MAAMC;AACV,8BAAIvI,IAAC;AAEL,+BAAKA,IAAIvE,OAAOuE,IAAItE,KAAKsE,KAAKqqB,YAAY;AACtC,gCAAMruB,QAAQsuB,KAAKtqB,CAAC;AAEpB,gCAAIhE,QAAQsM,KAAK;AACbA,oCAAMtM;4BACV;AAEA,gCAAIA,QAAQuM,KAAK;AACbA,oCAAMvM;4BACV;0BACJ;AAEA+C,gCAAM,IAAInF,CAAC,IAAI0O;AACfvJ,gCAAM,IAAInF,IAAI,CAAC,IAAI2O;AAEnB,8BAAIsG,KAAK,KAAKvG,MAAM,KAAKwf,YAAY,IAAIluB,CAAC,GAAG;AACzC,iCAAKkuB,YAAY,IAAIluB,CAAC,IAAI0O;0BAC9B;AAEA,8BAAIuG,KAAK,KAAKtG,MAAM,KAAKuf,YAAY,IAAIluB,IAAI,CAAC,GAAG;AAC7C,iCAAKkuB,YAAY,IAAIluB,IAAI,CAAC,IAAI2O;0BAClC;wBACJ;sBACJ;AAEA,6BAAO,KAAKrE,OAAOgK,gBAAgB,KAAKga,aAAa,KAAKJ;oBAC9D;;;;;;kBAEA,GAAA;oBAAAztB,KAAA;oBAAA2B,OAKA,SAAAqY,oBAAoB;AAChB,6BAAO,KAAK8T,MAAM9T,kBAAkBnZ,KAAK,IAAI;oBACjD;;kBAEA,GAAA;oBAAAb,KAAA;oBAAA2B,OACA,SAAA6qB,mBAAmB;AACf,0BAAI,KAAKoB,QAAQ;AACb,6BAAKA,OAAOe,WAAU;sBAC1B;oBACJ;;;;kBACA,GAAA;oBAAA3uB,KAAA;oBAAA2B,OAGA,SAAAqV,kBAAkB;AACd,2BAAK0X,kBAAiB;AACtB,2BAAKlC,iBAAgB;AACrB,2BAAKgB,SAASmB,WAAU;AACxB,2BAAKhB,cAAc,KAAKA,WAAWgB,WAAU;AAC7C,2BAAK9X,SAAS8X,WAAU;AAGxB,0BAAI,KAAK9kB,OAAOsmB,mBAAmB;AAE/B,4BACI,OAAO,KAAKxZ,GAAG4G,UAAU,cACzB,KAAK5G,GAAGmX,SAAS,UACnB;AACE,+BAAKnX,GAAG4G,MAAK;wBACjB;AAEA,6BAAK5G,KAAK;AAGV,4BAAI,CAAC,KAAK9M,OAAOga,cAAc;AAC3B1B,iCAAO+L,yBAAyB;wBACpC,OAAO;AACH,+BAAKrkB,OAAOga,eAAe;wBAC/B;AAEA1B,+BAAOkM,gCAAgC;sBAC3C;AAGA,0BAAI,KAAKN,uBAAuB;AAC5B,6BAAKC,iBAAiBxW,MAAK;AAC3B,6BAAKwW,iBAAiBuB,YAAY;AAClC,6BAAKxB,sBAAsBY,WAAU;AACrC,6BAAKZ,wBAAwB;sBACjC;oBACJ;;;;kBACA,GAAA;oBAAA/tB,KAAA;oBAAA2B,OAGA,SAAAiE,UAAU;AACN,0BAAI,CAAC,KAAKgT,SAAQ,GAAI;AAClB,6BAAKpB,MAAK;sBACd;AACA,2BAAK3I,MAAK;AACV,2BAAKgJ,SAAS;AACd,2BAAKmD,YAAY;AAEjB,2BAAKhE,gBAAe;oBACxB;;;;;;kBAEA,GAAA;oBAAAhX,KAAA;oBAAA2B,OAKA,SAAAoX,KAAKlB,QAAQ;AACT,2BAAKoV,gBAAgB;AACrB,2BAAKG,WAAW,KAAKzW,GAAGS;AACxB,2BAAKS,SAASA;AACd,2BAAKuY,aAAY;oBACrB;;kBAEA,GAAA;oBAAApwB,KAAA;oBAAA2B,OACA,SAAAyuB,eAAe;AACX,2BAAK5D,iBAAgB;AACrB,2BAAKoB,SAAS,KAAKjX,GAAGkM,mBAAkB;AAGxC,2BAAK+K,OAAOxsB,QAAQ,KAAKwsB,OAAOxsB,SAAS,KAAKwsB,OAAOyC;AACrD,2BAAKzC,OAAO1F,OAAO,KAAK0F,OAAO1F,QAAQ,KAAK0F,OAAO0C;AAEnD,2BAAKta,gBAAgB,KAAKuB,YAAY;AACtC,2BAAKqW,OAAO/V,SAAS,KAAKA;AAC1B,2BAAK+V,OAAOhX,QAAQ,KAAKC,QAAQ;oBACrC;;;;;;kBAEA,GAAA;oBAAA7W,KAAA;oBAAA2B,OAKA,SAAAoV,qBAAqB;AACjB,0BAAI,KAAKJ,GAAGmX,SAAS,aAAa;AAC9B,6BAAKnX,GAAG4Z,UAAU,KAAK5Z,GAAG4Z,OAAM;sBACpC;oBACJ;;;;;;kBAEA,GAAA;oBAAAvwB,KAAA;oBAAA2B,OAKA,SAAAiX,WAAW;AACP,6BAAO,KAAKkV,UAAU,KAAKR,OAAOX,OAAO;oBAC7C;;;;;;kBAEA,GAAA;oBAAA3sB,KAAA;oBAAA2B,OAKA,SAAAiY,cAAc;AACV,0BAAI,KAAKC,kBAAkB;AACvB,+BAAO,KAAKA;sBAChB;AACA,0BAAI,CAAC,KAAKhC,QAAQ;AACd,+BAAO;sBACX;AACA,6BAAO,KAAKA,OAAOR;oBACvB;;;;;;;;;kBAEA,GAAA;oBAAArX,KAAA;oBAAA2B,OAQA,SAAAuY,OAAO9Y,OAAOC,KAAK;AACf,0BAAI,CAAC,KAAKwW,QAAQ;AACd;sBACJ;AAEA,2BAAKwV,iBAAiB;AAEtB,0BAAIjsB,SAAS,MAAM;AACfA,gCAAQ,KAAKyX,eAAc;AAC3B,4BAAIzX,SAAS,KAAKwY,YAAW,GAAI;AAC7BxY,kCAAQ;wBACZ;sBACJ;AACA,0BAAIC,OAAO,MAAM;AACbA,8BAAM,KAAKuY,YAAW;sBAC1B;AAEA,2BAAKqT,gBAAgB7rB;AACrB,2BAAKgsB,WAAW,KAAKzW,GAAGS;AAExB,0BAAI,KAAK0W,UAAU,KAAKR,OAAOT,QAAQ,GAAG;AACtC,6BAAK2B,SAAS5B,MAAM;sBACxB;AAEA,6BAAO;wBACHxrB;wBACAC;sBACJ;oBACJ;;;;;;kBAEA,GAAA;oBAAArB,KAAA;oBAAA2B,OAKA,SAAAurB,gBAAgB;AACZ,8BAAQ,KAAKvW,GAAGS,cAAc,KAAKgW,YAAY,KAAK7V;oBACxD;;;;;;;;kBAEA,GAAA;oBAAAvX,KAAA;oBAAA2B,OAOA,SAAAmV,KAAK1V,OAAOC,KAAK;AACb,0BAAI,CAAC,KAAKwW,QAAQ;AACd;sBACJ;AAGA,2BAAKuY,aAAY;AAEjB,0BAAMI,eAAe,KAAKtW,OAAO9Y,OAAOC,GAAG;AAE3CD,8BAAQovB,aAAapvB;AACrBC,4BAAMmvB,aAAanvB;AAEnB,2BAAKgsB,iBAAiBhsB;AAEtB,2BAAKusB,OAAOxsB,MAAM,GAAGA,KAAK;AAE1B,2BAAK2V,mBAAkB;AAEvB,2BAAKyX,SAAS7B,OAAO;AAErB,2BAAK3f,UAAU,MAAM;oBACzB;;;;kBAEA,GAAA;oBAAAhN,KAAA;oBAAA2B,OAGA,SAAA6V,QAAQ;AACJ,2BAAK6V,iBAAiB;AAEtB,2BAAKJ,iBAAiB,KAAKC,cAAa;AACxC,0BAAI;AACA,6BAAKU,UAAU,KAAKA,OAAO1F,KAAK,CAAC;sBACrC,SAASgD,KAAK;sBAMV;AAGJ,2BAAKsD,SAAS5B,MAAM;AAEpB,2BAAK5f,UAAU,OAAO;oBAC1B;;;;;;;kBAEA,GAAA;oBAAAhN,KAAA;oBAAA2B,OAMA,SAAAkX,iBAAiB;AACb,6BAAO,KAAKiV,MAAMjV,eAAehY,KAAK,IAAI;oBAC9C;;;;;;kBAEA,GAAA;oBAAAb,KAAA;oBAAA2B,OAKA,SAAAsY,kBAAkB;AACd,6BAAO,KAAK1C;oBAChB;;;;;;kBAEA,GAAA;oBAAAvX,KAAA;oBAAA2B,OAKA,SAAAqU,gBAAgBrU,OAAO;AACnB,2BAAK4V,eAAe5V,SAAS;AAC7B,2BAAKisB,UAAU,KAAKA,OAAOrW,aAAamY,eACpC,KAAKnY,cACL,KAAKZ,GAAGS,WAAW;oBAE3B;;;;;;;kBAEA,GAAA;oBAAApX,KAAA;oBAAA2B,OAMA,SAAA2Y,WAAWjZ,KAAK;AACZ,2BAAKgsB,iBAAiBhsB;oBAC1B;kBAAC,CAAA,CAAA;AAAA,yBAAA6Z;gBAAA,EA5uBiC1U,KAAK2I,QAAQ;AAAA7I,gBAAAA,SAAAA,SAAAA,IAAA4U;AAAA3U,gBAAAA,QAAAD,UAAAA,SAAA5H;;;;;;;;;;ACEnD,yBAAA,SAAA,MAAA,MAAA,WAAA;AACA,sBAAA,SAAA,MAAA,SAAA,WAAA;AACA,sBAAA,QAAA;AAAA,2BAAA;AAEA,2BAAA,QAAA;AACA,wBAAA,OAAA,KAAA,IAAA,IAAA;AAEA,wBAAA,OAAA,QAAA,QAAA,GAAA;AACA,gCAAA,WAAA,OAAA,OAAA,IAAA;oBACA,OAAM;AACN,gCAAA;AACA,0BAAA,CAAA,WAAA;AACA,iCAAA,KAAA,MAAA,SAAA,IAAA;AACA,kCAAA,OAAA;sBACA;oBACA;kBACA;AAAA;AAEA,sBAAA,YAAA,WAAA;AACA,8BAAA;AACA,2BAAA;AACA,gCAAA,KAAA,IAAA;AACA,wBAAA,UAAA,aAAA,CAAA;AACA,wBAAA,CAAA;AAAA,gCAAA,WAAA,OAAA,IAAA;AACA,wBAAA,SAAA;AACA,+BAAA,KAAA,MAAA,SAAA,IAAA;AACA,gCAAA,OAAA;oBACA;AAEA,2BAAA;kBACA;AAEA,4BAAA,QAAA,WAAA;AACA,wBAAA,SAAA;AACA,mCAAA,OAAA;AACA,gCAAA;oBACA;kBACA;AAEA,4BAAA,QAAA,WAAA;AACA,wBAAA,SAAA;AACA,+BAAA,KAAA,MAAA,SAAA,IAAA;AACA,gCAAA,OAAA;AAEA,mCAAA,OAAA;AACA,gCAAA;oBACA;kBACA;AAEA,yBAAA;gBACA;AAAA;AAGA,yBAAA,WAAA;AAEA,gBAAA6H,QAAA,UAAA;;;;;ACpEA,cAAA,2BAAA,CAAA;AAGA,mBAAA,oBAAA,UAAA;AAEA,gBAAA,eAAA,yBAAA,QAAA;AACA,gBAAA,iBAAA,QAAA;AACA,qBAAA,aAAA;YACA;AAEA,gBAAAA,UAAA,yBAAA,QAAA,IAAA;;;;;;cAGA,SAAA,CAAA;;YACA;AAGA,gCAAA,QAAA,EAAAA,SAAAA,QAAA,SAAA,mBAAA;AAGA,mBAAAA,QAAA;UACA;AEnBA,cAAA,sBAAA,oBAAA,qBAAA;;;;;;;;;AEQA,IAAAkqB,gBAA4C;;;ACX5C,mBAAkC;AAClC,IAAM,iBAAiB,CAAC,KAAK,WAAW,aAAa;AACjD,QAAM,kBAAc,qBAAO,IAAI;AAC/B,8BAAU,MAAM;AACZ,QAAI,CAAC,KAAK;AACN;AAAA,IACJ;AACA,QAAI,UAAU;AACV,kBAAY,UAAU,IAAI,SAAS,SAAS,KAAK,GAAG,IAAI;AACxD,UAAI,GAAG,WAAW,YAAY,OAAO;AAAA,IACzC;AACA,WAAO,MAAM;AACT,kBAAY,WAAW,IAAI,GAAG,WAAW,YAAY,OAAO;AAC5D,kBAAY,UAAU;AAAA,IAC1B;AAAA,EACJ,GAAG,CAAC,KAAK,WAAW,QAAQ,CAAC;AACjC;AACA,IAAO,yBAAQ;;;ACjBf,IAAAC,gBAA8B;AAC9B,IAAM,wBAAoB,6BAAc,IAAI;AAC5C,IAAO,4BAAQ;;;ACDf,IAAAC,gBAA2B;AACZ,SAAR,uBAAwC;AAC3C,aAAO,0BAAW,yBAAiB;AACvC;;;ACJO,IAAM,uBAAuB;AAAA,EAChC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACJ;;;AJhBA,IAAI,SAAkC,SAAU,GAAG,GAAG;AAClD,MAAI,IAAI,CAAC;AACT,WAAS,KAAK;AAAG,QAAI,OAAO,UAAU,eAAe,KAAK,GAAG,CAAC,KAAK,EAAE,QAAQ,CAAC,IAAI;AAC9E,QAAE,CAAC,IAAI,EAAE,CAAC;AACd,MAAI,KAAK,QAAQ,OAAO,OAAO,0BAA0B;AACrD,aAAS,IAAI,GAAG,IAAI,OAAO,sBAAsB,CAAC,GAAG,IAAI,EAAE,QAAQ,KAAK;AACpE,UAAI,EAAE,QAAQ,EAAE,CAAC,CAAC,IAAI,KAAK,OAAO,UAAU,qBAAqB,KAAK,GAAG,EAAE,CAAC,CAAC;AACzE,UAAE,EAAE,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;AAAA,IACxB;AACJ,SAAO;AACX;AAKO,IAAM,SAAS,CAAC,OAAO;AAC1B,MAAI,EAAE,QAAQ,SAAS,SAAS,eAAe,MAAM,OAAO,UAAU,UAAU,YAAY,IAAI,IAAI,QAAQ,OAAO,IAAI,CAAC,UAAU,WAAW,WAAW,iBAAiB,QAAQ,SAAS,YAAY,YAAY,aAAa,CAAC;AAChO,QAAM,aAAa,qBAAqB;AACxC,QAAM,sBAAkB,sBAAO,KAAK;AACpC,QAAM,CAAC,WAAW,YAAY,QAAI,wBAAS,IAAI;AAC/C,+BAAU,MAAM;AACZ,WAAO,MAAM;AACT,oBAAc,QAAQ,cAAc,SAAS,SAAS,UAAU,OAAO;AAAA,IAC3E;AAAA,EACJ,GAAG,CAAC,SAAS,CAAC;AACd,+BAAU,MAAM;AAEZ,kBAAc,QAAQ,cAAc,SAAS,SAAS,UAAU,OAAO,qBAAqB,OAAO,CAAC,QAAQ,SAAS;AACjH,UAAI,UAAU,IAAI,MAAM,MAAM,IAAI,GAAG;AACjC,eAAO,OAAO,OAAO,OAAO,OAAO,CAAC,GAAG,MAAM,GAAG,EAAE,CAAC,IAAI,GAAG,MAAM,IAAI,EAAE,CAAC;AAAA,MAC3E;AACA,aAAO;AAAA,IACX,GAAG,EAAE,IAAI,MAAM,GAAG,CAAC,CAAC;AAAA,EACxB,GAAG,qBAAqB,IAAI,CAAC,SAAS,MAAM,IAAI,CAAC,CAAC;AAClD,+BAAU,MAAM;AACZ,QAAI,CAAC,gBAAgB,WAAW,YAAY;AACxC,sBAAgB,UAAU;AAC1B,UAAI;AACJ,eAAS,WAAW,QAAQ,KAAK,MAAM,EAAE;AACzC,UAAI,CAAC,QAAQ;AACT,iBAAS,WAAW,UAAU,KAAK;AAAA,MACvC;AACA,mBAAa,MAAM;AAAA,IACvB;AAAA,EAEJ,GAAG,CAAC,UAAU,CAAC;AACf,yBAAe,WAAW,SAAS,OAAO;AAC1C,yBAAe,WAAW,cAAc,MAAM;AAC9C,yBAAe,WAAW,cAAc,OAAO;AAC/C,yBAAe,WAAW,YAAY,aAAa;AACnD,yBAAe,WAAW,MAAM,IAAI;AACpC,yBAAe,WAAW,OAAO,KAAK;AACtC,yBAAe,WAAW,UAAU,QAAQ;AAC5C,yBAAe,WAAW,UAAU,QAAQ;AAC5C,yBAAe,WAAW,cAAc,WAAW;AACnD,SAAO;AACX;AACA,IAAO,iBAAQ;;;AK9Cf,IAAAC,gBAAkC;AAXlC,IAAIC,UAAkC,SAAU,GAAG,GAAG;AAClD,MAAI,IAAI,CAAC;AACT,WAAS,KAAK;AAAG,QAAI,OAAO,UAAU,eAAe,KAAK,GAAG,CAAC,KAAK,EAAE,QAAQ,CAAC,IAAI;AAC9E,QAAE,CAAC,IAAI,EAAE,CAAC;AACd,MAAI,KAAK,QAAQ,OAAO,OAAO,0BAA0B;AACrD,aAAS,IAAI,GAAG,IAAI,OAAO,sBAAsB,CAAC,GAAG,IAAI,EAAE,QAAQ,KAAK;AACpE,UAAI,EAAE,QAAQ,EAAE,CAAC,CAAC,IAAI,KAAK,OAAO,UAAU,qBAAqB,KAAK,GAAG,EAAE,CAAC,CAAC;AACzE,UAAE,EAAE,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;AAAA,IACxB;AACJ,SAAO;AACX;AAKe,SAAR,OAAwB,IAAI;AAC/B,MAAI,EAAE,SAAS,QAAQ,OAAO,IAAI,IAAI,OAAOA,QAAO,IAAI,CAAC,WAAW,UAAU,QAAQ,CAAC;AACvF,QAAM,KAAK,qBAAqB;AAEhC,QAAM,UAAM,sBAAO,EAAE;AACrB,+BAAU,MAAM;AACZ,QAAI,UAAU;AAAA,EAClB,GAAG,CAAC,EAAE,CAAC;AAIP,QAAM,iBAAa,sBAAO,KAAK;AAC/B,QAAM,eAAW,sBAAO,IAAI;AAC5B,+BAAU,MAAM;AACZ,QAAI,CAAC;AACD;AACJ,QAAI,CAAC;AACD;AACJ,aAAS,QAAQ,QAAQ,OAAO;AAC5B,UAAI,CAAC,SAAS;AACV;AACJ,UAAI,OAAO,OAAO,SAAS,QAAQ;AAC/B;AACJ,kBAAY,QAAQ,YAAY,SAAS,SAAS,QAAQ,QAAQ,KAAK;AAAA,IAC3E;AACA,OAAG,GAAG,gBAAgB,OAAO;AAC7B,WAAO,MAAM;AACT,SAAG,GAAG,gBAAgB,OAAO;AAAA,IACjC;AAAA,EACJ,GAAG,CAAC,IAAI,OAAO,CAAC;AAChB,+BAAU,MAAM;AACZ,QAAI,CAAC;AACD;AACJ,QAAI,CAAC;AACD;AACJ,aAAS,QAAQ,QAAQ,OAAO;AAC5B,UAAI,CAAC,SAAS;AACV;AACJ,UAAI,OAAO,OAAO,SAAS,QAAQ;AAC/B;AACJ,iBAAW,QAAQ,WAAW,SAAS,SAAS,OAAO,QAAQ,KAAK;AAAA,IACxE;AACA,OAAG,GAAG,eAAe,OAAO;AAC5B,WAAO,MAAM;AACT,SAAG,GAAG,eAAe,OAAO;AAAA,IAChC;AAAA,EACJ,GAAG,CAAC,IAAI,MAAM,CAAC;AACf,+BAAU,MAAM;AACZ,QAAI,CAAC;AACD;AACJ,QAAI,CAAC;AACD;AACJ,aAAS,QAAQ,QAAQ,OAAO;AAC5B,UAAI,CAAC,SAAS;AACV;AACJ,UAAI,OAAO,OAAO,SAAS,QAAQ;AAC/B;AACJ,iBAAW,QAAQ,WAAW,SAAS,SAAS,OAAO,QAAQ,KAAK;AAAA,IACxE;AACA,OAAG,GAAG,eAAe,OAAO;AAC5B,WAAO,MAAM;AACT,SAAG,GAAG,eAAe,OAAO;AAAA,IAChC;AAAA,EACJ,GAAG,CAAC,IAAI,MAAM,CAAC;AACf,+BAAU,MAAM;AACZ,QAAI,CAAC;AACD;AAOJ,QAAI,WAAW;AACX;AACJ,eAAW,UAAU;AAErB,aAAS,UAAU,GAAG,UAAU,IAAI;AAAA,EACxC,GAAG,CAAC,EAAE,CAAC;AACP,+BAAU,MAAM;AACZ,QAAIC;AACJ,QAAI,CAAC,MAAM,CAAC,SAAS,WAAW,CAAC,WAAW;AACxC;AAIJ,QAAI,KAAK,WAAWA,MAAK,SAAS,aAAa,QAAQA,QAAO,SAAS,SAASA,IAAG;AAC/E;AASJ,UAAM,SAAS,GAAG,QAAQ,QAAQ,KAAK,UAAQ;AAAE,UAAIA;AAAI,aAAO,KAAK,SAASA,MAAK,SAAS,aAAa,QAAQA,QAAO,SAAS,SAASA,IAAG;AAAA,IAAK,CAAC;AACnJ,QAAI,CAAC;AACD;AACJ,WAAO,OAAO,KAAK;AAGnB,OAAG,QAAQ,sBAAsB,OAAO,OAAO,OAAO,OAAO,CAAC,GAAG,SAAS,OAAO,GAAG,EAAE,MAAM,KAAK,KAAK,CAAC,CAAC;AAAA,EAC5G,GAAG,CAAC,SAAS,QAAQ,SAAS,SAAS,SAAS,KAAK,IAAI,CAAC;AAI1D,+BAAU,MAAM,MAAM;AAClB,QAAI,CAAC,IAAI,WAAW,CAAC,SAAS;AAC1B;AACJ,UAAM,QAAQ,IAAI,QAAQ,QAAQ,QAAQ,UAAU,CAAC,WAAW;AAC5D,UAAIA;AACJ,aAAO,OAAO,SAASA,MAAK,SAAS,aAAa,QAAQA,QAAO,SAAS,SAASA,IAAG;AAAA,IAC1F,CAAC;AACD,QAAI,QAAQ,QAAQ,OAAO,KAAK;AAAA,EACpC,GAAG,CAAC,CAAC;AACL,SAAO;AACX;;;ACzHA,IAAAC,gBAAyC;;;ACXzC,IAAAC,gBAAkB;AAClB,IAAM,WAAW,CAAC,EAAE,KAAK,YAAY,SAAS,MAAM;AAChD,SAAO,cAAAC,QAAM,cAAc,OAAO,EAAE,GAAO,GAAG,QAAQ;AAC1D;AACA,IAAO,mBAAQ;;;ACJR,IAAM,oBAAoB;AAAA,EAC7B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACJ;AACA,IAAM,8BAA8B,CAAC,UAAU;AAC3C,MAAI,CAAC;AACD,WAAO,CAAC;AACZ,SAAO,kBAAkB,OAAO,CAAC,iBAAiB,eAAe;AAC7D,QAAI,CAAC,OAAO,UAAU,eAAe,KAAK,OAAO,UAAU,GAAG;AAC1D,aAAO;AAAA,IACX;AACA,WAAO,OAAO,OAAO,OAAO,OAAO,CAAC,GAAG,eAAe,GAAG,EAAE,CAAC,UAAU,GAAG,MAAM,UAAU,EAAE,CAAC;AAAA,EAChG,GAAG,CAAC,CAAC;AACT;AACA,IAAO,sCAAQ;;;AC7Cf,IAAAC,gBAA4C;;;ACX5C,wBAAuB;AACR,SAAR,iBAAkC,SAAS;AAC9C,SAAO,kBAAAC,QAAW,OAAO,OAAO;AACpC;;;ACHe,SAAR,aAA8B,WAAW;AAC5C,QAAM,EAAE,QAAQ,SAAS,UAAU,SAAS,IAAI;AAChD,QAAM,eAAe,OAAO,OAAO;AACnC,MAAI,CAAC;AACD,UAAM,IAAI,MAAM,2CAA2C;AAC/D,MAAI,CAAC;AACD,UAAM,IAAI,MAAM,8DAA8D;AAClF,MAAI,OAAO,iBAAiB,YAAY;AACpC,UAAM,IAAI,MAAM,IAAI,OAAO,mFAAmF;AAAA,EAClH;AACA,SAAO,aAAa,OAAO;AAC/B;;;ACXA,IAAM,gBAAgB,CAAC,MAAM,SAAS;AAClC,QAAM,WAAW,CAAC,GAAG,IAAI;AACzB,QAAM,WAAW,CAAC,GAAG,IAAI;AACzB,QAAM,WAAW,SAAS,OAAO,UAAQ,SAAS,UAAU,CAAC,aAAa,SAAS,SAAS,KAAK,IAAI,MAAM,EAAE;AAC7G,QAAM,UAAU,SAAS,OAAO,UAAQ,SAAS,UAAU,cAAY,SAAS,SAAS,KAAK,IAAI,MAAM,EAAE;AAC1G,SAAO,EAAE,UAAU,QAAQ;AAE/B;AACA,IAAO,wBAAQ;;;AHRf,IAAIC,UAAkC,SAAU,GAAG,GAAG;AAClD,MAAI,IAAI,CAAC;AACT,WAAS,KAAK;AAAG,QAAI,OAAO,UAAU,eAAe,KAAK,GAAG,CAAC,KAAK,EAAE,QAAQ,CAAC,IAAI;AAC9E,QAAE,CAAC,IAAI,EAAE,CAAC;AACd,MAAI,KAAK,QAAQ,OAAO,OAAO,0BAA0B;AACrD,aAAS,IAAI,GAAG,IAAI,OAAO,sBAAsB,CAAC,GAAG,IAAI,EAAE,QAAQ,KAAK;AACpE,UAAI,EAAE,QAAQ,EAAE,CAAC,CAAC,IAAI,KAAK,OAAO,UAAU,qBAAqB,KAAK,GAAG,EAAE,CAAC,CAAC;AACzE,UAAE,EAAE,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;AAAA,IACxB;AACJ,SAAO;AACX;AAKe,SAAR,cAA+B,IAAI;AACtC,MAAI,EAAE,WAAW,UAAU,CAAC,GAAG,QAAQ,IAAI,IAAI,QAAQA,QAAO,IAAI,CAAC,aAAa,WAAW,SAAS,CAAC;AACrG,QAAM,2BAAuB,sBAAO,CAAC,CAAC;AACtC,QAAM,CAAC,YAAY,aAAa,QAAI,wBAAS,IAAI;AACjD,+BAAU,MAAM;AACZ,QAAI,CAAC;AACD;AACJ,QAAI,WAAW,CAAC;AAEhB,QAAI,SAAS;AACT,iBAAW,QAAQ,IAAI,YAAY;AAAA,IACvC;AACA,yBAAqB,UAAU;AAC/B,UAAM,KAAK,iBAAiB,OAAO,OAAO,OAAO,OAAO,EAAE,UAAU,GAAG,KAAK,GAAG,EAAE,SAAS,SAAS,CAAC,CAAC;AACrG,gBAAY,QAAQ,YAAY,SAAS,SAAS,QAAQ,EAAE;AAC5D,kBAAc,EAAE;AAChB,WAAO,MAAM;AACT,SAAG,QAAQ;AAAA,IACf;AAAA,EACJ,GAAG,CAAC,SAAS,CAAC;AAId,+BAAU,MAAM;AACZ,QAAI,YAAY;AACZ,YAAM,iBAAiB,QAAQ,IAAI,YAAY;AAC/C,YAAM,EAAE,UAAU,QAAQ,IAAI,sBAAc,qBAAqB,SAAS,cAAc;AACxF,2BAAqB,UAAU;AAC/B,eAAS,QAAQ,CAAC,WAAW;AACzB,YAAI,CAAC,OAAO;AACR;AACJ,uBAAe,QAAQ,eAAe,SAAS,SAAS,WAAW,cAAc,OAAO,IAAI;AAAA,MAChG,CAAC;AACD,cAAQ,QAAQ,CAAC,WAAW;AACxB,YAAI,CAAC,OAAO;AACR;AACJ,uBAAe,QAAQ,eAAe,SAAS,SAAS,WAAW,UAAU,MAAM,EAAE,WAAW,OAAO,IAAI;AAAA,MAC/G,CAAC;AAAA,IACL;AAAA,EACJ,GAAG,CAAC,OAAO,CAAC;AACZ,SAAO;AACX;;;AIxDe,SAAR,eAAgC,IAAI;AACvC,SAAO,CAAC,CAAC,MAAM,OAAO,OAAO,YAAY,OAAO,OAAO,YAAY,OAAO,OAAO,aAAa,UAAU,MAAM,WAAW;AAC7H;;;APFA,IAAIC,UAAkC,SAAU,GAAG,GAAG;AAClD,MAAI,IAAI,CAAC;AACT,WAAS,KAAK;AAAG,QAAI,OAAO,UAAU,eAAe,KAAK,GAAG,CAAC,KAAK,EAAE,QAAQ,CAAC,IAAI;AAC9E,QAAE,CAAC,IAAI,EAAE,CAAC;AACd,MAAI,KAAK,QAAQ,OAAO,OAAO,0BAA0B;AACrD,aAAS,IAAI,GAAG,IAAI,OAAO,sBAAsB,CAAC,GAAG,IAAI,EAAE,QAAQ,KAAK;AACpE,UAAI,EAAE,QAAQ,EAAE,CAAC,CAAC,IAAI,KAAK,OAAO,UAAU,qBAAqB,KAAK,GAAG,EAAE,CAAC,CAAC;AACzE,UAAE,EAAE,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;AAAA,IACxB;AACJ,SAAO;AACX;AAQA,IAAMC,cAAa,CAAC,OAAO;AACvB,MAAI,EAAE,UAAU,UAAU,CAAC,GAAG,QAAQ,IAAI,IAAI,QAAQD,QAAO,IAAI,CAAC,YAAY,WAAW,SAAS,CAAC;AAGnG,QAAM,6BAAyB,uBAAQ,MAAM;AACzC,QAAI,gBAAgB,CAAC;AACrB,2BAAS,QAAQ,UAAU,CAAC,YAAY;AACpC,UAAI,OAAO,YAAY,YAAY,YAAY,QAAQ,CAAC,UAAU,QAAQ,EAAE,SAAS,OAAO,OAAO,GAAG;AAClG;AAAA,MACJ;AAEA,UAAI,CAAC,eAAe,OAAO;AACvB;AACJ,YAAM,EAAE,OAAAE,QAAO,MAAM,OAAO,IAAI;AAChC,UAAI,WAAW,kBAAU;AACrB,cAAM,EAAE,GAAG,IAAIA;AACf,wBAAgB,oCAA4BA,MAAK;AACjD,wBAAgB,OAAO,OAAO,OAAO,OAAO,CAAC,GAAG,aAAa,GAAG,EAAE,WAAW,MAAM,GAAG,CAAC;AAAA,MAC3F;AAAA,IACJ,CAAC;AACD,WAAO;AAAA,EACX,GAAG,CAAC,QAAQ,CAAC;AACb,QAAM,aAAa,cAAc,OAAO,OAAO,OAAO,OAAO;AAAA,IAAE;AAAA;AAAA,IAE3D;AAAA,EAAQ,GAAG,KAAK,GAAG,sBAAsB,CAAC;AAC9C,SAAQ,cAAAC,QAAM,cAAc,0BAAkB,UAAU,EAAE,OAAO,WAAW,GAAG,QAAQ;AAC3F;AACAF,YAAW,eAAe;AAAA,EACtB,UAAU;AAAA,EACV,SAAS,CAAC;AACd;AACA,IAAO,qBAAQA;",
  "names": ["_style", "_interopRequireDefault", "require", "_getId", "obj", "__esModule", "default", "_typeof", "Symbol", "iterator", "constructor", "prototype", "_classCallCheck", "instance", "Constructor", "TypeError", "_defineProperties", "target", "props", "i", "length", "descriptor", "enumerable", "configurable", "writable", "Object", "defineProperty", "_toPropertyKey", "key", "_createClass", "protoProps", "staticProps", "arg", "_toPrimitive", "String", "input", "hint", "prim", "toPrimitive", "undefined", "res", "call", "Number", "CanvasEntry", "wave", "waveCtx", "progress", "progressCtx", "start", "end", "id", "getId", "name", "toLowerCase", "canvasContextAttributes", "value", "initWave", "element", "getContext", "initProgress", "updateDimensions", "elementWidth", "totalWidth", "width", "height", "offsetLeft", "elementSize", "style", "hasProgressCanvas", "clearWave", "clearRect", "canvas", "setFillStyles", "waveColor", "progressColor", "fillStyle", "getFillStyle", "ctx", "color", "CanvasGradient", "waveGradient", "createLinearGradient", "forEach", "index", "addColorStop", "applyCanvasTransforms", "vertical", "setTransform", "fillRects", "x", "y", "radius", "fillRectToContext", "drawRoundedRect", "fillRect", "beginPath", "moveTo", "lineTo", "quadraticCurveTo", "closePath", "fill", "drawLines", "peaks", "absmax", "halfH", "offsetY", "drawLineToContext", "first", "Math", "round", "last", "canvasStart", "canvasEnd", "scale", "halfOffset", "absmaxHalf", "peak", "h", "halfPixel", "j", "destroy", "getImage", "format", "quality", "type", "_this", "Promise", "resolve", "toBlob", "toDataURL", "exports", "module", "util", "_interopRequireWildcard", "_getRequireWildcardCache", "nodeInterop", "WeakMap", "cacheBabelInterop", "cacheNodeInterop", "cache", "has", "get", "newObj", "hasPropertyDescriptor", "getOwnPropertyDescriptor", "hasOwnProperty", "desc", "set", "_inherits", "subClass", "superClass", "create", "_setPrototypeOf", "o", "p", "setPrototypeOf", "bind", "__proto__", "_createSuper", "Derived", "hasNativeReflectConstruct", "_isNativeReflectConstruct", "_createSuperInternal", "Super", "_getPrototypeOf", "result", "NewTarget", "Reflect", "construct", "arguments", "apply", "_possibleConstructorReturn", "self", "_assertThisInitialized", "ReferenceError", "sham", "Proxy", "Boolean", "valueOf", "e", "getPrototypeOf", "Drawer", "_util$Observer", "_super", "container", "params", "withOrientation", "pixelRatio", "lastPos", "wrapper", "el", "styles", "createWrapper", "appendChild", "document", "createElement", "display", "position", "userSelect", "webkitUserSelect", "fillParent", "scrollParent", "cursor", "hideCursor", "overflowX", "hideScrollbar", "overflowY", "setupWrapperEvents", "handleEvent", "noPrevent", "preventDefault", "clientX", "targetTouches", "bbox", "getBoundingClientRect", "nominalWidth", "parentWidth", "getWidth", "progressPixels", "getProgressPixels", "scrollLeft", "scrollWidth", "clamp", "wrapperBbox", "rtl", "right", "left", "_this2", "addEventListener", "orientedEvent", "scrollbarHeight", "offsetHeight", "clientHeight", "clientY", "bottom", "interact", "fireEvent", "drawPeaks", "setWidth", "barWidth", "drawBars", "drawWave", "resetScroll", "recenter", "percent", "recenterOnPosition", "immediate", "half", "clientWidth", "maxScroll", "offset", "rate", "autoCenterRate", "max", "min", "getScrollX", "newWidth", "updateSize", "setHeight", "minPxDelta", "pos", "autoCenter", "newPos", "autoCenterImmediately", "updateProgress", "unAll", "parentNode", "domElement", "removeChild", "updateCursor", "channelIndex", "Observer", "_drawer", "_drawer2", "MultiCanvas", "_Drawer", "maxCanvasWidth", "maxCanvasElementWidth", "canvases", "progressWave", "EntryClass", "drawingContextAttributes", "overlap", "ceil", "barRadius", "init", "createElements", "zIndex", "top", "overflow", "boxSizing", "borderRightStyle", "pointerEvents", "addCanvas", "borderRightWidth", "cursorWidth", "borderRightColor", "cursorColor", "requiredCanvases", "removeCanvas", "canvasWidth", "lastCanvas", "entry", "leftOffset", "push", "lastEntry", "parentElement", "pop", "_this3", "frame", "_this4", "prepareDraw", "_ref", "hasMinVals", "ch", "peakIndexScale", "bar", "gap", "barGap", "step", "peakIndex", "peakIndexRange", "floor", "peakIndexEnd", "newPeak", "abs", "barMinHeight", "_this5", "_ref2", "reflectedPeaks", "len", "drawLine", "_this6", "_ref3", "splitChannelsOptions", "channelColors", "startCanvas", "endCanvas", "intersection", "x1", "y1", "x2", "y2", "_ref4", "hideChannel", "splitChannels", "filterChannels", "includes", "fn", "drawIndex", "normalizedMax", "_this7", "Array", "channels", "filteredChannels", "filter", "c", "overlay", "overallAbsMax", "relativeNormalization", "map", "channelPeaks", "absMax", "indexOf", "barHeight", "normalize", "some", "val", "all", "images", "_mediaelement", "_get", "property", "receiver", "base", "_superPropBase", "object", "MediaElementWebAudio", "_MediaElement", "sourceMediaElement", "setPlaybackRate", "audioRate", "createTimer", "createVolumeNode", "createScriptNode", "createAnalyserNode", "_load", "media", "preload", "createMediaElementSource", "mediaElement", "ac", "connect", "analyser", "play", "resumeAudioContext", "destroyWebAudio", "MediaElement", "_webaudio", "_WebAudio", "currentTime", "duration", "paused", "playbackRate", "pause", "volume", "mediaType", "elementPosition", "isMuted", "buffer", "onPlayEnd", "mediaListeners", "_setupMediaListeners", "error", "waiting", "canplay", "ended", "seeked", "event", "volumechange", "muted", "keys", "removeEventListener", "onAudioProcess", "isPaused", "getCurrentTime", "on", "load", "url", "controls", "mediaControls", "autoplay", "src", "prevMedia", "querySelector", "loadElt", "elt", "HTMLMediaElement", "Error", "setVolume", "getDuration", "explicitDuration", "Infinity", "seekable", "getPlayedPercents", "getPlaybackRate", "seekTo", "isNaN", "clearPlayEnd", "promise", "setPlayEnd", "_onPlayEnd", "time", "un", "getPeaks", "setSinkId", "deviceId", "reject", "getVolume", "setMute", "destroyed", "removeMediaElementOnDestroy", "WebAudio", "PeakCache", "clearPeakCache", "peakCacheRanges", "peakCacheLength", "addRangeToPeakCache", "uncachedRanges", "item", "arr", "concat", "sort", "a", "b", "uncachedRangePairs", "getCacheRanges", "peakCacheRangePairs", "_max", "_min", "values", "utilMax", "utilmin", "_observer", "ProgressHandler", "contentLength", "response", "_reader", "body", "getReader", "total", "parseInt", "loaded", "controller", "read", "then", "done", "onProgress", "lengthComputable", "close", "byteLength", "enqueue", "catch", "fetchFile", "options", "fetchHeaders", "Headers", "fetchRequest", "Request", "AbortController", "requestHeaders", "header", "append", "responseType", "fetchOptions", "method", "headers", "mode", "credentials", "redirect", "referrer", "signal", "fetch", "progressAvailable", "Response", "ReadableStream", "errMsg", "ok", "arrayBuffer", "json", "blob", "text", "status", "_requestAnimationFrame", "func", "_len", "args", "_key", "reqAnimationFrame", "prefix", "random", "toString", "substring", "_absMax", "_frame", "_debounce", "_preventClick", "_fetch", "_clamp", "_orientation", "_silenceMode", "largest", "smallest", "_disabledEventEmissions", "handlers", "callback", "splice", "once", "handler", "setTimeout", "setDisabledEventEmissions", "eventNames", "_isDisabledEventEmission", "_len2", "_key2", "verticalPropMap", "offsetTop", "offsetWidth", "mapProp", "prop", "isProxy", "preventClickHandler", "stopPropagation", "preventClick", "_default", "window", "requestAnimationFrame", "webkitRequestAnimationFrame", "mozRequestAnimationFrame", "oRequestAnimationFrame", "msRequestAnimationFrame", "ignoreSilenceMode", "silentAC", "AudioContext", "silentBS", "createBufferSource", "createBuffer", "destination", "audioData", "tmp", "innerHTML", "audioSilentMode", "children", "disableRemotePlayback", "remove", "_peakcache", "_mediaelementWebaudio", "_defineProperty", "PluginClass", "ws", "WaveSurfer", "audioContext", "audioScriptProcessor", "backend", "backgroundColor", "dragSelection", "desynchronized", "forceDecode", "loopSelection", "mediaContainer", "minPxPerSec", "partialRender", "devicePixelRatio", "screen", "deviceXDPI", "logicalXDPI", "plugins", "renderer", "responsive", "skipLength", "splitDragSelection", "xhr", "assign", "defaultParams", "transform", "setBackgroundColor", "savedVolume", "tmpEvents", "currentRequest", "arraybuffer", "drawer", "peakCache", "supportsWebAudio", "Backend", "backends", "initialisedPluginList", "isDestroyed", "isReady", "prevWidth", "_onResize", "debounce", "registerPlugins", "createDrawer", "createBackend", "createPeakCache", "plugin", "addPlugin", "deferInit", "initPlugin", "getActivePlugins", "pluginStaticProp", "Instance", "observerPrototypeKeys", "getOwnPropertyNames", "destroyPlugin", "destroyAllPlugins", "drawBuffer", "newVolume", "setCurrentTime", "seconds", "playPause", "isPlaying", "skipBackward", "skip", "skipForward", "seekAndCenter", "_this8", "isFinite", "isWebAudioBackend", "oldScrollParent", "stop", "toggleMute", "mute", "getMute", "getFilters", "filters", "toggleScroll", "toggleInteraction", "getWaveColor", "channelIdx", "setWaveColor", "getProgressColor", "setProgressColor", "getBackgroundColor", "background", "getCursorColor", "setCursorColor", "getHeight", "setFilteredChannels", "channelIndices", "newRanges", "zoom", "pxPerSec", "loadArrayBuffer", "_this9", "decodeArrayBuffer", "data", "loadDecodedBuffer", "loadBlob", "_this10", "reader", "FileReader", "readAsArrayBuffer", "empty", "preloadIgnoreReasons", "activeReasons", "reason", "console", "warn", "join", "loadBuffer", "loadMediaElement", "_this11", "action", "getArrayBuffer", "setPeaks", "urlOrElt", "_this12", "err", "_this13", "_this14", "request", "percentComplete", "exportPCM", "accuracy", "noWindow", "blobJSON", "Blob", "JSON", "stringify", "objURL", "URL", "createObjectURL", "open", "revokeObjectURL", "exportImage", "cancelAjax", "cancel", "abort", "clearTmpEvents", "disconnectSource", "wavesurfer", "__VERSION__", "PLAYING", "PAUSED", "FINISHED", "_defineProperty2", "_this$states", "addOnAudioProcess", "startPosition", "getPlayedTime", "getAudioContext", "lastPlay", "scheduledPause", "states", "stateBehaviors", "gainNode", "mergedPeaks", "offlineAc", "scriptNode", "source", "splitPeaks", "state", "sinkStreamDestination", "sinkAudioElement", "webkitAudioContext", "WaveSurferAudioContext", "getOfflineAudioContext", "sampleRate", "WaveSurferOfflineAudioContext", "OfflineAudioContext", "webkitOfflineAudioContext", "setState", "setLength", "disconnectFilters", "disconnect", "setFilter", "setFilters", "reduce", "prev", "curr", "loop", "createAnalyser", "createGain", "createGainNode", "Audio", "createMediaStreamDestination", "srcObject", "stream", "gain", "setValueAtTime", "errback", "decodeAudioData", "numberOfChannels", "newBuffer", "sampleSize", "sampleStep", "chan", "getChannelData", "closeAudioContext", "createSource", "noteGrainOn", "noteOff", "resume", "adjustedTime", "import_react", "import_react", "import_react", "import_react", "__rest", "_a", "import_react", "import_react", "React", "import_react", "WaveSurfer", "__rest", "__rest", "WaveSurfer", "props", "React"]
}
